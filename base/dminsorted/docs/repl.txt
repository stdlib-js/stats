
{{alias}}( N, x, strideX )
    Computes the minimum value of a sorted double-precision floating-point
    strided array.

    The input strided array must be sorted in either strictly ascending or
    descending order.

    The `N` and stride parameters determine which elements in `x` are accessed
    at runtime.

    Indexing is relative to the first index. To introduce an offset, use a typed
    array view.

    If `N <= 0`, the function returns `NaN`.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Sorted input array.

    strideX: integer
        Stride Length.

    Returns
    -------
    out: number
        Minimum value.

    Examples
    --------
    // Standard Usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0 ] );
    > {{alias}}( x.length, x, 1 )
    1.0

    // Using `N` and stride parameters:
    > x = new {{alias:@stdlib/array/float64}}( [ -2.0, 1.0, 1.0, -5.0, 2.0, -1.0 ] );
    > {{alias}}( 3, x, 2 )
    -2.0

    // Using view offsets:
    > var x0 = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );
    > var x1 = new {{alias:@stdlib/array/float64}}( x0.buffer, x0.BYTES_PER_ELEMENT*1 );
    > {{alias}}( 3, x1, 2 )
    -2.0


{{alias}}.ndarray( N, x, strideX, offsetX )
    Computes the minimum value of a sorted double-precision floating-point
    strided array using alternative indexing semantics.

    While typed array views mandate a view offset based on the underlying
    buffer, the `offset` parameter supports indexing semantics based on a
    starting index.

    Parameters
    ----------
    N: integer
        Number of indexed elements.

    x: Float64Array
        Sorted input array.

    strideX: integer
        Stride Length.

    offsetX: integer
        Starting index.

    Returns
    -------
    out: number
        Minimum value.

    Examples
    --------
    // Standard Usage:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, 2.0, 3.0 ] );
    > {{alias}}.ndarray( x.length, x, 1, 0 )
    1.0

    // Using offset parameter:
    > var x = new {{alias:@stdlib/array/float64}}( [ 1.0, -2.0, 3.0, 2.0, 5.0, 3.0 ] );
    > {{alias}}.ndarray( 3, x, 2, 1 )
    -2.0

    See Also
    --------

