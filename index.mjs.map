{"version":3,"file":"index.mjs","sources":["../base/dists/f/cdf/lib/cdf.js","../base/dists/f/cdf/lib/factory.js","../base/dists/f/cdf/lib/index.js","../anova1/lib/validate.js","../anova1/lib/unique.js","../incr/stdev/lib/main.js","../incr/stdev/lib/index.js","../anova1/lib/mean_table.js","../anova1/lib/mean.js","../anova1/lib/print.js","../anova1/lib/anova1.js","../anova1/lib/index.js","../base/dists/gamma/cdf/lib/cdf.js","../base/dists/degenerate/cdf/lib/cdf.js","../base/dists/degenerate/cdf/lib/factory.js","../base/dists/degenerate/cdf/lib/index.js","../base/dists/gamma/cdf/lib/factory.js","../base/dists/gamma/cdf/lib/index.js","../base/dists/chisquare/cdf/lib/cdf.js","../base/dists/chisquare/cdf/lib/factory.js","../base/dists/chisquare/cdf/lib/index.js","../bartlett-test/lib/variance.js","../bartlett-test/lib/validate.js","../bartlett-test/lib/print.js","../bartlett-test/lib/main.js","../bartlett-test/lib/index.js","../base/dists/beta/quantile/lib/quantile.js","../base/dists/beta/quantile/lib/factory.js","../base/dists/beta/quantile/lib/index.js","../base/dists/binomial/cdf/lib/cdf.js","../base/dists/binomial/cdf/lib/factory.js","../base/dists/binomial/cdf/lib/index.js","../base/dists/binomial/pmf/lib/pmf.js","../base/dists/degenerate/pmf/lib/pmf.js","../base/dists/degenerate/pmf/lib/factory.js","../base/dists/degenerate/pmf/lib/index.js","../base/dists/binomial/pmf/lib/factory.js","../base/dists/binomial/pmf/lib/index.js","../binomial-test/lib/validate.js","../binomial-test/lib/print.js","../binomial-test/lib/main.js","../binomial-test/lib/index.js","../chi2gof/lib/defaults.js","../chi2gof/lib/validate.js","../base/dists/bernoulli/pmf/lib/pmf.js","../base/dists/bernoulli/pmf/lib/factory.js","../base/dists/bernoulli/pmf/lib/index.js","../base/dists/discrete-uniform/pmf/lib/pmf.js","../base/dists/discrete-uniform/pmf/lib/factory.js","../base/dists/discrete-uniform/pmf/lib/index.js","../base/dists/geometric/pmf/lib/pmf.js","../base/dists/geometric/pmf/lib/factory.js","../base/dists/geometric/pmf/lib/index.js","../base/dists/hypergeometric/pmf/lib/pmf.js","../base/dists/hypergeometric/pmf/lib/factory.js","../base/dists/hypergeometric/pmf/lib/index.js","../base/dists/negative-binomial/pmf/lib/ibeta_power_terms.js","../base/dists/negative-binomial/pmf/lib/ibeta_derivative.js","../base/dists/negative-binomial/pmf/lib/pmf.js","../base/dists/negative-binomial/pmf/lib/factory.js","../base/dists/negative-binomial/pmf/lib/index.js","../base/dists/poisson/pmf/lib/pmf.js","../base/dists/poisson/pmf/lib/factory.js","../base/dists/poisson/pmf/lib/index.js","../chi2gof/lib/get_pmf.js","../chi2gof/lib/pmf.js","../chi2gof/lib/statistic.js","../chi2gof/lib/tabulate.js","../chi2gof/lib/simulate.js","../chi2gof/lib/results.js","../chi2gof/lib/main.js","../chi2gof/lib/index.js","../incr/min/lib/main.js","../incr/min/lib/index.js","../chi2test/lib/print.js","../chi2test/lib/sum.js","../chi2test/lib/outer.js","../chi2test/lib/absdiff.js","../chi2test/lib/validate.js","../chi2test/lib/main.js","../chi2test/lib/index.js","../base/dists/normal/quantile/lib/quantile.js","../base/dists/degenerate/quantile/lib/quantile.js","../base/dists/degenerate/quantile/lib/factory.js","../base/dists/degenerate/quantile/lib/index.js","../base/dists/normal/quantile/lib/factory.js","../base/dists/normal/quantile/lib/index.js","../ranks/lib/sum.js","../ranks/lib/order.js","../ranks/lib/is_missing.js","../ranks/lib/validate.js","../ranks/lib/main.js","../ranks/lib/index.js","../fligner-test/lib/median.js","../fligner-test/lib/validate.js","../fligner-test/lib/print.js","../fligner-test/lib/main.js","../fligner-test/lib/index.js","../incr/pcorr/lib/main.js","../incr/pcorr/lib/index.js","../incr/apcorr/lib/main.js","../incr/apcorr/lib/index.js","../incr/count/lib/main.js","../incr/count/lib/index.js","../incr/covariance/lib/main.js","../incr/covariance/lib/index.js","../incr/covmat/lib/main.js","../incr/covmat/lib/index.js","../incr/cv/lib/main.js","../incr/cv/lib/index.js","../incr/ewmean/lib/main.js","../incr/ewmean/lib/index.js","../incr/ewstdev/lib/main.js","../incr/ewstdev/lib/index.js","../incr/ewvariance/lib/main.js","../incr/ewvariance/lib/index.js","../incr/gmean/lib/main.js","../incr/gmean/lib/index.js","../incr/minmax/lib/main.js","../incr/minmax/lib/index.js","../incr/meanstdev/lib/main.js","../incr/meanstdev/lib/index.js","../base/dists/t/quantile/lib/quantile.js","../base/dists/t/quantile/lib/factory.js","../base/dists/t/quantile/lib/index.js","../incr/grubbs/lib/validate.js","../incr/grubbs/lib/main.js","../incr/grubbs/lib/index.js","../incr/mean/lib/main.js","../incr/mean/lib/index.js","../incr/hmean/lib/main.js","../incr/hmean/lib/index.js","../incr/kurtosis/lib/main.js","../incr/kurtosis/lib/index.js","../incr/maape/lib/main.js","../incr/maape/lib/index.js","../incr/mae/lib/main.js","../incr/mae/lib/index.js","../incr/mpcorr/lib/main.js","../incr/mpcorr/lib/index.js","../incr/mapcorr/lib/main.js","../incr/mapcorr/lib/index.js","../incr/mape/lib/main.js","../incr/mape/lib/index.js","../incr/max/lib/main.js","../incr/max/lib/index.js","../incr/maxabs/lib/main.js","../incr/maxabs/lib/index.js","../incr/mcovariance/lib/main.js","../incr/mcovariance/lib/index.js","../incr/mcv/lib/main.js","../incr/mcv/lib/index.js","../incr/mda/lib/main.js","../incr/mda/lib/index.js","../incr/me/lib/main.js","../incr/me/lib/index.js","../incr/meanabs/lib/main.js","../incr/meanabs/lib/index.js","../incr/meanabs2/lib/main.js","../incr/meanabs2/lib/index.js","../incr/meanvar/lib/main.js","../incr/meanvar/lib/index.js","../incr/mgmean/lib/main.js","../incr/mgmean/lib/index.js","../incr/mgrubbs/lib/validate.js","../incr/mgrubbs/lib/minmax.js","../incr/mgrubbs/lib/meanstdev.js","../incr/mgrubbs/lib/main.js","../incr/mgrubbs/lib/index.js","../incr/mmean/lib/main.js","../incr/mmean/lib/index.js","../incr/mhmean/lib/main.js","../incr/mhmean/lib/index.js","../incr/midrange/lib/main.js","../incr/midrange/lib/index.js","../incr/minabs/lib/main.js","../incr/minabs/lib/index.js","../incr/minmaxabs/lib/main.js","../incr/minmaxabs/lib/index.js","../incr/mmaape/lib/main.js","../incr/mmaape/lib/index.js","../incr/mmae/lib/main.js","../incr/mmae/lib/index.js","../incr/mmape/lib/main.js","../incr/mmape/lib/index.js","../incr/mmax/lib/main.js","../incr/mmax/lib/index.js","../incr/mmaxabs/lib/main.js","../incr/mmaxabs/lib/index.js","../incr/mmda/lib/main.js","../incr/mmda/lib/index.js","../incr/mme/lib/main.js","../incr/mme/lib/index.js","../incr/mmeanabs/lib/main.js","../incr/mmeanabs/lib/index.js","../incr/mmeanabs2/lib/main.js","../incr/mmeanabs2/lib/index.js","../incr/mmeanstdev/lib/main.js","../incr/mmeanstdev/lib/index.js","../incr/mmeanvar/lib/main.js","../incr/mmeanvar/lib/index.js","../incr/mmidrange/lib/main.js","../incr/mmidrange/lib/index.js","../incr/mmin/lib/main.js","../incr/mmin/lib/index.js","../incr/mminabs/lib/main.js","../incr/mminabs/lib/index.js","../incr/mminmax/lib/main.js","../incr/mminmax/lib/index.js","../incr/mminmaxabs/lib/main.js","../incr/mminmaxabs/lib/index.js","../incr/mmpe/lib/main.js","../incr/mmpe/lib/index.js","../incr/mmse/lib/main.js","../incr/mmse/lib/index.js","../incr/mpcorr2/lib/main.js","../incr/mpcorr2/lib/index.js","../incr/mpcorrdist/lib/main.js","../incr/mpcorrdist/lib/index.js","../incr/mpe/lib/main.js","../incr/mpe/lib/index.js","../incr/mprod/lib/main.js","../incr/mprod/lib/index.js","../incr/mrange/lib/main.js","../incr/mrange/lib/index.js","../incr/mrmse/lib/main.js","../incr/mrmse/lib/index.js","../incr/msum/lib/main.js","../incr/msum/lib/index.js","../incr/mrss/lib/main.js","../incr/mrss/lib/index.js","../incr/mse/lib/main.js","../incr/mse/lib/index.js","../incr/mstdev/lib/main.js","../incr/mstdev/lib/index.js","../incr/msumabs/lib/main.js","../incr/msumabs/lib/index.js","../incr/msumabs2/lib/main.js","../incr/msumabs2/lib/index.js","../incr/mvariance/lib/main.js","../incr/mvariance/lib/index.js","../incr/msummary/lib/main.js","../incr/msummary/lib/index.js","../incr/msumprod/lib/main.js","../incr/msumprod/lib/index.js","../incr/mvmr/lib/main.js","../incr/mvmr/lib/index.js","../incr/nancount/lib/main.js","../incr/nancount/lib/index.js","../incr/sum/lib/main.js","../incr/sum/lib/index.js","../incr/nansum/lib/main.js","../incr/nansum/lib/index.js","../incr/sumabs/lib/main.js","../incr/sumabs/lib/index.js","../incr/nansumabs/lib/main.js","../incr/nansumabs/lib/index.js","../incr/sumabs2/lib/main.js","../incr/sumabs2/lib/index.js","../incr/nansumabs2/lib/main.js","../incr/nansumabs2/lib/index.js","../incr/pcorr2/lib/main.js","../incr/pcorr2/lib/index.js","../incr/pcorrdist/lib/main.js","../incr/pcorrdist/lib/index.js","../incr/pcorrdistmat/lib/main.js","../incr/pcorrdistmat/lib/index.js","../incr/pcorrmat/lib/main.js","../incr/pcorrmat/lib/index.js","../incr/prod/lib/main.js","../incr/prod/lib/index.js","../incr/range/lib/main.js","../incr/range/lib/index.js","../incr/rmse/lib/main.js","../incr/rmse/lib/index.js","../incr/rss/lib/main.js","../incr/rss/lib/index.js","../incr/skewness/lib/main.js","../incr/skewness/lib/index.js","../incr/variance/lib/main.js","../incr/variance/lib/index.js","../incr/summary/lib/main.js","../incr/summary/lib/index.js","../incr/sumprod/lib/main.js","../incr/sumprod/lib/index.js","../incr/vmr/lib/main.js","../incr/vmr/lib/index.js","../incr/wmean/lib/main.js","../incr/wmean/lib/index.js","../incr/lib/index.js","../iter/cugmean/lib/main.js","../iter/cugmean/lib/index.js","../iter/cuhmean/lib/main.js","../iter/cuhmean/lib/index.js","../iter/cumax/lib/main.js","../iter/cumax/lib/index.js","../iter/cumaxabs/lib/main.js","../iter/cumaxabs/lib/index.js","../iter/cumean/lib/main.js","../iter/cumean/lib/index.js","../iter/cumeanabs/lib/main.js","../iter/cumeanabs/lib/index.js","../iter/cumeanabs2/lib/main.js","../iter/cumeanabs2/lib/index.js","../iter/cumidrange/lib/main.js","../iter/cumidrange/lib/index.js","../iter/cumin/lib/main.js","../iter/cumin/lib/index.js","../iter/cuminabs/lib/main.js","../iter/cuminabs/lib/index.js","../iter/cuprod/lib/main.js","../iter/cuprod/lib/index.js","../iter/curange/lib/main.js","../iter/curange/lib/index.js","../iter/cusum/lib/main.js","../iter/cusum/lib/index.js","../iter/cusumabs/lib/main.js","../iter/cusumabs/lib/index.js","../iter/cusumabs2/lib/main.js","../iter/cusumabs2/lib/index.js","../iter/max/lib/main.js","../iter/max/lib/index.js","../iter/maxabs/lib/main.js","../iter/maxabs/lib/index.js","../iter/mean/lib/main.js","../iter/mean/lib/index.js","../iter/meanabs/lib/main.js","../iter/meanabs/lib/index.js","../iter/meanabs2/lib/main.js","../iter/meanabs2/lib/index.js","../iter/midrange/lib/main.js","../iter/midrange/lib/index.js","../iter/min/lib/main.js","../iter/min/lib/index.js","../iter/minabs/lib/main.js","../iter/minabs/lib/index.js","../iter/mmax/lib/main.js","../iter/mmax/lib/index.js","../iter/mmaxabs/lib/main.js","../iter/mmaxabs/lib/index.js","../iter/mmean/lib/main.js","../iter/mmean/lib/index.js","../iter/mmeanabs/lib/main.js","../iter/mmeanabs/lib/index.js","../iter/mmeanabs2/lib/main.js","../iter/mmeanabs2/lib/index.js","../iter/mmidrange/lib/main.js","../iter/mmidrange/lib/index.js","../iter/mmin/lib/main.js","../iter/mmin/lib/index.js","../iter/mminabs/lib/main.js","../iter/mminabs/lib/index.js","../iter/mprod/lib/main.js","../iter/mprod/lib/index.js","../iter/mrange/lib/main.js","../iter/mrange/lib/index.js","../iter/msum/lib/main.js","../iter/msum/lib/index.js","../iter/msumabs/lib/main.js","../iter/msumabs/lib/index.js","../iter/msumabs2/lib/main.js","../iter/msumabs2/lib/index.js","../iter/prod/lib/main.js","../iter/prod/lib/index.js","../iter/range/lib/main.js","../iter/range/lib/index.js","../iter/stdev/lib/main.js","../iter/stdev/lib/index.js","../iter/sum/lib/main.js","../iter/sum/lib/index.js","../iter/sumabs/lib/main.js","../iter/sumabs/lib/index.js","../iter/sumabs2/lib/main.js","../iter/sumabs2/lib/index.js","../iter/variance/lib/main.js","../iter/variance/lib/index.js","../iter/lib/index.js","../kde2d/lib/stdev.js","../kde2d/lib/iqr.js","../kde2d/lib/pick_bandwidth.js","../kde2d/lib/gaussian.js","../kde2d/lib/epanechnikov.js","../kde2d/lib/cosine.js","../kde2d/lib/quartic.js","../kde2d/lib/triangular.js","../kde2d/lib/tricube.js","../kde2d/lib/triweight.js","../kde2d/lib/uniform.js","../kde2d/lib/kernels.js","../kde2d/lib/get_kernel.js","../kde2d/lib/validate.js","../kde2d/lib/ndarray_like.js","../kde2d/lib/max.js","../kde2d/lib/kde2d.js","../kde2d/lib/min.js","../kde2d/lib/index.js","../kruskal-test/lib/validate.js","../kruskal-test/lib/print.js","../kruskal-test/lib/main.js","../kruskal-test/lib/index.js","../base/max/lib/max.js","../base/max/lib/ndarray.js","../base/max/lib/main.js","../base/max/lib/index.js","../kstest/lib/smirnov.js","../kstest/lib/marsaglia.js","../kstest/lib/ascending.js","../kstest/lib/subtract.js","../kstest/lib/validate.js","../base/dists/arcsine/cdf/lib/main.js","../base/dists/arcsine/cdf/lib/factory.js","../base/dists/arcsine/cdf/lib/index.js","../base/dists/beta/cdf/lib/cdf.js","../base/dists/beta/cdf/lib/factory.js","../base/dists/beta/cdf/lib/index.js","../base/dists/betaprime/cdf/lib/cdf.js","../base/dists/betaprime/cdf/lib/factory.js","../base/dists/betaprime/cdf/lib/index.js","../base/dists/cauchy/cdf/lib/cdf.js","../base/dists/cauchy/cdf/lib/factory.js","../base/dists/cauchy/cdf/lib/index.js","../base/dists/chi/cdf/lib/cdf.js","../base/dists/chi/cdf/lib/factory.js","../base/dists/chi/cdf/lib/index.js","../base/dists/cosine/cdf/lib/cdf.js","../base/dists/cosine/cdf/lib/factory.js","../base/dists/cosine/cdf/lib/index.js","../base/dists/erlang/cdf/lib/cdf.js","../base/dists/erlang/cdf/lib/factory.js","../base/dists/erlang/cdf/lib/index.js","../base/dists/exponential/cdf/lib/cdf.js","../base/dists/exponential/cdf/lib/factory.js","../base/dists/exponential/cdf/lib/index.js","../base/dists/frechet/cdf/lib/cdf.js","../base/dists/frechet/cdf/lib/factory.js","../base/dists/frechet/cdf/lib/index.js","../base/dists/gumbel/cdf/lib/cdf.js","../base/dists/gumbel/cdf/lib/factory.js","../base/dists/gumbel/cdf/lib/index.js","../base/dists/invgamma/cdf/lib/cdf.js","../base/dists/invgamma/cdf/lib/factory.js","../base/dists/invgamma/cdf/lib/index.js","../base/dists/kumaraswamy/cdf/lib/cdf.js","../base/dists/kumaraswamy/cdf/lib/factory.js","../base/dists/kumaraswamy/cdf/lib/index.js","../base/dists/laplace/cdf/lib/cdf.js","../base/dists/laplace/cdf/lib/factory.js","../base/dists/laplace/cdf/lib/index.js","../base/dists/levy/cdf/lib/cdf.js","../base/dists/levy/cdf/lib/factory.js","../base/dists/levy/cdf/lib/index.js","../base/dists/logistic/cdf/lib/cdf.js","../base/dists/logistic/cdf/lib/factory.js","../base/dists/logistic/cdf/lib/index.js","../base/dists/normal/cdf/lib/cdf.js","../base/dists/normal/cdf/lib/factory.js","../base/dists/normal/cdf/lib/index.js","../base/dists/lognormal/cdf/lib/cdf.js","../base/dists/lognormal/cdf/lib/factory.js","../base/dists/lognormal/cdf/lib/index.js","../base/dists/pareto-type1/cdf/lib/cdf.js","../base/dists/pareto-type1/cdf/lib/factory.js","../base/dists/pareto-type1/cdf/lib/index.js","../base/dists/rayleigh/cdf/lib/cdf.js","../base/dists/rayleigh/cdf/lib/factory.js","../base/dists/rayleigh/cdf/lib/index.js","../base/dists/t/cdf/lib/cdf.js","../base/dists/t/cdf/lib/factory.js","../base/dists/t/cdf/lib/index.js","../base/dists/triangular/cdf/lib/cdf.js","../base/dists/triangular/cdf/lib/factory.js","../base/dists/triangular/cdf/lib/index.js","../base/dists/uniform/cdf/lib/cdf.js","../base/dists/uniform/cdf/lib/factory.js","../base/dists/uniform/cdf/lib/index.js","../base/dists/weibull/cdf/lib/cdf.js","../base/dists/weibull/cdf/lib/factory.js","../base/dists/weibull/cdf/lib/index.js","../kstest/lib/cdf.js","../kstest/lib/get_cdf.js","../kstest/lib/print.js","../kstest/lib/main.js","../kstest/lib/index.js","../levene-test/lib/absdiff.js","../levene-test/lib/validate.js","../levene-test/lib/unique.js","../levene-test/lib/print.js","../levene-test/lib/main.js","../levene-test/lib/index.js","../base/range/lib/range.js","../base/range/lib/ndarray.js","../base/range/lib/main.js","../base/range/lib/index.js","../lowess/lib/lowest.js","../lowess/lib/lowess.js","../lowess/lib/validate.js","../lowess/lib/main.js","../lowess/lib/index.js","../padjust/lib/bonferroni.js","../padjust/lib/order.js","../padjust/lib/hommel.js","../base/cumax/lib/cumax.js","../base/cumax/lib/ndarray.js","../base/cumax/lib/main.js","../padjust/lib/holm.js","../base/cumin/lib/cumin.js","../base/cumin/lib/ndarray.js","../base/cumin/lib/main.js","../padjust/lib/bh.js","../padjust/lib/by.js","../padjust/lib/main.js","../padjust/lib/index.js","../pcorrtest/lib/print.js","../base/variancepn/lib/variancepn.js","../base/variancepn/lib/ndarray.js","../base/variancepn/lib/main.js","../base/variance/lib/variance.js","../base/variance/lib/ndarray.js","../base/variance/lib/main.js","../base/variance/lib/index.js","../base/meanpn/lib/meanpn.js","../base/meanpn/lib/ndarray.js","../base/meanpn/lib/main.js","../base/mean/lib/mean.js","../base/mean/lib/ndarray.js","../base/mean/lib/main.js","../base/mean/lib/index.js","../pcorrtest/lib/pcorr.js","../pcorrtest/lib/validate.js","../pcorrtest/lib/main.js","../pcorrtest/lib/index.js","../ttest/lib/validate.js","../ttest/lib/print.js","../ttest/lib/main.js","../ttest/lib/index.js","../ttest2/lib/validate.js","../ttest2/lib/print.js","../ttest2/lib/main.js","../ttest2/lib/index.js","../base/dists/f/quantile/lib/quantile.js","../base/dists/f/quantile/lib/factory.js","../base/dists/f/quantile/lib/index.js","../vartest/lib/validate.js","../vartest/lib/print.js","../vartest/lib/main.js","../base/dists/signrank/cdf/lib/weights.js","../vartest/lib/index.js","../base/dists/signrank/cdf/lib/cdf.js","../base/dists/signrank/cdf/lib/factory.js","../base/dists/signrank/cdf/lib/index.js","../wilcoxon/lib/validate.js","../wilcoxon/lib/unique.js","../wilcoxon/lib/print.js","../wilcoxon/lib/main.js","../wilcoxon/lib/index.js","../ztest/lib/validate.js","../ztest/lib/print.js","../ztest/lib/main.js","../ztest/lib/index.js","../ztest2/lib/validate.js","../ztest2/lib/print.js","../ztest2/lib/main.js","../ztest2/lib/index.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.608\n*\n* @example\n* var y = cdf( 2.0, 8.0, 4.0 );\n* // returns ~0.737\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, d1, d2 ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\tif ( d1 * x > d2 ) {\n\t\treturn betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2 /2.0, true, false );\n\t}\n\treturn betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.906\n*\n* y = cdf( 8.0 );\n* // returns ~0.884\n*/\nfunction factory( d1, d2 ) {\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an F distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tif ( d1 * x > d2 ) {\n\t\t\treturn betainc( (d1*x)/(d2+(d1*x)), d1/2.0, d2/2.0, true, false );\n\t\t}\n\t\treturn betainc( d2/(d2+(d1*x)), d2/2.0, d1/2.0, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for an F distribution.\n*\n* @module @stdlib/stats/base/dists/f/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/f/cdf' );\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.608\n*\n* y = cdf( 2.0, 8.0, 4.0 );\n* // returns ~0.737\n*\n* y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 10.0, 2.0 );\n*\n* y = mycdf( 10.0 );\n* // returns ~0.906\n*\n* y = mycdf( 8.0 );\n* // returns ~0.884\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.6\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` must be a number in [0,1]. Option: `%f`.', 'alpha' , alpha ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// VARIABLES //\n\nvar SORT_OPTS = {\n\t'numeric': true // Use numeric collation such that \"1\" < \"2\" < \"10\"...\n};\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {*} a - first value\n* @param {*} b - second value\n* @returns {number} negative number if `a` comes before `b, positive if `a` comes after `b`, and `0` if they are equivalent\n*/\nfunction ascending( a, b ) {\n\treturn String( a ).localeCompare( String( b ), void 0, SORT_OPTS );\n}\n\n\n// MAIN //\n\n/**\n* Returns the unique elements in an array.\n*\n* @private\n* @param {Array} arr - input array\n* @returns {Array} array of unique elements\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\t// Copy the array to avoid mutation:\n\tout = Array.prototype.slice.call( arr );\n\tlen = out.length;\n\n\t// Sort array in ascending order:\n\tout.sort( ascending );\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = out[ i ];\n\t\tif ( out[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tout[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tout.length = j+1;\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample standard deviation.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*\n* @example\n* var accumulator = incrstdev( 3.0 );\n*/\nfunction incrstdev( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn sqrt( M2/(N-1) );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x-mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn sqrt( M2/(N-1) );\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sqrt( M2/N );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn sqrt( M2/N );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a corrected sample standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/stdev\n*\n* @example\n* var incrstdev = require( '@stdlib/stats/incr/stdev' );\n*\n* var accumulator = incrstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator();\n* // returns ~4.95\n*/\n\n// MODULES //\n\nvar incrstdev = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrstdev = require( './../../incr/stdev' );\n\n\n// MAIN //\n\n/**\n* Computes the vector of means for each treatment.\n*\n* @private\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Array} treats - unique treatments\n* @returns {Object} summary statistics for the categories.\n*/\nfunction meanTable( x, factor, treats ) {\n\tvar tableOfMeans;\n\tvar factorCount;\n\tvar accumulator;\n\tvar newMean;\n\tvar j;\n\tvar i;\n\tvar k;\n\n\tfactorCount = treats.length;\n\ttableOfMeans = {};\n\tfor ( j = 0; j < factorCount; j++ ) {\n\t\taccumulator = incrstdev();\n\t\ttableOfMeans[ treats[j] ] = {\n\t\t\t'mean': 0,\n\t\t\t'sampleSize': 0,\n\t\t\t'SD': accumulator\n\t\t};\n\t\tfor ( i = 0; i < x.length; i++ ) {\n\t\t\tif ( factor[i] === treats[j] ) {\n\t\t\t\ttableOfMeans[ treats[j] ][ 'SD' ] = accumulator( x[i] );\n\t\t\t}\n\t\t}\n\t}\n\t// Go through, add to meanTable by indexing factor[i]\n\t// X[i] is the individual continuous\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\ttableOfMeans[factor[i]]['mean'] += x[i];\n\t\ttableOfMeans[factor[i]]['sampleSize'] += 1;\n\t}\n\n\t// Now make the mean by dividing by the sample size\n\t// Get the standard deviation through the helper function\n\tfor ( k = 0; k < factorCount; k++ ) {\n\t\tnewMean = tableOfMeans[treats[k]]['mean'] / tableOfMeans[treats[k]]['sampleSize'];\n\t\ttableOfMeans[treats[k]]['mean'] = newMean;\n\t}\n\treturn tableOfMeans;\n}\n\n\n// EXPORTS //\n\nmodule.exports = meanTable;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the arithmetic mean of a numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} arithmetic mean\n*/\nfunction mean( arr ) {\n\tvar delta;\n\tvar len;\n\tvar mu;\n\tvar i;\n\n\tmu = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tdelta = arr[ i ] - mu;\n\t\tmu += delta / (i+1);\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nmodule.exports = mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar repeat = require( '@stdlib/string/repeat' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns n spaces.\n*\n* @private\n* @param {integer} n - number of spaces\n* @returns {string} n spaces\n*/\nfunction spaces( n ) {\n\tif ( n <= 0 ) {\n\t\treturn '';\n\t}\n\treturn repeat( ' ', n );\n}\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print output of ANOVA.\n\t*\n\t* @private\n\t* @param {Object} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar statistic;\n\t\tvar decision;\n\t\tvar treatMS;\n\t\tvar treatDF;\n\t\tvar treatSS;\n\t\tvar extra1;\n\t\tvar extra2;\n\t\tvar extra3;\n\t\tvar errMS;\n\t\tvar errDF;\n\t\tvar errSS;\n\t\tvar ndgts;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tndgts = -dgts;\n\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\n\t\t// Hypothesis\n\t\tstr += 'Null Hypothesis: All Means Equal';\n\t\tstr += '\\n';\n\t\tstr += 'Alternate Hypothesis: At Least one Mean not Equal';\n\t\tstr += '\\n\\n';\n\n\t\ttreatSS = roundn( results.treatment.ss, ndgts ).toString();\n\t\terrSS = roundn( results.error.ss, ndgts ).toString();\n\t\ttreatMS = roundn( results.treatment.ms, ndgts ).toString();\n\t\terrMS = roundn( results.error.ms, ndgts ).toString();\n\t\ttreatDF = results.treatment.df.toString();\n\t\terrDF = results.error.df.toString();\n\t\tstatistic = roundn( results.statistic, ndgts ).toString();\n\n\t\textra1 = max( max( treatDF.length, errDF.length ), 2 );\n\t\textra2 = max( max( treatSS.length, errSS.length ), 2 );\n\t\textra3 = max( max( treatMS.length, errMS.length ), 3 );\n\n\t\t// Formatted table\n\t\tstr += '              ';\n\t\tstr += 'df';\n\t\tstr += spaces( 1 + extra1 );\n\t\tstr += 'SS';\n\t\tstr += spaces( 2 + extra2 );\n\t\tstr += 'MS';\n\t\tstr += spaces( 1 + extra3 );\n\t\tstr += 'F Score';\n\t\tstr += spaces( max( 7, statistic.length ) - 7 + 2 );\n\t\tstr += 'P Value';\n\t\tstr += '\\n';\n\n\t\t// Now start adding in values\n\t\tstr += 'Treatment';\n\t\tstr += spaces( 5 );\n\t\tstr += results.treatment.df;\n\t\tstr += spaces( 3 + extra1 - treatDF.length );\n\n\t\tstr += treatSS;\n\t\tstr += spaces( 4 + extra2 - treatSS.length );\n\t\tstr += treatMS;\n\t\tstr += spaces( 3 + extra3 - treatMS.length );\n\t\tstr += statistic;\n\t\tstr += spaces( max( 7, statistic.length ) - statistic.length + 2 );\n\t\tstr += roundn( results.pValue, ndgts );\n\t\tstr += '\\n';\n\n\t\t// Next line\n\t\tstr += 'Errors';\n\t\tstr += '        ';\n\t\tstr += results.error.df;\n\t\tstr += spaces( 3 + extra1 - errDF.length );\n\t\tstr += errSS;\n\t\tstr += spaces( 4 + extra2 - errSS.length );\n\t\tstr += errMS;\n\n\t\tif ( decision ) {\n\t\t\tstr += '\\n\\n';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' <= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to Reject Null: ';\n\t\t\t\tstr += roundn( results.pValue, ndgts );\n\t\t\t\tstr += ' >= ';\n\t\t\t\tstr += results.alpha;\n\t\t\t}\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = prettyPrint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isArray = require( '@stdlib/assert/is-array' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\nvar cdf = require( './../../base/dists/f/cdf' );\nvar copy = require( '@stdlib/utils/copy' );\nvar defaults = require( './defaults.json' );\nvar validate = require( './validate.js' );\nvar unique = require( './unique.js' );\nvar meanTable = require( './mean_table.js' );\nvar mean = require( './mean.js' );\nvar prettyPrint = require( './print.js' );\n\n\n// MAIN //\n\n/**\n* Perform a one-way analysis of variance (ANOVA).\n*\n* @param {NumericArray} x - measured values\n* @param {Array} factor - array of treatments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {TypeError} `x` must be a numeric array\n* @throws {TypeError} `factor` must be an array\n* @throws {RangeError} `factor` must have at least two unique elements\n* @throws {RangeError} length of `x` must be greater than or equal to two\n* @throws {RangeError} `x` and `factor` must have the same length\n* @returns {Object} test results\n*/\nfunction anova1( x, factor, options ) {\n\tvar meanSumSqTreat; // Mean sum of squares\n\tvar meanSumSqError;\n\tvar ssTreatment;\n\tvar sumSqTotal;\n\tvar sumSqError;\n\tvar treatment; // Index variable\n\tvar grandMean;\n\tvar nGroups;\n\tvar fScore;\n\tvar treats;\n\tvar means;\n\tvar numDf;\n\tvar denDf;\n\tvar nobs;\n\tvar pVal;\n\tvar opts;\n\tvar err;\n\tvar out;\n\tvar sq;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tnobs = x.length;\n\tif ( nobs <= 1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. First argument must have at least two elements. Value: `%s`.', x ) );\n\t}\n\tif ( !isArray( factor ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be an array. Value: `%s`.', treats ) );\n\t}\n\n\ttreats = unique( factor );\n\tnGroups = treats.length;\n\tif ( nGroups <= 1 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Second argument must contain at least two unique elements. Value: `%s`.', treats ) );\n\t}\n\tif ( nobs !== factor.length ) {\n\t\tthrow new RangeError( 'invalid arguments. Arguments `x` and `factor` must be arrays of the same length.' );\n\t}\n\n\tsumSqTotal = 0.0;\n\tssTreatment = 0.0;\n\tmeans = meanTable( x, factor, treats );\n\tgrandMean = mean( x );\n\n\t// Now get total ss:\n\tfor ( i = 0; i < nobs; i++ ) {\n\t\tsq = ( x[i] - grandMean ) * ( x[i] - grandMean );\n\t\tsumSqTotal += sq;\n\t}\n\n\tsq = 0.0;\n\tfor ( treatment in means ) {\n\t\tif ( hasOwnProp( means, treatment ) ) {\n\t\t\t// Already have sq defined\n\t\t\tsq = ( means[treatment].mean - grandMean ) *\n\t\t\t\t( means[treatment].mean - grandMean );\n\t\t\tssTreatment += means[treatment].sampleSize * sq;\n\t\t}\n\t}\n\tnumDf = nGroups - 1;\n\tdenDf = nobs - nGroups;\n\tsumSqError = sumSqTotal - ssTreatment;\n\tmeanSumSqTreat = ssTreatment / numDf;\n\tmeanSumSqError = sumSqError / denDf;\n\tfScore = meanSumSqTreat / meanSumSqError;\n\n\tpVal = 1.0 - cdf( fScore, numDf, denDf );\n\n\tout = {};\n\n\ttreatment = {};\n\tsetReadOnly( treatment, 'df', numDf );\n\tsetReadOnly( treatment, 'ss', ssTreatment );\n\tsetReadOnly( treatment, 'ms', meanSumSqTreat );\n\tsetReadOnly( out, 'treatment', treatment );\n\n\terr = {};\n\tsetReadOnly( err, 'df', denDf );\n\tsetReadOnly( err, 'ss', sumSqError );\n\tsetReadOnly( err, 'ms', meanSumSqError );\n\tsetReadOnly( out, 'error', err );\n\n\tsetReadOnly( out, 'statistic', fScore );\n\tsetReadOnly( out, 'pValue', pVal );\n\tsetReadOnly( out, 'means', means );\n\tsetReadOnly( out, 'method', 'One-Way ANOVA' );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'rejected', pVal <= opts.alpha );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = anova1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* One-way analysis of variance.\n*\n* @module @stdlib/stats/anova1\n*\n* @example\n* var anova1 = require( '@stdlib/stats/anova1' );\n* var x = [ 1, 3, 5, 2, 4, 6, 8, 7, 10, 11, 12, 15 ];\n* var f = [ 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC', 'control', 'treatA', 'treatB', 'treatC' ];\n*\n* var out = anova1( x, f );\n* /* returns\n*     {\n*         'treatment': {\n*             'df': 3,\n*             'ss': ~20.667,\n*             'ms': ~6.889\n*          }\n*         'error': {\n*             'df': 8,\n*             'ss': ~185.333,\n*             'ms': ~23.1667,\n*         },\n*         'statistic': ~0.297,\n*         'pValue': ~0.826,\n*         'means': { 'control': { 'mean': 5.0, 'sampleSize': 3, 'SD': ~4.583 },\n*            'treatA': { 'mean': ~6.667, 'sampleSize': 3, 'SD': ~4.041 },\n*            'treatB': { 'mean': ~8.333, 'sampleSize': 3, 'SD': ~3.512 },\n*            'treatC': { 'mean': 8.0, 'sampleSize': 3, 'SD': ~6.557 }\n*         },\n*         'method': 'One-Way ANOVA'\n*     }\n* *\\/\n*\n* var table = out.print();\n* /*\n* One-Way ANOVA\n*\n* Null Hypothesis: All Means Equal\n* Alternate Hypothesis: At Least one Mean not Equal\n*\n*               df   SS          MS        F Score  P Value\n* Treatment     3    20.6667     6.8889    0.2974   0.8265\n* Errors        8    185.3333    23.1667\n*\n* Fail to Reject Null: 0.8265 >= 0.05\n*\n* *\\/\n*/\n\n// MODULES //\n\nvar anova1 = require( './anova1.js' );\n\n\n// EXPORTS //\n\nmodule.exports = anova1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammainc = require( '@stdlib/math/base/special/gammainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( 2.0, 3.0, 1.0 );\n* // returns ~0.323\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn ( x < 0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn gammainc( x * beta, alpha );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a degenerate distribution with mean value `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of distribution\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 4.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn (x < mu) ? 0.0 : 1.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - constant value of distribution\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*\n* y = cdf( NaN );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated cumulative distribution function\n\t*\n\t* @example\n\t* var y = cdf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/degenerate/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/degenerate/cdf' );\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/degenerate/cdf' ).factory;\n*\n* var cdf = factory( 5.0 );\n*\n* var y = cdf( 3.0 );\n* // returns 0.0\n*\n* y = cdf( 6.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar degenerate = require( './../../../../../base/dists/degenerate/cdf' ).factory;\nvar gammainc = require( '@stdlib/math/base/special/gammainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a gamma distribution with shape parameter `alpha` and rate parameter `beta`.\n*\n* @param {NonNegativeNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.1 );\n* var y = cdf( 12.0 );\n* // returns ~0.879\n*\n* y = cdf( 8.0 );\n* // returns ~0.794\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha < 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( alpha === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn gammainc( x * beta, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gamma distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/gamma/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/gamma/cdf' );\n*\n* var y = cdf( 2.0, 8.0, 3.0 );\n* // returns ~0.256\n*\n* y = cdf( 0.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2.0, 0.5 );\n* y = mycdf( 6.0 );\n* // returns ~0.801\n*\n* y = mycdf( 2.0 );\n* // returns ~0.264\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaCDF = require( './../../../../../base/dists/gamma/cdf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.428\n*\n* @example\n* var y = cdf( 1.0, 0.5 );\n* // returns ~0.846\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k ) {\n\treturn gammaCDF( x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaFactory = require( './../../../../../base/dists/gamma/cdf' ).factory;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a chi-squared distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0 );\n*\n* var y = cdf( 6.0 );\n* // returns ~0.888\n*\n* y = cdf( 1.5 );\n* // returns ~0.318\n*/\nfunction factory( k ) {\n\treturn gammaFactory( k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-squared distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/chisquare/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/chisquare/cdf' );\n*\n* var y = cdf( 2.0, 8.0 );\n* // returns ~0.019\n*\n* y = cdf( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/chisquare/cdf' ).factory;\n*\n* var cdf = factory( 1.0 );\n*\n* var y = cdf( 2.0 );\n* // returns ~0.843\n*\n* y = cdf( 1.2 );\n* // returns ~0.727\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the unbiased variance of an array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} variance\n*/\nfunction variance( arr ) {\n\tvar delta;\n\tvar mean;\n\tvar len;\n\tvar M2;\n\tvar i;\n\tvar x;\n\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tlen = arr.length;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tx = arr[ i ];\n\t\tdelta = x - mean;\n\t\tmean += delta / (i+1);\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn M2 / ( i - 1 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert/is-array' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar format = require( '@stdlib/string/format' );\nvar chisqCDF = require( './../../base/dists/chisquare/cdf' );\nvar group = require( '@stdlib/utils/group' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar variance = require( './variance.js' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Bartlett’s test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlett( x, y, z );\n* // returns {...}\n*/\nfunction bartlett() {\n\tvar options;\n\tvar ngroups;\n\tvar ninvSum;\n\tvar levels;\n\tvar table;\n\tvar alpha;\n\tvar nSum;\n\tvar vSum;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar arg;\n\tvar err;\n\tvar lnv;\n\tvar out;\n\tvar df;\n\tvar n;\n\tvar v;\n\tvar i;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\ttable = group( arguments[ 0 ], opts.groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of groups. `%s` array must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t}\n\t}\n\tnSum = 0;\n\tninvSum = 0.0;\n\tvSum = 0.0;\n\tlnv = 0.0;\n\tn = new Array( ngroups );\n\tv = n.slice();\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\targ = args[ i ];\n\t\tif ( !isCollection( arg ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', arg ) );\n\t\t}\n\t\tif ( arg.length === 0 ) {\n\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t}\n\t\tn[ i ] = arg.length - 1;\n\t\tnSum += n[ i ];\n\t\tninvSum += 1.0 / n[ i ];\n\t\tv[ i ] = variance( arg );\n\t\tvSum += ( n[ i ] * v[ i ] );\n\t\tlnv += n[ i ] * ln( v[ i ] );\n\t}\n\tvSum /= nSum;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\n\tstat = ( ( nSum * ln( vSum ) ) - lnv );\n\tstat /= ( 1.0 + ( ( ninvSum - ( 1.0 / nSum ) ) / ( 3 * ( ngroups-1 ) ) ) );\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Bartlett\\'s test of equal variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bartlett;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute Bartlett’s test for equal variances.\n*\n* @module @stdlib/stats/bartlett-test\n*\n* @example\n* var bartlettTest = require( '@stdlib/stats/bartlett-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = bartlettTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar bartlettTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = bartlettTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar betaincinv = require( '@stdlib/math/base/special/betaincinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~0.894\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~0.686\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, alpha, beta ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn betaincinv( p, alpha, beta );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar betaincinv = require( '@stdlib/math/base/special/betaincinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 2.5, 0.5 );\n* var y = quantile( 0.5 );\n* // returns ~0.904\n*\n* y = quantile( 0.8 );\n* // returns ~0.986\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a beta distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif (\n\t\t\tisnan( p ) ||\n\t\t\tp < 0.0 ||\n\t\t\tp > 1.0\n\t\t) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn betaincinv( p, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a beta distribution.\n*\n* @module @stdlib/stats/base/dists/beta/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/beta/quantile' );\n*\n* var y = quantile( 0.8, 2.0, 1.0 );\n* // returns ~0.894\n*\n* y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~0.686\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/beta/quantile' ).factory;\n*\n* var quantile = factory( 2.0, 2.0 );\n*\n* var y = quantile( 0.8 );\n* // returns ~0.713\n*\n* y = quantile( 0.4 );\n* // returns ~0.5\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quantile = require( './quantile.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 3.0, 20, 0.2 );\n* // returns ~0.411\n*\n* @example\n* var y = cdf( 21.0, 20, 0.2 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 5.0, 10, 0.4 );\n* // returns ~0.834\n*\n* @example\n* var y = cdf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, n, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= n ) {\n\t\treturn 1.0;\n\t}\n\tx = floor( x + 1.0e-7 );\n\treturn betainc( p, x + 1.0, n - x, true, true );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10, 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.172\n*\n* y = cdf( 1.0 );\n* // returns ~0.011\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= n ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\t// Ensure left-continuity:\n\t\tx = floor( x + 1.0e-7 );\n\t\treturn betainc( p, x + 1.0, n - x, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/binomial/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/binomial/cdf' );\n*\n* var y = cdf( 3.0, 20, 0.2 );\n* // returns ~0.411\n*\n* y = cdf( 21.0, 20, 0.2 );\n* // returns 1.0\n*\n* y = cdf( 5.0, 10, 0.4 );\n* // returns ~0.834\n*\n* y = cdf( 0.0, 10, 0.4 );\n* // returns ~0.06\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/binomial/cdf' ).factory;\n*\n* var cdf = factory( 10, 0.5 );\n*\n* var y = cdf( 3.0 );\n* // returns ~0.172\n*\n* y = cdf( 1.0 );\n* // returns ~0.011\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar log1p = require( '@stdlib/math/base/special/log1p' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* @example\n* var y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* @example\n* var y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.006\n*\n* @example\n* var y = pmf( NaN, 20, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 1.5, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, n, p ) {\n\tvar lnl;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0 ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tif ( x > n ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( p === 0.0 ) {\n\t\t\treturn ( x === 0 ) ? 1.0 : 0.0;\n\t\t}\n\t\tif ( p === 1.0 ) {\n\t\t\treturn ( x === n ) ? 1.0 : 0.0;\n\t\t}\n\t\tlnl = binomcoefln( n, x );\n\t\tlnl += (x * ln( p )) + (( n - x ) * log1p( -p ));\n\t\treturn exp( lnl );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a degenerate distribution centered at `mu`.\n*\n* @param {number} x - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated probability mass function\n*\n* @example\n* var y = pmf( 2.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 3.0, 3.0 );\n* // returns 1.0\n*\n* @example\n* var y = pmf( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*/\nfunction pmf( x, mu ) {\n\tif ( isnan( x ) || isnan( mu ) ) {\n\t\treturn NaN;\n\t}\n\treturn ( x === mu ) ? 1.0 : 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the probability mass function\n*\n* @example\n* var pmf = factory( 5.0 );\n*\n* var y = pmf( 0.0 );\n* // returns 0.0\n*\n* y = pmf( 5.0 );\n* // returns 1.0\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 10.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( x === mu ) ? 1.0 : 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution probability mass function (PDF).\n*\n* @module @stdlib/stats/base/dists/degenerate/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/degenerate/pmf' );\n*\n* var y = pmf( 2.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/degenerate/pmf' ).factory;\n*\n* var pmf = factory( 10.0 );\n*\n* var y = pmf( 10.0 );\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );\nvar degenerate = require( './../../../../../base/dists/degenerate/pmf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar log1p = require( '@stdlib/math/base/special/log1p' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a binomial distribution with number of trials `n` and success probability `p`.\n*\n* @param {NonNegativeInteger} n - number of trials\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\nfunction factory( n, p ) {\n\tif (\n\t\tisnan( n ) ||\n\t\tisnan( p ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tn === PINF ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( p === 0.0 || n === 0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tif ( p === 1.0 ) {\n\t\treturn degenerate( n );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tif ( x > n ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tlnl = binomcoefln( n, x );\n\t\t\tlnl += (x * ln( p )) + ((n - x) * log1p( -p ));\n\t\t\treturn exp( lnl );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Binomial distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/binomial/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/binomial/pmf' );\n*\n* var y = pmf( 3.0, 20, 0.2 );\n* // returns ~0.205\n*\n* y = pmf( 21.0, 20, 0.2 );\n* // returns 0.0\n*\n* y = pmf( 5.0, 10, 0.4 );\n* // returns ~0.201\n*\n* y = pmf( 0.0, 10, 0.4 );\n* // returns ~0.06\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/binomial/pmf' ).factory;\n*\n* var pmf = factory( 10, 0.5 );\n*\n* var y = pmf( 3.0 );\n* // returns ~0.117\n*\n* y = pmf( 5.0 );\n* // returns ~0.246\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.p] - probability under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'p' ) ) {\n\t\topts.p = options.p;\n\t\tif ( !isNumber( opts.p ) || isnan( opts.p ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'p', opts.p ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar isNumberArray = require( '@stdlib/assert/is-number-array' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' );\nvar betaQuantile = require( './../../base/dists/beta/quantile' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar ceil = require( '@stdlib/math/base/special/ceil' );\nvar binomialCDF = require( './../../base/dists/binomial/cdf' );\nvar binomialPMF = require( './../../base/dists/binomial/pmf' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar RELATIVE_ERROR = 1+1e-07;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the lower endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} lower endpoint\n*/\nfunction lower( x, n, alpha ) {\n\treturn ( x === 0 ) ? 0 : betaQuantile( alpha, x, n - x + 1 );\n}\n\n/**\n* Calculates the upper endpoint of a confidence interval.\n*\n* @private\n* @param {NonNegativeInteger} x - number of successes\n* @param {NonNegativeInteger} n - total number of observations\n* @param {number} alpha - significance level\n* @returns {number} upper endpoint\n*/\nfunction upper( x, n, alpha ) {\n\treturn ( x === n ) ? 1 : betaQuantile( 1 - alpha, x + 1, n - x );\n}\n\n\n// MAIN //\n\n/**\n* Computes an exact test for the success probability in a Bernoulli experiment.\n*\n* @param {(NonNegativeInteger|Array)} x - number of successes or two-element array with successes and failures\n* @param {NonNegativeInteger} [n] - total number of observations\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {Probability} [options.p=0.5] - success probability under H0\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @returns {Object} test results\n*/\nfunction binomialTest() {\n\tvar alpha;\n\tvar opts;\n\tvar cint;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar d;\n\tvar m;\n\tvar n;\n\tvar p;\n\tvar x;\n\tvar y;\n\tvar i;\n\n\topts = {};\n\tif ( isNumberArray( arguments[ 0 ] ) ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== 2 ) {\n\t\t\tthrow new Error( format( 'invalid argument. If provided an array, it must have two elements. Value: `%s`.', x ) );\n\t\t}\n\t\tn = x[ 1 ] + x[ 0 ];\n\t\tx = x[ 0 ];\n\t\tif ( arguments[ 1 ] ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t}\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\tn = arguments[ 1 ];\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer or a two-element array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isNonNegativeInteger( n ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative integer. Value: `%s`.', n ) );\n\t\t}\n\t\tif ( x > n ) {\n\t\t\tthrow new TypeError( format( 'invalid arguments. `x` cannot be larger than `n`. `x: %u, n: %u`.' ) );\n\t\t}\n\t\tif ( arguments[ 2 ] ) {\n\t\t\terr = validate( opts, arguments[ 2 ] );\n\t\t}\n\t}\n\tif ( err ) {\n\t\tthrow err;\n\t}\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tif ( opts.p === void 0 ) {\n\t\tp = 0.5;\n\t} else {\n\t\tp = opts.p;\n\t}\n\tif ( p < 0.0 || p > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `%s` must be a probability. Value: `%f`.', 'p', p ) );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tstat = x / n;\n\tswitch ( alt ) {\n\tcase 'less':\n\t\tpval = binomialCDF( x, n, p );\n\t\tcint = [ 0.0, upper( x, n, alpha ) ];\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - binomialCDF( x - 1, n, p );\n\t\tcint = [ lower( x, n, alpha ), 1.0 ];\n\t\tbreak;\n\tcase 'two-sided':\n\t\td = binomialPMF( x, n, p );\n\t\tm = n * p;\n\t\tif ( x === m ) {\n\t\t\tpval = 1;\n\t\t} else if ( x < m ) {\n\t\t\ty = 0;\n\t\t\tfor ( i = ceil( m ); i <= n; i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF(x, n, p) + ( 1 - binomialCDF(n - y, n, p ) );\n\t\t} else {\n\t\t\ty = 0;\n\t\t\tfor ( i = 0; i <= floor( m ); i++ ) {\n\t\t\t\tif ( binomialPMF( i, n, p ) <= d * RELATIVE_ERROR ) {\n\t\t\t\t\ty += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t\tpval = binomialCDF( y-1, n, p ) + ( 1 - binomialCDF( x-1, n, p ) );\n\t\t}\n\t\tcint = [ lower( x, n, alpha/2.0 ), upper( x, n, alpha/2.0 ) ];\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'nullValue', p );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Exact binomial test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = binomialTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exact test for the success probability in a Bernoulli experiment.\n*\n* @module @stdlib/stats/binomial-test\n*\n* @example\n* var binomialTest = require( '@stdlib/stats/binomial-test' );\n*\n* var out = binomialTest( 682, 925 );\n* // returns {...}\n*\n* out = binomialTest( 682, 925, {\n*     'p': 0.75,\n*     'alpha': 0.05\n* });\n* // returns {...}\n*/\n\n// MODULES //\n\nvar binomialTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = binomialTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar DEFAULTS = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns default options.\n*\n* @private\n* @returns {Object} default options\n*/\nfunction defaults() {\n\treturn {\n\t\t'alpha': DEFAULTS.alpha,\n\t\t'ddof': DEFAULTS.ddof,\n\t\t'simulate': DEFAULTS.simulate,\n\t\t'iterations': DEFAULTS.iterations\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = defaults;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {NonNegativeInteger} [options.ddof] - degrees of freedom adjustment\n* @param {boolean} [options.simulate] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations] - number of Monte Carlo iterations\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'simulate': false,\n*     'ddof': 2\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval `[0,1]`. Value: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ddof' ) ) {\n\t\topts.ddof = options.ddof;\n\t\tif ( !isNonNegativeInteger( opts.ddof ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'ddof', opts.ddof ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'iterations' ) ) {\n\t\topts.iterations = options.iterations;\n\t\tif ( !isPositiveInteger( opts.iterations ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'iterations', opts.iterations ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'simulate' ) ) {\n\t\topts.simulate = options.simulate;\n\t\tif ( !isBoolean( opts.simulate ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'simulate', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Bernoulli distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 0.3 );\n* // returns 0.3\n*\n* @example\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* @example\n* var y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.8, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = pmf( 1.0, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 1.0 - p;\n\t}\n\tif ( x === 1.0 ) {\n\t\treturn p;\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Bernoulli distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.8 );\n* var y = pmf( 0.0 );\n* // returns 0.2\n*\n* y = pmf( 1.0 );\n* // returns 0.8\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a Bernoulli distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn 1.0 - p;\n\t\t}\n\t\tif ( x === 1.0 ) {\n\t\t\treturn p;\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Bernoulli distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/bernoulli/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/bernoulli/pmf' );\n*\n* var y = pmf( 0.0, 0.3 );\n* // returns 0.7\n*\n* y = pmf( 1.0, 0.7 );\n* // returns 0.7\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 2.0 );\n* // returns 0.0\n*\n* y = mypmf( 1.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isInteger = require( '@stdlib/math/base/assert/is-integer' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {number} evaluated PMF\n*\n* @example\n* var y = pmf( 2.0, 0, 4 );\n* // returns ~0.2\n*\n* @example\n* var y = pmf( 5.0, 0, 4 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 2, 0, 8 );\n* // returns ~0.111\n*\n* @example\n* var y = pmf( NaN, 0, 1 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 1 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 3, 1 );\n* // returns NaN\n*/\nfunction pmf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 / ( b - a + 1.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isInteger = require( '@stdlib/math/base/assert/is-integer' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a discrete uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {integer} a - minimum support\n* @param {integer} b - maximum support\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0, 10 );\n* var y = pmf( 2.0 );\n* // returns ~0.091\n*\n* y = pmf( 12.0 );\n* // returns 0.0\n*/\nfunction factory( a, b ) {\n\tvar ninv;\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\t!isInteger( a ) ||\n\t\t!isInteger( b ) ||\n\t\ta > b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tninv = 1.0 / ( b - a + 1.0 );\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a discrete uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {number} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a || x > b || !isInteger( x ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ninv;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Discrete uniform distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/discrete-uniform/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/discrete-uniform/pmf' );\n*\n* var y = pmf( 3.0, 2, 6 );\n* // returns ~0.2\n*\n* var myPMF = pmf.factory( 6, 7 );\n* y = myPMF( 7.0 );\n* // returns 0.5\n*\n* y = myPMF( 5.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a geometric distribution with success probability `p` at a value `x`.\n*\n* @param {number} x - input value\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 4.0, 0.3 );\n* // returns ~0.072\n*\n* @example\n* var y = pmf( 2.0, 0.7 );\n* // returns ~0.063\n*\n* @example\n* var y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid success probability:\n* var y = pmf( 2.0, 1.5 );\n* // returns NaN\n*/\nfunction pmf( x, p ) {\n\tvar q;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( isNonNegativeInteger( x ) ) {\n\t\tq = 1.0 - p;\n\t\treturn p * pow( q, x );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a geometric distribution with success probability `p`.\n*\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 0.5 );\n* var y = pmf( 3.0 );\n* // returns 0.0625\n*\n* y = pmf( 1.0 );\n* // returns 0.25\n*/\nfunction factory( p ) {\n\tif (\n\t\tisnan( p ) ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a geometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar q;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) ) {\n\t\t\tq = 1.0 - p;\n\t\t\treturn p * pow( q, x );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Geometric distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/geometric/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/geometric/pmf' );\n*\n* var y = pmf( 4.0, 0.3 );\n* // returns ~0.072\n*\n* y = pmf( 2.0, 0.7 );\n* // returns ~0.063\n*\n* y = pmf( -1.0, 0.5 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 0.5 );\n* y = mypmf( 3.0 );\n* // returns 0.0625\n*\n* y = mypmf( 1.0 );\n* // returns 0.25\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar fln = require( '@stdlib/math/base/special/factorialln' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 1.0, 8, 4, 2 );\n* // returns ~0.571\n*\n* @example\n* var y = pmf( 2.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = pmf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* @example\n* var y = pmf( 1.5, 8, 4, 2 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( NaN, 10, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 10, NaN, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 10, 5, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10.5, 5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 5, 1.5, 2 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10, 5, -2.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 10, 5, 12 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 8, 3, 9 );\n* // returns NaN\n*/\nfunction pmf( x, N, K, n ) {\n\tvar ldenom;\n\tvar lnum;\n\tvar lpmf;\n\tvar maxs;\n\tvar mins;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn NaN;\n\t}\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\tif (\n\t\tisNonNegativeInteger( x ) &&\n\t\tmins <= x &&\n\t\tx <= maxs\n\t) {\n\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\tlpmf = lnum - ldenom;\n\t\treturn exp( lpmf );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar fln = require( '@stdlib/math/base/special/factorialln' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a hypergeometric distribution with population size `N`, subpopulation size `K`, and number of draws `n`.\n*\n* @param {NonNegativeInteger} N - population size\n* @param {NonNegativeInteger} K - subpopulation size\n* @param {NonNegativeInteger} n - number of draws\n* @returns {Function} PMF\n*\n* @example\n* var mypmf = factory( 30, 20, 5 );\n* var y = mypmf( 4.0 );\n* // returns ~0.34\n*\n* y = mypmf( 1.0 );\n* // returns ~0.029\n*/\nfunction factory( N, K, n ) {\n\tvar maxs;\n\tvar mins;\n\tif (\n\t\tisnan( N ) ||\n\t\tisnan( K ) ||\n\t\tisnan( n ) ||\n\t\t!isNonNegativeInteger( N ) ||\n\t\t!isNonNegativeInteger( K ) ||\n\t\t!isNonNegativeInteger( n ) ||\n\t\tN === PINF ||\n\t\tK === PINF ||\n\t\tK > N ||\n\t\tn > N\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tmins = max( 0, n + K - N );\n\tmaxs = min( K, n );\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a hypergeometric distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*/\n\tfunction pmf( x ) {\n\t\tvar ldenom;\n\t\tvar lnum;\n\t\tvar lpmf;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif (\n\t\t\tisNonNegativeInteger( x ) &&\n\t\t\tmins <= x &&\n\t\t\tx <= maxs\n\t\t) {\n\t\t\tlnum = fln( n ) + fln( K ) + fln( N - n ) + fln( N - K );\n\t\t\tldenom = fln( N ) + fln( x ) + fln( n - x );\n\t\t\tldenom += fln( K - x ) + fln( N - K + x - n );\n\t\t\tlpmf = lnum - ldenom;\n\t\t\treturn exp( lpmf );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Hypergeometric distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/hypergeometric/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/hypergeometric/pmf' );\n*\n* var y = pmf( 1.0, 8, 4, 2 );\n* // returns ~0.571\n*\n* y = pmf( 2.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* y = pmf( 0.0, 8, 4, 2 );\n* // returns ~0.214\n*\n* y = pmf( 1.5, 8, 4, 2 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 30, 20, 5 );\n* y = mypmf( 4.0 );\n* // returns ~0.34\n*\n* y = mypmf( 1.0 );\n* // returns ~0.029\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*\n*\n* ## Notice\n*\n* The original C++ code and copyright notice are from the [Boost library]{@link http://www.boost.org/doc/libs/1_62_0/boost/math/special_functions/beta.hpp}. The implementation has been modified for JavaScript.\n*\n* ```text\n* (C) Copyright John Maddock 2006.\n*\n* Use, modification and distribution are subject to the\n* Boost Software License, Version 1.0. (See accompanying file\n* LICENSE or copy at http://www.boost.org/LICENSE_1_0.txt)\n* ```\n*/\n\n'use strict';\n\n// MODULES //\n\nvar lanczosSumExpGScaled = require( '@stdlib/math/base/special/gamma-lanczos-sum-expg-scaled' );\nvar expm1 = require( '@stdlib/math/base/special/expm1' );\nvar log1p = require( '@stdlib/math/base/special/log1p' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar MAX_LN = require( '@stdlib/constants/float64/max-ln' );\nvar MIN_LN = require( '@stdlib/constants/float64/min-ln' );\nvar G = require( '@stdlib/constants/float64/gamma-lanczos-g' );\nvar E = require( '@stdlib/constants/float64/e' );\n\n\n// MAIN //\n\n/**\n* Computes the leading power terms in the incomplete beta function.\n*\n* When normalized,\n*\n* ```tex\n* \\frac{ x^a y^b }{ \\operatorname{Beta}(a,b) }\n* ```\n*\n* and otherwise\n*\n* ```tex\n* x^a y^b\n* ```\n*\n* ## Notes\n*\n* -   Almost all of the error in the incomplete beta comes from this function, particularly when \\\\( a \\\\) and \\\\( b \\\\) are large. Computing large powers are _hard_ though, and using logarithms just leads to horrendous cancellation errors.\n*\n* -   For \\\\( l1 * l2 > 0 \\\\) or \\\\( \\operatorname{min}( a, b ) < 1 \\\\), the two power terms both go in the same direction (towards zero or towards infinity). In this case if either term overflows or underflows, then the product of the two must do so also. Alternatively, if one exponent is less than one, then we can't productively use it to eliminate overflow or underflow from the other term.  Problems with spurious overflow/underflow can't be ruled out in this case, but it is _very_ unlikely since one of the power terms will evaluate to a number close to 1.\n*\n* -   If \\\\( \\max( \\abs(l1), \\abs(l2) ) < 0.5 \\\\), both exponents are near one and both the exponents are greater than one, and, further, these two power terms tend in opposite directions (one toward zero, the other toward infinity), so we have to combine the terms to avoid any risk of overflow or underflow. We do this by moving one power term inside the other, we have:\n*\n*     ```tex\n*     (1 + l_1)^a \\cdot (1 + l_2)^b \\\\\n*     = ((1 + l_1) \\cdot (1 + l_2)^(b/a))^a \\\\\n*     = (1 + l_1 + l_3 + l_1*l_3)^a\n*     ```\n*\n*     and\n*\n*     ```tex\n*     l_3 = (1 + l_2)^(b/a) - 1 \\\\\n*     = \\exp((b/a) * \\ln(1 + l_2)) - 1\n*     ```\n*\n*     The tricky bit is deciding which term to move inside. By preference we move the larger term inside, so that the size of the largest exponent is reduced.  However, that can only be done as long as l3 (see above) is also small.\n*\n* @private\n* @param {NonNegativeNumber} a - function parameter\n* @param {NonNegativeNumber} b - function parameter\n* @param {Probability} x - function parameter\n* @param {Probability} y - probability equal to `1-x`\n* @param {boolean} normalized - boolean indicating whether to evaluate the power terms of the regularized or non-regularized incomplete beta function\n* @returns {number} power terms\n*/\nfunction ibetaPowerTerms( a, b, x, y, normalized ) {\n\tvar result;\n\tvar smallA;\n\tvar ratio;\n\tvar agh;\n\tvar bgh;\n\tvar cgh;\n\tvar l1;\n\tvar l2;\n\tvar l3;\n\tvar p1;\n\tvar b1;\n\tvar b2;\n\tvar c;\n\tvar l;\n\n\tif ( !normalized ) {\n\t\t// Can we do better here?\n\t\treturn pow( x, a ) * pow( y, b );\n\t}\n\tc = a + b;\n\n\t// Combine power terms with Lanczos approximation:\n\tagh = a + G - 0.5;\n\tbgh = b + G - 0.5;\n\tcgh = c + G - 0.5;\n\tresult = lanczosSumExpGScaled( c );\n\tresult /= lanczosSumExpGScaled( a ) * lanczosSumExpGScaled( b );\n\n\t// Combine with the leftover terms from the Lanczos approximation:\n\tresult *= sqrt( bgh / E );\n\tresult *= sqrt( agh / cgh );\n\n\t// `l1` and `l2` are the base of the exponents minus one:\n\tl1 = ( ( x * b ) - ( y * agh ) ) / agh;\n\tl2 = ( ( y * a ) - ( x * bgh ) ) / bgh;\n\tif ( min( abs(l1), abs(l2) ) < 0.2 ) {\n\t\t// When the base of the exponent is very near 1 we get really gross errors unless extra care is taken:\n\t\tif ( l1 * l2 > 0 || min( a, b ) < 1 ) {\n\t\t\tif ( abs(l1) < 0.1 ) {\n\t\t\t\tresult *= exp( a * log1p( l1 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow( ( x*cgh ) / agh, a );\n\t\t\t}\n\t\t\tif ( abs(l2) < 0.1 ) {\n\t\t\t\tresult *= exp( b * log1p( l2 ) );\n\t\t\t} else {\n\t\t\t\tresult *= pow((y * cgh) / bgh, b);\n\t\t\t}\n\t\t}\n\t\telse if ( max( abs(l1), abs(l2) ) < 0.5 ) {\n\t\t\tsmallA = a < b;\n\t\t\tratio = b / a;\n\t\t\tif (\n\t\t\t\t(smallA && (ratio * l2 < 0.1)) ||\n\t\t\t\t(!smallA && (l1 / ratio > 0.1))\n\t\t\t) {\n\t\t\t\tl3 = expm1( ratio * log1p( l2 ) );\n\t\t\t\tl3 = l1 + l3 + ( l3 * l1 );\n\t\t\t\tl3 = a * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t\telse {\n\t\t\t\tl3 = expm1( log1p( l1 ) / ratio );\n\t\t\t\tl3 = l2 + l3 + ( l3 * l2 );\n\t\t\t\tl3 = b * log1p( l3 );\n\t\t\t\tresult *= exp( l3 );\n\t\t\t}\n\t\t}\n\t\telse if ( abs(l1) < abs(l2) ) {\n\t\t\t// First base near 1 only:\n\t\t\tl = ( a * log1p( l1 ) ) + ( b * ln( ( y*cgh ) / bgh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Second base near 1 only:\n\t\t\tl = ( b * log1p( l2 ) ) + ( a * ln( (x*cgh) / agh ) );\n\t\t\tif ( l <= MIN_LN || l >= MAX_LN ) {\n\t\t\t\tl += ln(result);\n\t\t\t\tif ( l >= MAX_LN ) {\n\t\t\t\t\treturn NaN;\n\t\t\t\t}\n\t\t\t\tresult = exp( l );\n\t\t\t} else {\n\t\t\t\tresult *= exp( l );\n\t\t\t}\n\t\t}\n\t}\n\telse {\n\t\t// General case:\n\t\tb1 = (x * cgh) / agh;\n\t\tb2 = (y * cgh) / bgh;\n\t\tl1 = a * ln(b1);\n\t\tl2 = b * ln(b2);\n\t\tif (\n\t\t\tl1 >= MAX_LN ||\n\t\t\tl1 <= MIN_LN ||\n\t\t\tl2 >= MAX_LN ||\n\t\t\tl2 <= MIN_LN\n\t\t) {\n\t\t\t// Oops, under/overflow, sidestep if we can:\n\t\t\tif ( a < b ) {\n\t\t\t\tp1 = pow( b2, b / a );\n\t\t\t\tl3 = a * ( ln(b1) + ln(p1) );\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b1, a );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln(result);\n\t\t\t\t\tif ( l2 >= MAX_LN ) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tp1 = pow( b1, a / b );\n\t\t\t\tl3 = ( ln(p1) + ln(b2) ) * b;\n\t\t\t\tif ( l3 < MAX_LN && l3 > MIN_LN ) {\n\t\t\t\t\tresult *= pow( p1 * b2, b );\n\t\t\t\t} else {\n\t\t\t\t\tl2 += l1 + ln( result );\n\t\t\t\t\tif (l2 >= MAX_LN) {\n\t\t\t\t\t\treturn NaN;\n\t\t\t\t\t}\n\t\t\t\t\tresult = exp( l2 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse {\n\t\t\t// Finally the normal case:\n\t\t\tresult *= pow( b1, a ) * pow( b2, b );\n\t\t}\n\t}\n\treturn result;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaPowerTerms;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ibetaPowerTerms = require( './ibeta_power_terms.js' );\n\n\n// MAIN //\n\n/**\n* Computes the partial derivative with respect to x of the incomplete beta function.\n*\n* @private\n* @param {Probability} x - input value (0 < x <= 1)\n* @param {PositiveNumber} a - first parameter\n* @param {PositiveNumber} b - second parameter (must be greater than 1)\n* @returns {number} value of the partial derivative\n*/\nfunction ibetaDerivative( x, a, b ) {\n\tvar f1;\n\tvar y;\n\tif ( x === 1.0 ) {\n\t\treturn 0.0;\n\t}\n\t// Regular cases:\n\tf1 = ibetaPowerTerms( a, b, x, 1.0 - x, true );\n\ty = ( 1.0 - x ) * x;\n\tf1 /= y;\n\treturn f1;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ibetaDerivative;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar ibetaDerivative = require( './ibeta_derivative.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 5.0, 20.0, 0.8 );\n* // returns ~0.157\n*\n* @example\n* var y = pmf( 21.0, 20.0, 0.5 );\n* // returns ~0.06\n*\n* @example\n* var y = pmf( 5.0, 10.0, 0.4 );\n* // returns ~0.016\n*\n* @example\n* var y = pmf( 0.0, 10.0, 0.9 );\n* // returns ~0.349\n*\n* @example\n* var y = pmf( 21.0, 15.5, 0.5 );\n* // returns ~0.037\n*\n* @example\n* var y = pmf( 5.0, 7.4, 0.4 );\n* // returns ~0.051\n*\n* @example\n* var y = pmf( 2.0, 0.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, -2.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 2.0, 20, 1.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 20.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = pmf( 0.0, 20.0, NaN );\n* // returns NaN\n*/\nfunction pmf( x, r, p ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp <= 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( !isNonNegativeInteger( x ) || p === 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar ibetaDerivative = require( './ibeta_derivative.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a negative binomial distribution with number of successes until experiment is stopped `r` and success probability `p`.\n*\n* @param {PositiveNumber} r - number of successes until experiment is stopped\n* @param {Probability} p - success probability\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 10, 0.5 );\n* var y = pmf( 3.0 );\n* // returns ~0.027\n*\n* y = pmf( 5.0 );\n* // returns ~0.061\n*/\nfunction factory( r, p ) {\n\tif (\n\t\tisnan( r ) ||\n\t\tisnan( p ) ||\n\t\tr <= 0.0 ||\n\t\tp <= 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a negative binomial distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( !isNonNegativeInteger( x ) ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn ( p / ( r + x ) ) * ibetaDerivative( p, r, x + 1.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Negative binomial distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/negative-binomial/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/negative-binomial/pmf' );\n*\n* var y = pmf( 5.0, 20.0, 0.8 );\n* // returns ~0.157\n*\n* y = pmf( 21.0, 20.0, 0.5 );\n* // returns ~0.06\n*\n* y = pmf( 5.0, 10.0, 0.4 );\n* // returns ~0.016\n*\n* y = pmf( 0.0, 10.0, 0.9 );\n* // returns ~0.349\n*\n* y = pmf( 21.0, 15.5, 0.5 );\n* // returns ~0.037\n*\n* y = pmf( 5.0, 7.4, 0.4 );\n* // returns ~0.051\n*\n* var mypmf = pmf.factory( 10, 0.5 );\n* y = mypmf( 3.0 );\n* // returns ~0.027\n*\n* y = mypmf( 5.0 );\n* // returns ~0.061\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar factorialln = require( '@stdlib/math/base/special/factorialln' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Probability} evaluated PMF\n*\n* @example\n* var y = pmf( 4.0, 3.0 );\n* // returns ~0.168\n*\n* @example\n* var y = pmf( 1.0, 3.0 );\n* // returns ~0.149\n*\n* @example\n* var y = pmf( -1.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = pmf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = pmf( NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* // Invalid mean parameter:\n* var y = pmf( 2.0, -0.5 );\n* // returns NaN\n*/\nfunction pmf( x, lambda ) {\n\tvar lnl;\n\tif ( isnan( x ) || isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn ( x === 0.0 ) ? 1.0 : 0.0;\n\t}\n\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\tlnl = (x * ln( lambda )) - lambda - factorialln( x );\n\t\treturn exp( lnl );\n\t}\n\treturn 0.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar factorialln = require( '@stdlib/math/base/special/factorialln' );\nvar degenerate = require( './../../../../../base/dists/degenerate/pmf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the probability mass function (PMF) for a Poisson distribution with mean parameter `lambda`.\n*\n* @param {NonNegativeNumber} lambda - mean parameter\n* @returns {Function} PMF\n*\n* @example\n* var pmf = factory( 1.0 );\n* var y = pmf( 3.0 );\n* // returns ~0.061\n*\n* y = pmf( 1.0 );\n* // returns ~0.368\n*/\nfunction factory( lambda ) {\n\tif ( isnan( lambda ) || lambda < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( lambda === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\treturn pmf;\n\n\t/**\n\t* Evaluates the probability mass function (PMF) for a Poisson distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated PMF\n\t*\n\t* @example\n\t* var y = pmf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction pmf( x ) {\n\t\tvar lnl;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( isNonNegativeInteger( x ) && x !== PINF ) {\n\t\t\tlnl = (x * ln( lambda )) - lambda - factorialln( x );\n\t\t\treturn exp( lnl );\n\t\t}\n\t\treturn 0.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Poisson distribution probability mass function (PMF).\n*\n* @module @stdlib/stats/base/dists/poisson/pmf\n*\n* @example\n* var pmf = require( '@stdlib/stats/base/dists/poisson/pmf' );\n*\n* var y = pmf( 4.0, 3.0 );\n* // returns ~0.168\n*\n* y = pmf( 1.0, 3.0 );\n* // returns ~0.149\n*\n* y = pmf( -1.0, 2.0 );\n* // returns 0.0\n*\n* var mypmf = pmf.factory( 1.0 );\n* y = mypmf( 3.0 );\n* // returns ~0.061\n*\n* y = mypmf( 1.0 );\n* // returns ~0.368\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar pmf = require( './pmf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( pmf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = pmf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\nvar PMF = require( './pmf.js' );\n\n\n// MAIN //\n\n/**\n* Returns the probability mass function (PMF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @returns {(Function|Error)} a probability mass function (PMF) or an error\n*/\nfunction getPMF( name ) {\n\tif ( !hasOwnProp( PMF, name ) ) {\n\t\treturn new Error( format( 'invalid argument. Unsupported/unrecognized distribution name. Value: `%s`.', name ) );\n\t}\n\treturn PMF[ name ];\n}\n\n\n// EXPORTS //\n\nmodule.exports = getPMF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar bernoulli = require( './../../base/dists/bernoulli/pmf' );\nvar binomial = require( './../../base/dists/binomial/pmf' );\nvar discreteUniform = require( './../../base/dists/discrete-uniform/pmf' );\nvar geometric = require( './../../base/dists/geometric/pmf' );\nvar hypergeometric = require( './../../base/dists/hypergeometric/pmf' );\nvar negativeBinomial = require( './../../base/dists/negative-binomial/pmf' );\nvar poisson = require( './../../base/dists/poisson/pmf' );\n\n\n// MAIN //\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\nvar PMF = {\n\t'bernoulli': bernoulli,\n\t'binomial': binomial,\n\t'discrete-uniform': discreteUniform,\n\t'geometric': geometric,\n\t'hypergeometric': hypergeometric,\n\t'negative-binomial': negativeBinomial,\n\t'poisson': poisson\n};\n\n\n// EXPORTS //\n\nmodule.exports = PMF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Computes a chi-square test statistic.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} x - observation frequencies\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - expected frequencies\n* @param {integer} strideY - `y` stride length\n* @returns {number} test statistic\n*/\nfunction testStatistic( N, x, strideX, y, strideY ) {\n\tvar stat;\n\tvar v1;\n\tvar v2;\n\tvar d;\n\tvar i;\n\n\tstat = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv1 = x[ i*strideX ];\n\t\tv2 = y[ i*strideY ];\n\t\tif ( v2 === 0.0 ) {\n\t\t\tif ( v1 === 0.0 ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\treturn PINF;\n\t\t}\n\t\td = v1 - v2;\n\t\tstat += ( d * d ) / v2;\n\t}\n\treturn stat;\n}\n\n\n// EXPORTS //\n\nmodule.exports = testStatistic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Creates a frequency table from an input array.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Collection} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {Float64Array} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {Collection} output array\n*\n* @example\n* var arr = [ 0, 1, 1, 0, 0, 2, 3, 5 ];\n* var out = [ 0, 0, 0, 0, 0, 0, 0, 0 ];\n*\n* var freq = tabulate( arr.length, arr, 1, out, 1 );\n* // returns [ 3, 2, 1, 1, 0, 1, 0, 0 ]\n*/\nfunction tabulate( N, x, strideX, y, strideY ) {\n\tvar i;\n\tfor ( i = 0; i < N; i++ ) {\n\t\ty[ x[ i*strideX ] * strideY ] += 1;\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = tabulate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrspace = require( '@stdlib/array/base/incrspace' );\nvar sample = require( '@stdlib/random/sample' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar dfill = require( '@stdlib/blas/ext/base/dfill' );\nvar tabulate = require( './tabulate.js' );\nvar testStatistic = require( './statistic.js' );\n\n\n// MAIN //\n\n/**\n* Performs a Monte-Carlo simulation.\n*\n* @private\n* @param {NonNegativeInteger} N - number of indexed elements\n* @param {Float64Array} expected - expected number of observations\n* @param {NumericArray} p - probabilities\n* @param {number} stat - test statistic\n* @param {NonNegativeInteger} nobs - total number of observations\n* @param {NonNegativeInteger} niter - number of iterations\n* @returns {number} p-value\n*/\nfunction simulate( N, expected, p, stat, nobs, niter ) {\n\tvar pool;\n\tvar opts;\n\tvar freq;\n\tvar cnt;\n\tvar v;\n\tvar i;\n\n\tpool = incrspace( 0, N, 1 ); // TODO: replace with strided interface\n\topts = {\n\t\t'size': nobs,\n\t\t'probs': p\n\t};\n\tfreq = new Float64Array( N );\n\tcnt = 1;\n\tfor ( i = 0; i < niter; i++ ) {\n\t\tv = sample( pool, opts ); // TODO: use `sample.factory` method once sample pkg is updated\n\t\tfreq = tabulate( N, v, 1, freq, 1 );\n\t\tif ( testStatistic( N, freq, 1, expected, 1 ) >= stat ) { // TODO: consider replacing with low-level double-precision strided interface\n\t\t\tcnt += 1;\n\t\t}\n\t\tif ( i < niter-1 ) {\n\t\t\tdfill( N, 0.0, freq, 1 );\n\t\t}\n\t}\n\treturn cnt / ( niter+1 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = simulate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-invalid-this, no-restricted-syntax */\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-nonenumerable-read-only-accessor' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a results object.\n*\n* @private\n* @constructor\n* @param {number} pValue - p-value\n* @param {number} alpha - significance\n* @param {number} statistic - test statistic\n* @param {(number|null)} df - degrees of freedom\n* @returns {Results} results object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n* // returns <Results>\n*/\nfunction Results( pValue, alpha, statistic, df ) {\n\tif ( !(this instanceof Results) ) {\n\t\treturn new Results( pValue, alpha, statistic, df );\n\t}\n\tthis._pValue = pValue;\n\tthis._alpha = alpha;\n\tthis._statistic = statistic;\n\tthis._df = df;\n\treturn this;\n}\n\n/**\n* Significance level.\n*\n* @private\n* @name alpha\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var alpha = res.alpha;\n* // returns 0.05\n*/\nsetReadOnlyAccessor( Results.prototype, 'alpha', function get() {\n\treturn this._alpha;\n});\n\n/**\n* Degrees of freedom.\n*\n* @private\n* @name df\n* @memberof Results.prototype\n* @type {(number|null)}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var df = res.df;\n* // returns 4\n*/\nsetReadOnlyAccessor( Results.prototype, 'df', function get() {\n\treturn this._df;\n});\n\n/**\n* Test name.\n*\n* @private\n* @name method\n* @memberof Results.prototype\n* @type {string}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var method = res.method;\n* // returns 'Chi-square goodness-of-fit test'\n*/\nsetReadOnly( Results.prototype, 'method', 'Chi-square goodness-of-fit test' );\n\n/**\n* Test p-value.\n*\n* @private\n* @name pValue\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var pval = res.pValue;\n* // returns 0.0406\n*/\nsetReadOnlyAccessor( Results.prototype, 'pValue', function get() {\n\treturn this._pValue;\n});\n\n/**\n* Boolean indicating the test decision.\n*\n* @private\n* @name rejected\n* @memberof Results.prototype\n* @type {boolean}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var bool = res.rejected;\n* // returns true\n*/\nsetReadOnlyAccessor( Results.prototype, 'rejected', function get() {\n\treturn ( this._pValue <= this._alpha );\n});\n\n/**\n* Test statistic.\n*\n* @private\n* @name statistic\n* @memberof Results.prototype\n* @type {number}\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var stat = res.statistic;\n* // returns 9.9901\n*/\nsetReadOnlyAccessor( Results.prototype, 'statistic', function get() {\n\treturn this._statistic;\n});\n\n/**\n* Serializes a results object as a string.\n*\n* ## Notes\n*\n* -   Example output:\n*\n*     ```text\n*\n*     Chi-square goodness-of-fit test\n*\n*     Null hypothesis: population probabilities are equal to those in p\n*\n*        pValue: 0.0406\n*        statistic: 9.9901\n*        degrees of freedom: 4\n*\n*     Test Decision: Reject null in favor of alternative at 5% significance level\n*\n*     ```\n*\n* @private\n* @name toString\n* @memberof Results.prototype\n* @type {Function}\n* @param {Options} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to show the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} serialized results\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var str = res.toString();\n* // returns <string>\n*/\nsetReadOnly( Results.prototype, 'toString', function toString( opts ) {\n\tvar decision;\n\tvar dgts;\n\tvar out;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tout = [\n\t\tthis.method,\n\t\t'',\n\t\t'',\n\t\t'Null hypothesis: population probabilities are equal to those in p',\n\t\t'',\n\t\t'',\n\t\t'    pValue: ' + roundn( this._pValue, -dgts ),\n\t\t'    statistic: ' + roundn( this._statistic, -dgts ),\n\t\t'    degrees of freedom: ' + this._df,\n\t\t''\n\t];\n\tif ( decision ) {\n\t\tout.push( 'Test Decision: ' + ( ( this.rejected ) ? 'Reject' : 'Fail to reject' ) + ' null in favor of alternative at ' + (this._alpha*100.0) + '% significance level' );\n\t\tout.push( '' );\n\t}\n\treturn out.join( '\\n' );\n});\n\n/**\n* Serializes a results object as a JSON object.\n*\n* ## Notes\n*\n* -   `JSON.stringify()` implicitly calls this method when stringifying a `Results` instance.\n*\n* @private\n* @name toJSON\n* @memberof Results.prototype\n* @type {Function}\n* @returns {Object} serialized object\n*\n* @example\n* var res = new Results( 0.0406, 0.05, 9.9901, 4 );\n*\n* var o = res.toJSON();\n* // returns {'rejected': true, 'alpha': 0.05, 'pValue': 0.0406, 'df': 4, ...}\n*/\nsetReadOnly( Results.prototype, 'toJSON', function toJSON() {\n\treturn {\n\t\t'rejected': this.rejected,\n\t\t'alpha': this._alpha,\n\t\t'pValue': this._pValue,\n\t\t'df': this._df,\n\t\t'statistic': this._statistic,\n\t\t'method': this.method\n\t};\n});\n\n\n// EXPORTS //\n\nmodule.exports = Results;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isndarrayLike = require( '@stdlib/assert/is-ndarray-like' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar absdiff = require( '@stdlib/math/base/utils/absolute-difference' );\nvar FLOAT64_SQRT_EPS = require( '@stdlib/constants/float64/sqrt-eps' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar chisqCDF = require( './../../base/dists/chisquare/cdf' );\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar daxpy = require( '@stdlib/blas/base/daxpy' );\nvar dscal = require( '@stdlib/blas/base/dscal' );\nvar dsumpw = require( '@stdlib/blas/ext/base/dsumpw' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar defaults = require( './defaults.js' );\nvar validate = require( './validate.js' );\nvar getPMF = require( './get_pmf.js' );\nvar testStatistic = require( './statistic.js' );\nvar simulate = require( './simulate.js' );\nvar Results = require( './results.js' );\n\n\n// MAIN //\n\n/**\n* Performs a chi-square goodness-of-fit test.\n*\n* @param {(Collection|VectorLike)} x - observation frequencies\n* @param {(Collection|VectorLike|string)} y - expected frequencies or a discrete probability distribution name\n* @param {...number} [args] - probability mass function (PMF) arguments\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {NonNegativeInteger} [options.ddof=0] - degrees of freedom adjustment\n* @param {boolean} [options.simulate=false] - boolean indicating whether to compute p-values by Monte Carlo simulation\n* @param {PositiveInteger} [options.iterations=500] - number of Monte Carlo iterations\n* @throws {TypeError} first argument must be an array-like object or a 1-dimensional array containing nonnegative integers\n* @throws {TypeError} second argument must be either an array-like object (or a 1-dimensional array) of nonnegative numbers, an array-like object (or a 1-dimensional array) of probabilities summing to one, or a discrete probability distribution name\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {Error} first and second arguments must have the same length\n* @throws {Error} first argument must contain at least one element greater than zero\n* @throws {RangeError} significance level must be a number on the interval `[0,1]`\n* @throws {TypeError} probability mass function (PMF) arguments must be numbers\n* @returns {Object} test results\n*\n* @example\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*/\nfunction chi2gof( x, y ) {\n\tvar expected;\n\tvar nargs;\n\tvar args;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar obs;\n\tvar err;\n\tvar pmf;\n\tvar sum;\n\tvar df;\n\tvar N;\n\tvar d;\n\tvar s;\n\tvar o;\n\tvar n;\n\tvar p;\n\tvar v;\n\tvar i;\n\n\tif ( isndarrayLike( x ) && x.ndims === 1 && x.strides.length === 1 ) { // is ndarray-like vector?\n\t\td = x.data;\n\t\ts = x.strides[ 0 ];\n\t\to = x.offset;\n\t} else if ( isCollection( x ) ) {\n\t\td = x;\n\t\ts = 1;\n\t\to = 0;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be either an array-like object or a 1-dimensional ndarray. Value: `%s`.', x ) );\n\t}\n\tN = x.length;\n\n\t// Initialize an array for storing a copy of the observations array:\n\tobs = new Float64Array( N+1 ); // Note: `N+1` is intentional in the event that we need to add a remaining category for all values greater than or equal to `N`\n\n\tn = 0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\tv = d[ o+(s*i) ];\n\t\tif ( !isNonNegativeInteger( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must contain nonnegative integers. Index: `%u`. Value: `%u`.', i, v ) );\n\t\t}\n\t\tobs[ i ] = v;\n\t\tn += v;\n\t}\n\tif ( n === 0 ) {\n\t\tthrow new Error( 'invalid argument. First argument must contain at least one element greater than zero (i.e., the total number number of observations must be greater than zero).' );\n\t}\n\t// NOTE: `obs` is now a single-segment contiguous Float64Array\n\n\tnargs = 0;\n\tif ( isString( y ) ) {\n\t\tpmf = getPMF( y );\n\t\tif ( pmf instanceof Error ) {\n\t\t\tthrow pmf;\n\t\t}\n\t\tnargs += pmf.length - 1; // WARNING: this relies on PMF functions having an explicit arity\n\t\targs = [ 0 ];\n\t\tfor ( i = 0; i < nargs; i++ ) {\n\t\t\tv = arguments[ i+2 ];\n\t\t\tif ( !isNumber( v ) || isnan( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Probability mass function (PMF) arguments must be numbers. Argument: `%f`. Value: `%f`.', i+2, v ) );\n\t\t\t}\n\t\t\targs.push( v );\n\t\t}\n\t\texpected = new Float64Array( N+1 );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\targs[ 0 ] = i;\n\t\t\tif ( y === 'discrete-uniform' ) {\n\t\t\t\targs[ 0 ] += args[ 1 ]; // scales the value at which to evaluate the PMF based on the minimum support of the distribution (which should have been provided as the first distribution parameter)\n\t\t\t}\n\t\t\tv = pmf.apply( null, args );\n\t\t\tsum += v;\n\t\t\texpected[ i ] = v * n;\n\t\t}\n\t\t// Check whether we need to add a remaining category for all values greater than or equal to `N`...\n\t\tif ( sum < 1.0 ) {\n\t\t\texpected[ N ] = (1.0-sum) * n;\n\t\t\tN += 1;\n\t\t}\n\t} else {\n\t\tif ( isndarrayLike( y ) && y.ndims === 1 && y.strides.length === 1 ) { // is ndarray-like vector?\n\t\t\td = y.data;\n\t\t\ts = y.strides[ 0 ];\n\t\t\to = y.offset;\n\t\t} else if ( isCollection( y ) ) {\n\t\t\td = y;\n\t\t\ts = 1;\n\t\t\to = 0;\n\t\t} else {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either an array-like object (or 1-dimensional ndarray) of probabilities summing to one, an array-like object (or 1-dimensional ndarray) of expected frequencies, or a discrete probability distribution name. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( y.length !== N ) {\n\t\t\tthrow new Error( 'invalid arguments. First and second arguments must have the same length.' );\n\t\t}\n\t\texpected = new Float64Array( N );\n\t\tsum = 0.0;\n\t\tfor ( i = 0; i < N; i++ ) {\n\t\t\tv = d[ o+(s*i) ];\n\t\t\tif ( !isNumber( v ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must only contain numbers. Index: `%u`. Value: `%f`.', i, v ) );\n\t\t\t}\n\t\t\tif ( v < 0.0 ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must only contain nonnegative numbers. Index: `%u`. Value: `%d`.', i, v ) );\n\t\t\t} else if ( v > 1.0 ) {\n\t\t\t\tsum += PINF;\n\t\t\t} else {\n\t\t\t\tsum += v;\n\t\t\t}\n\t\t\texpected[ i ] = v;\n\t\t}\n\t\t// Check if provided a unity probability array (otherwise, assume provided an expected frequencies array)...\n\t\tif ( absdiff( sum, 1.0 ) <= FLOAT64_SQRT_EPS ) {\n\t\t\tp = y; // NOTE: `y` may not be a Float64Array\n\t\t\texpected = dscal( N, n, expected, 1 );\n\t\t}\n\t}\n\t// NOTE: `expected` is now a single-segment contiguous Float64Array\n\n\topts = defaults();\n\tif ( arguments.length > 2+nargs ) {\n\t\terr = validate( opts, arguments[ 2+nargs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tstat = testStatistic( N, obs, 1, expected, 1 ); // TODO: consider replacing with low-level double-precision strided interface\n\tif ( opts.simulate ) {\n\t\tif ( p === void 0 ) {\n\t\t\tv = dsumpw( N, expected, 1 );\n\t\t\tp = daxpy( N, 1.0/v, expected, 1, new Float64Array( N ), 1 );\n\t\t}\n\t\tpval = simulate( N, expected, p, stat, n, opts.iterations );\n\t} else {\n\t\tdf = N - 1 - opts.ddof;\n\t\tpval = 1.0 - chisqCDF( stat, df );\n\t}\n\treturn new Results( pval, opts.alpha, stat, ( df === void 0 ) ? null : df );\n}\n\n\n// EXPORTS //\n\nmodule.exports = chi2gof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square goodness-of-fit test.\n*\n* @module @stdlib/stats/chi2gof\n*\n* @example\n* var chi2gof = require( '@stdlib/stats/chi2gof' );\n* var x = [ 89, 37, 30, 28, 2 ];\n* var p = [ 0.40, 0.20, 0.20, 0.15, 0.05 ];\n*\n* var out = chi2gof( x, p );\n*\n* var o = out.toJSON();\n* // returns { 'pValue': ~0.0406, 'statistic': ~9.9901, ... }\n*\n* var table = out.toString();\n* /*\n* Null hypothesis: population probabilities are equal to those in p\n*\n*     pValue: 0.0406\n*     statistic: 9.9901\n*     degrees of freedom: 4\n*\n* Test Decision: Reject null in favor of alternative at 5% significance level\n* /*\n*/\n\n// MODULES //\n\nvar chi2gof = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = chi2gof;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a minimum value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmin();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns -5.0\n*\n* min = accumulator( 10.1 );\n* // returns -5.0\n*\n* min = accumulator();\n* // returns -5.0\n*/\nfunction incrmin() {\n\tvar min;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum value. If not provided a value, the accumulator function returns the current min.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} min value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( min === void 0 ) ? null : min;\n\t\t}\n\t\tif (\n\t\t\tmin === void 0 ||\n\t\t\tx < min ||\n\t\t\tisnan( x ) ||\n\t\t\t( x === min && isNegativeZero( x ) )\n\t\t) {\n\t\t\tmin = x;\n\t\t}\n\t\treturn min;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum value incrementally.\n*\n* @module @stdlib/stats/incr/min\n*\n* @example\n* var incrmin = require( '@stdlib/stats/incr/min' );\n*\n* var accumulator = incrmin();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns -5.0\n*\n* min = accumulator( 10.1 );\n* // returns -5.0\n*\n* min = accumulator();\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar incrmin = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns a function to pretty print test results.\n*\n* @private\n* @param {Object} results - test results\n* @returns {Function} pretty print function\n*/\nfunction prettyPrint( results ) {\n\treturn print;\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Options} [opts] - options object\n\t* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted results\n\t*/\n\tfunction print( opts ) {\n\t\tvar decision;\n\t\tvar dgts;\n\t\tvar str;\n\n\t\tdgts = 4;\n\t\tdecision = true;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( opts ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', opts ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t\t}\n\t\t\t\tdgts = opts.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = opts.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Null hypothesis: the two variables are independent';\n\t\tstr += '\\n\\n';\n\t\tstr += '    pValue: ' + roundn( results.pValue, -dgts ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( results.statistic, -dgts ) + '\\n';\n\t\tstr += '    degrees of freedom: ' + results.df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( results.rejected ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (results.alpha*100) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = prettyPrint;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array/float64' );\n\n\n// MAIN //\n\n/**\n* Computes the sum along a matrix dimension.\n*\n* @param {Matrix} mat - input matrix\n* @param {number} [dim=2] - matrix dimension along which to compute the sum. If `dim=1`, compute along matrix rows. If `dim=2`, compute along matrix columns.\n* @returns {(Int32Array|number)} sums or 0\n*/\nfunction sum( mat, dim ) {\n\tvar out;\n\tvar s0;\n\tvar s1;\n\tvar s;\n\tvar M;\n\tvar N;\n\tvar o;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tif ( dim === 1 ) {\n\t\t// Compute along the rows...\n\t\tM = mat.shape[ 1 ];\n\t\tN = mat.shape[ 0 ];\n\t\ts0 = mat.strides[ 1 ];\n\t\ts1 = mat.strides[ 0 ];\n\t} else {\n\t\t// Compute along the columns...\n\t\tM = mat.shape[ 0 ];\n\t\tN = mat.shape[ 1 ];\n\t\ts0 = mat.strides[ 0 ];\n\t\ts1 = mat.strides[ 1 ];\n\t}\n\tif ( M === 0 || N === 0 ) {\n\t\treturn 0;\n\t}\n\tout = new Float64Array( M );\n\to = mat.offset;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tk = o + ( i*s0 );\n\t\ts = 0;\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\ts += mat.data[ k + ( j*s1 ) ];\n\t\t}\n\t\tout[ i ] = s;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar array = require( '@stdlib/ndarray/array' );\nvar Float64Array = require( '@stdlib/array/float64' );\n\n\n// MAIN //\n\n/**\n* Computes the outer product.\n*\n* @param {Float64Array} x - first factor of outer product\n* @param {Float64Array} y - second factor of outer product\n* @returns {Matrix} output matrix\n*/\nfunction outer( x, y ) {\n\tvar xlen = x.length;\n\tvar ylen = y.length;\n\tvar out = array( new Float64Array( xlen * ylen ), {\n\t\t'shape': [ xlen, ylen ]\n\t});\n\tvar i;\n\tvar j;\n\tfor ( i = 0; i < xlen; i++ ) {\n\t\tfor ( j = 0; j < ylen; j++ ) {\n\t\t\tout.set( i, j, x[ i ] * y[ j ] );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = outer;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Float64Array = require( '@stdlib/array/float64' );\nvar array = require( '@stdlib/ndarray/array' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Computes an element-wise absolute difference of two matrices and stores the results in a typed array.\n*\n* @param {Matrix} x - first input matrix\n* @param {Matrix} y - second input matrix\n* @returns {Matrix} matrix containing the absolute differences\n*/\nfunction absdiff( x, y ) {\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar M;\n\tvar N;\n\tvar v;\n\n\tM = x.shape[ 0 ];\n\tN = x.shape[ 1 ];\n\tout = array( new Float64Array( M * N ), {\n\t\t'shape': [ M, N ]\n\t});\n\tfor ( i = 0; i < M; i++ ) {\n\t\tfor ( j = 0; j < N; j++ ) {\n\t\t\tv = abs( x.get( i, j ) - y.get( i, j ) );\n\t\t\tout.set( i, j, v );\n\t\t}\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = absdiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.correct] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'correct': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number on the interval `[0,1]`. Value: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correct' ) ) {\n\t\topts.correct = options.correct;\n\t\tif ( !isBoolean( opts.correct ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'correct', opts.simulate ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n/* eslint-disable no-underscore-dangle */\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar isNonNegativeIntegerArray = require( '@stdlib/assert/is-nonnegative-integer-array' );\nvar isMatrixLike = require( '@stdlib/assert/is-matrix-like' );\nvar isArrayArray = require( '@stdlib/assert/is-array-array' );\nvar array = require( '@stdlib/ndarray/array' );\nvar incrmin = require( './../../incr/min' );\nvar gsum = require( '@stdlib/blas/ext/base/gsum' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar format = require( '@stdlib/string/format' );\nvar copy = require( '@stdlib/utils/copy' );\nvar chisqCDF = require( './../../base/dists/chisquare/cdf' );\nvar prettyPrint = require( './print.js' );\nvar defaults = require( './defaults.json' );\nvar sumByDimension = require( './sum.js' );\nvar outer = require( './outer.js' );\nvar absdiff = require( './absdiff.js' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Performs a chi-square independence test.\n*\n* @param {(ndarray|ArrayArray)} x - two-way table of cell counts\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.correct=true] - boolean indicating whether to use Yates' continuity correction when provided a 2x2 contingency table\n* @throws {TypeError} first argument must be an array of arrays or ndarray-like object with dimension two\n* @returns {Object} test results\n*\n* @example\n*\n* @example\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n* var out = chi2test( x );\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*/\nfunction chi2test( x, options ) {\n\tvar absDiff;\n\tvar colSums;\n\tvar rowSums;\n\tvar minAbs;\n\tvar yates;\n\tvar means;\n\tvar param;\n\tvar nrow;\n\tvar ncol;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar err;\n\tvar out;\n\tvar N;\n\tvar e;\n\tvar i;\n\tvar j;\n\n\tif ( isArrayArray( x ) ) {\n\t\tx = array( x );\n\t}\n\tif ( !isMatrixLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be an array of arrays or ndarray-like object with dimension two. Value: `%s`.', x ) );\n\t}\n\tif ( !isNonNegativeIntegerArray( x.data ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must contain nonnegative integers. Value: `%s`.', x ) );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tN = gsum( x.length, x.data, 1 );\n\tnrow = x.shape[ 0 ];\n\tncol = x.shape[ 1 ];\n\n\tcolSums = sumByDimension( x, 1 );\n\trowSums = sumByDimension( x, 2 );\n\tmeans = outer( rowSums, colSums );\n\tfor ( i = 0; i < means.length; i++ ) {\n\t\tmeans.data[ i ] /= N;\n\t}\n\tabsDiff = absdiff( x, means );\n\n\tif ( opts.correct && nrow === 2 && ncol === 2 ) {\n\t\t// Apply Yates' continuity correction:\n\t\tminAbs = incrmin();\n\t\tfor ( i = 0; i < absDiff._buffer.length; i++ ) {\n\t\t\tminAbs( absDiff._buffer[ i ] );\n\t\t}\n\t\tyates = min( 0.5, minAbs() );\n\t\tfor ( i = 0; i < absDiff._buffer.length; i++ ) {\n\t\t\tabsDiff._buffer[ i ] -= yates;\n\t\t}\n\t}\n\tfor ( i = 0; i < nrow; i++) {\n\t\tfor ( j = 0; j < ncol; j++ ) {\n\t\t\te = absDiff.get( i, j ) * absDiff.get( i, j ) / means.get( i, j );\n\t\t\tabsDiff.set( i, j, e );\n\t\t}\n\t}\n\tstat = gsum( absDiff.length, absDiff._buffer, 1 );\n\tparam = ( nrow - 1 ) * ( ncol - 1 );\n\tpval = 1 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'expected', means );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Chi-square independence test' );\n\tsetReadOnly( out, 'print', prettyPrint( out ) );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = chi2test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi-square independence test.\n*\n* @module @stdlib/stats/chi2test\n*\n* @example\n* var chi2test = require( '@stdlib/stats/chi2test' );\n*\n* var x = [ [ 20, 30 ], [ 30, 20 ] ];\n* var out = chi2test( x );\n* // returns { 'rejected': false, 'alpha': 0.05, 'pValue': ~0.072, ... }\n*\n* var table = out.print();\n* /*\n*     Chi-square independence test\n*\n*     Null hypothesis: the two variables are independent\n*\n*         pValue: 0.0719\n*         statistic: 3.24\n*         degrees of freedom: 1\n*\n*     Test Decision: Fail to reject null in favor of alternative at 5% significance level\n* /*\n*/\n\n// MODULES //\n\nvar chi2test = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = chi2test;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar erfinv = require( '@stdlib/math/base/special/erfinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a normal distribution with mean `mu` and standard deviation `sigma` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.842\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = quantile( 0.5, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, mu, sigma ) {\n\tvar A;\n\tvar B;\n\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tisnan( p ) ||\n\t\tsigma < 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn mu;\n\t}\n\tA = mu;\n\tB = sigma * sqrt( 2.0 );\n\treturn A + (B * erfinv( (2.0*p) - 1.0 ));\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a degenerate distribution centered at `mu`.\n*\n* @param {Probability} p - input value\n* @param {number} mu - constant value of the distribution\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.5, 2.0 );\n* // returns 2.0\n*\n* @example\n* var y = quantile( 0.9, 4.0 );\n* // returns 4.0\n*\n* @example\n* var y = quantile( 1.1, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*/\nfunction quantile( p, mu ) {\n\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\treturn NaN;\n\t}\n\treturn mu;\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of a degenerate distribution centered at a provided mean value.\n*\n* @param {number} mu - value at which to center the distribution\n* @returns {Function} function to evaluate the quantile function\n*\n* @example\n* var quantile = factory( 5.0 );\n*\n* var y = quantile( 0.3 );\n* // returns 5.0\n*\n* y = quantile( 0.1 );\n* // returns 5.0\n*\n* y = quantile( 1.1 );\n* // returns NaN\n*/\nfunction factory( mu ) {\n\tif ( isnan( mu ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function of a degenerate distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.5 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Degenerate distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/degenerate/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/degenerate/quantile' );\n*\n* var y = quantile( 0.5, 2.0 );\n* // returns 2.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/degenerate/quantile' ).factory;\n*\n* var quantile = factory( 10.0 );\n*\n* var y = quantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quantile = require( './quantile.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar degenerate = require( './../../../../../base/dists/degenerate/quantile' ).factory;\nvar erfinv = require( '@stdlib/math/base/special/erfinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function of a normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.5 );\n* // returns 10.0\n*\n* y = quantile( 0.8 );\n* // returns ~11.683\n*/\nfunction factory( mu, sigma ) {\n\tvar A;\n\tvar B;\n\tif ( isnan( mu ) || isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\tdegenerate( mu );\n\t}\n\tA = mu;\n\tB = sigma * sqrt( 2.0 );\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a normal distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn A + ( B * erfinv( (2.0*p) - 1.0 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution quantile function.\n*\n* @module @stdlib/stats/base/dists/normal/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/normal/quantile' );\n*\n* var y = quantile( 0.8, 0.0, 1.0 );\n* // returns ~0.842\n*\n* var myQuantile = quantile.factory( 10.0, 2.0 );\n* y = myQuantile( 0.5 );\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quantile = require( './quantile.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Computes the sum of elements of an numeric array.\n*\n* @private\n* @param {NumericArray} arr - input array\n* @returns {number} sum\n*\n* @example\n* var arr = [ 2.0, 6.0, 10.0 ];\n* var out = sum( arr );\n* // returns 18.0\n*/\nfunction sum( arr ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout += arr[ i ];\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = sum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {boolean} comparison result\n*/\nfunction compareFunction( a, b ) {\n\tif ( a < b ) {\n\t\treturn -1;\n\t}\n\tif ( a > b ) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n\n// MAIN //\n\n/**\n* Returns a permutation which rearranges input array.\n*\n* @private\n* @param {ArrayLike} x - input array-like object\n* @returns {Array} permutation array\n*/\nfunction order( x ) {\n\tvar arr;\n\tvar i;\n\n\tarr = new Array( x.length );\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tarr[ i ] = i;\n\t}\n\treturn arr.sort( compare );\n\n\t/**\n\t* Compare the elements of the input array.\n\t*\n\t* @private\n\t* @param {number} a - first number\n\t* @param {number} b - second number\n\t* @returns {boolean} comparison result\n\t*/\n\tfunction compare( a, b ) {\n\t\treturn compareFunction( x[a], x[b] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\nvar contains = require( '@stdlib/assert/contains' );\n\n\n// MAIN //\n\n/**\n* Computes for each array element whether it is a missing value.\n*\n* @private\n* @param {Array} arr - input array\n* @param {Array} encoding - array whose elements encode missing values\n* @returns {BooleanArray} output array\n*/\nfunction isMissing( arr, encoding ) {\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = arr.length;\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = contains( encoding, arr[ i ] );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = isMissing;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar contains = require( '@stdlib/assert/contains' );\nvar isArray = require( '@stdlib/assert/is-array' );\nvar isObject = require( '@stdlib/assert/is-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar METHODS = [ 'min', 'max', 'average', 'dense', 'ordinal' ];\nvar MISSING = [ 'last', 'first', 'remove' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Object} options - function options\n* @param {string} [options.method] - method determining how ties are treated\n* @param {string} [opts.missing] - determines where missing values go (`first`,`last`, or `remove`)\n* @param {Array} [opts.encoding] - array of values encoding missing values\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'encoding' ) ) {\n\t\topts.encoding = options.encoding;\n\t\tif ( !isArray( opts.encoding ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'encoding', opts.encoding ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'method' ) ) {\n\t\topts.method = options.method;\n\t\tif ( !isString( opts.method ) || !contains( METHODS, opts.method ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be one of the following: %s. Option: `%s`.', 'method', METHODS.join( ',' ), opts.method ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'missing' ) ) {\n\t\topts.missing = options.missing;\n\t\tif ( !isString( opts.missing ) || !contains( MISSING, opts.missing ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be one of the following: %s. Option: `%s`.', 'missing', MISSING.join( ',' ), opts.missing ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar contains = require( '@stdlib/assert/contains' );\nvar format = require( '@stdlib/string/format' );\nvar sum = require( './sum.js' );\nvar order = require( './order.js' );\nvar isMissing = require( './is_missing.js' );\nvar validate = require( './validate.js' );\n\n\n// MAIN //\n\n/**\n* Computes the sample ranks for the values of an array-like object.\n*\n* @param {Collection} x - data array\n* @param {Object} [options] - options object\n* @param {string} [options.method='average'] - method name determining how ties are treated\n* @param {string} [options.missing='last'] - determines where missing values go (`first`,`last`, or `remove`)\n* @param {Array} [options.encoding=[null,NaN]] - array of values encoding missing values\n* @throws {TypeError} first argument has to be an array-like object\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Array} array containing the computed ranks for the elements of x\n*\n* @example\n* var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ];\n* var out = ranks( arr );\n* // returns [ 2, 3, 5, 1, 4 ]\n*\n* @example\n* // Ties are averaged:\n* arr = [ 2, 2, 1, 4, 3 ];\n* out = ranks( arr );\n* // returns [ 2.5, 2.5, 1, 5, 4 ]\n*\n* @example\n* // Missing values are placed last:\n* arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];\n* out = ranks( arr );\n* // returns [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]\n*/\nfunction ranks( x, options ) {\n\tvar missingIndices;\n\tvar noDuplicates;\n\tvar countMissing;\n\tvar totalNoTies;\n\tvar finalRanks;\n\tvar encoding;\n\tvar iPlusOne;\n\tvar ordered;\n\tvar missing;\n\tvar tieRank;\n\tvar method;\n\tvar ranks;\n\tvar opts;\n\tvar xnew;\n\tvar err;\n\tvar n;\n\tvar i;\n\tvar j;\n\n\tif ( !isCollection( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be an array-like object. Value: `%s`.', x ) );\n\t}\n\topts = {};\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmethod = opts.method || 'average';\n\tencoding = opts.encoding || [ null, NaN ];\n\tmissing = opts.missing || 'last';\n\n\tn = x.length;\n\txnew = [];\n\tfor ( i = 0; i < n; i++ ) {\n\t\tif ( !contains( encoding, x[ i ] ) ) {\n\t\t\txnew.push( x[ i ] );\n\t\t}\n\t}\n\tmissingIndices = isMissing( x, encoding );\n\tn = xnew.length;\n\ttotalNoTies = 0;\n\tranks = new Array( n );\n\tordered = order( xnew );\n\n\tif ( method === 'ordinal' ) {\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tranks[ ordered[ i ] ] = i + 1;\n\t\t}\n\t} else {\n\t\tnoDuplicates = 0;\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tiPlusOne = i + 1;\n\t\t\tif (\n\t\t\t\t( i === n - 1 ) ||\n\t\t\t\t( xnew[ ordered[i] ] !== xnew[ ordered[ iPlusOne ] ] )\n\t\t\t) {\n\t\t\t\tswitch ( method ) {\n\t\t\t\tcase 'average':\n\t\t\t\tdefault:\n\t\t\t\t\ttieRank = iPlusOne - ( 0.5 * noDuplicates );\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'min':\n\t\t\t\t\ttieRank = iPlusOne - noDuplicates;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'max':\n\t\t\t\t\ttieRank = iPlusOne;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'dense':\n\t\t\t\t\ttieRank = iPlusOne - noDuplicates - totalNoTies;\n\t\t\t\t\ttotalNoTies += noDuplicates;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tfor ( j = i - noDuplicates; j < iPlusOne; j++ ) {\n\t\t\t\t\tranks[ ordered[ j ] ] = tieRank;\n\t\t\t\t}\n\t\t\t\tnoDuplicates = 0;\n\t\t\t} else {\n\t\t\t\tnoDuplicates += 1;\n\t\t\t}\n\t\t}\n\t}\n\n\tif ( missing === 'first' ) {\n\t\tcountMissing = sum( missingIndices );\n\t\tj = 1;\n\t\tfinalRanks = new Array( missingIndices.length );\n\t\tfor ( i = 0; i < missingIndices.length; i++ ) {\n\t\t\tif ( missingIndices[ i ] ) {\n\t\t\t\tfinalRanks[ i ] = j;\n\t\t\t\tj += 1;\n\t\t\t} else {\n\t\t\t\tfinalRanks[ i ] = ranks.shift() + countMissing;\n\t\t\t}\n\t\t}\n\t\treturn finalRanks;\n\t}\n\tif ( missing === 'last' ) {\n\t\tfinalRanks = new Array( missingIndices.length );\n\t\tfor ( i = 0; i < missingIndices.length; i++ ) {\n\t\t\tif ( missingIndices[ i ] ) {\n\t\t\t\tfinalRanks[ i ] = i + ranks.length + 1;\n\t\t\t} else {\n\t\t\t\tfinalRanks[ i ] = ranks.shift();\n\t\t\t}\n\t\t}\n\t\treturn finalRanks;\n\t}\n\t// Case: missing = 'remove'\n\treturn ranks;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ranks;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute ranks for the values of an array-like object.\n*\n* @module @stdlib/stats/ranks\n*\n* @example\n* var ranks = require( '@stdlib/stats/ranks' );\n*\n* var arr = [ 1.1, 2.0, 3.5, 0.0, 2.4 ];\n* var out = ranks( arr );\n* // returns [ 2, 3, 5, 1, 4 ]\n*\n* // Ties are averaged:\n* arr = [ 2, 2, 1, 4, 3 ];\n* out = ranks ( arr );\n* // returns [ 2.5, 2.5, 1, 5, 4 ];\n*\n* // Missing values are placed last:\n* arr = [ null, 2, 2, 1, 4, 3, NaN, NaN ];\n* out = ranks( arr );\n* // returns [ 6, 2.5, 2.5, 1, 5, 4, 7 ,8 ]\n*/\n\n// MODULES //\n\nvar ranks = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ranks;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Computes the median of an array.\n*\n* @param {Array} arr - input array\n* @returns {number} median value\n*/\nfunction median( arr ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar d;\n\tvar i;\n\n\tif ( !len ) {\n\t\treturn null;\n\t}\n\n\t// Copy and sort data in ascending order:\n\td = [];\n\tfor ( i = 0; i < len; i++ ) {\n\t\td.push( arr[ i ] );\n\t}\n\td.sort( ascending );\n\n\t// Get the middle index:\n\tid = floor( len / 2 );\n\n\tif ( len % 2 ) {\n\t\t// The number of elements is not evenly divisible by two, hence we have a middle index:\n\t\treturn d[ id ];\n\t}\n\t// Even number of elements, so must take the mean of the two middle values:\n\treturn ( d[ id-1 ] + d[ id ] ) / 2.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = median;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert/is-array' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar qnorm = require( './../../base/dists/normal/quantile' );\nvar chisqCDF = require( './../../base/dists/chisquare/cdf' );\nvar group = require( '@stdlib/utils/group' );\nvar ranks = require( './../../ranks' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar indexOf = require( '@stdlib/utils/index-of' );\nvar format = require( '@stdlib/string/format' );\nvar median = require( './median.js' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// FUNCTIONS //\n\n/**\n* Returns an array of a chosen length filled with the supplied value.\n*\n* @private\n* @param {*} val - value to repeat\n* @param {NonNegativeInteger} len - array length\n* @returns {Array} filled array\n*/\nfunction repeat( val, len ) {\n\tvar out = new Array( len );\n\tvar i;\n\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ i ] = val;\n\t}\n\treturn out;\n}\n\n\n// MAIN //\n\n/**\n* Computes the Fligner-Killeen test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = fligner( x, y, z );\n* // returns {...}\n*/\nfunction fligner() {\n\tvar variance;\n\tvar options;\n\tvar ngroups;\n\tvar levels;\n\tvar groups;\n\tvar scores;\n\tvar table;\n\tvar alpha;\n\tvar delta;\n\tvar args;\n\tvar mean;\n\tvar opts;\n\tvar pval;\n\tvar sums;\n\tvar xabs;\n\tvar stat;\n\tvar err;\n\tvar loc;\n\tvar out;\n\tvar df;\n\tvar M2;\n\tvar a;\n\tvar n;\n\tvar x;\n\tvar i;\n\tvar j;\n\n\targs = [];\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.groups ) {\n\t\tgroups = opts.groups;\n\t\ttable = group( arguments[ 0 ], groups );\n\t\tlevels = objectKeys( table );\n\t\tngroups = levels.length;\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of groups. `%s` array must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( table[ levels[ i ] ] );\n\t\t}\n\t} else {\n\t\tgroups = [];\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targs.push( arguments[ i ] );\n\t\t\tgroups = groups.concat( repeat( i, arguments[ i ].length ) );\n\t\t}\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tx = [];\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tif ( !isCollection( args[ i ] ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', args[ i ] ) );\n\t\t}\n\t\tif ( args[ i ].length === 0 ) {\n\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', args[ i ] ) );\n\t\t}\n\t\tloc = median( args[ i ] );\n\t\tfor ( j = 0; j < args[ i ].length; j++ ) {\n\t\t\targs[ i ][ j ] -= loc;\n\t\t}\n\t\tx = x.concat( args[ i ] );\n\t}\n\tn = x.length;\n\txabs = new Array( n );\n\tfor ( i = 0; i < n; i++ ) {\n\t\txabs[ i ] = abs( x[ i ] );\n\t}\n\tscores = ranks( xabs );\n\ta = new Array( n );\n\tmean = 0.0;\n\tM2 = 0.0;\n\tsums = repeat( 0.0, ngroups );\n\tfor ( i = 0; i < n; i++ ) {\n\t\ta[ i ] = qnorm( ( 1.0 + ( scores[ i ]/(n+1) ) ) / 2.0, 0.0, 1.0 );\n\t\tsums[ ( levels ) ? indexOf( levels, groups[i] ) : groups[i] ] += a[ i ];\n\t\tdelta = a[ i ] - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( a[ i ] - mean );\n\t}\n\tvariance = M2 / ( n - 1 );\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tstat += pow( sums[ i ], 2 ) / args[ i ].length;\n\t}\n\tstat = ( stat - ( n * pow( mean, 2 ) ) ) / variance;\n\tdf = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, df );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', 'Fligner-Killeen test of homogeneity of variances' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = fligner;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Fligner-Killeen test for equal variances.\n*\n* @module @stdlib/stats/fligner-test\n*\n* @example\n* var flignerTest = require( '@stdlib/stats/fligner-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = flignerTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar flignerTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = flignerTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample Pearson product-moment correlation coefficient.\n*\n* ## Method\n*\n* -   We begin by defining the co-moment \\\\(C_n\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{n} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n-1} \\\\\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n-1}\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_n)}{n-1}\n*     \\end{align*}\n*     ```\n*\n* -   To calculate the corrected sample standard deviation, we can use Welford's method, which can be derived as follows. We can express the variance as\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* -   To compute the corrected sample standard deviation, we apply Bessel's correction and take the square root.\n*\n* -   The sample Pearson product-moment correlation coefficient can thus be calculated as\n*\n*     ```tex\n*     r = \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_x \\sigma_y}\n*     ```\n*\n*     where \\\\(\\sigma_x\\\\) and \\\\(\\sigma_y\\\\) are the corrected sample standard deviations for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrpcorr();\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0, 3.14 );\n* // returns ~-1.0\n*\n* r = accumulator();\n* // returns ~-1.0\n*\n* @example\n* var accumulator = incrpcorr( 2.0, -3.0 );\n*/\nfunction incrpcorr( meanx, meany ) {\n\tvar M2x;\n\tvar M2y;\n\tvar dy1;\n\tvar dy2;\n\tvar dy;\n\tvar dx;\n\tvar mx;\n\tvar my;\n\tvar sx;\n\tvar sy;\n\tvar C;\n\tvar N;\n\n\tM2x = 0.0;\n\tM2y = 0.0;\n\tC = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tmx = meanx;\n\t\tmy = meany;\n\t\treturn accumulator2;\n\t}\n\tmx = 0.0;\n\tmy = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation coefficient. If not provided input values, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample correlation coefficient or null\n\t*/\n\tfunction accumulator1( x, y ) {\n\t\tvar n;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2x ) || isnan( M2y ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn ( C/(N-1) ) / ( sx*sy );\n\t\t}\n\t\tN += 1;\n\n\t\tdx = x - mx;\n\t\tmx += dx / N;\n\t\tM2x += dx * ( x-mx );\n\n\t\tdy1 = y - my;\n\t\tmy += dy1 / N;\n\t\tdy2 = y - my;\n\t\tM2y += dy2 * dy1;\n\n\t\tC += dx * dy2;\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2x ) || isnan( M2y ) ) ? NaN : 0.0;\n\t\t}\n\t\tn = N - 1;\n\t\tsx = sqrt( M2x/n );\n\t\tsy = sqrt( M2y/n );\n\t\treturn ( C/n ) / ( sx*sy ); // Note: why all the dividing by `N`? To avoid overflow.\n\t}\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation coefficient. If not provided input values, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample correlation coefficient or null\n\t*/\n\tfunction accumulator2( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( C/N ) / ( sx*sy );\n\t\t}\n\t\tN += 1;\n\n\t\tdx = x - mx;\n\t\tM2x += dx * dx;\n\n\t\tdy = y - my;\n\t\tM2y += dy * dy;\n\n\t\tC += dx * dy;\n\t\tsx = sqrt( M2x/N );\n\t\tsy = sqrt( M2y/N );\n\t\treturn ( C/N ) / ( sx*sy ); // Note: why all the dividing by `N`? To avoid overflow.\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/pcorr\n*\n* @example\n* var incrpcorr = require( '@stdlib/stats/incr/pcorr' );\n*\n* var accumulator = incrpcorr();\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0, 3.14 );\n* // returns ~-1.0\n*\n* r = accumulator();\n* // returns ~-1.0\n*/\n\n// MODULES //\n\nvar incrpcorr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrpcorr = require( './../../../incr/pcorr' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*\n* @example\n* var accumulator = incrapcorr( 2.0, -3.0 );\n*/\nfunction incrapcorr( meanx, meany ) {\n\tvar acc;\n\tvar N;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tacc = incrpcorr( meanx, meany );\n\t} else {\n\t\tacc = incrpcorr();\n\t}\n\tN = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation coefficient. If not provided input values, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn abs( acc() );\n\t\t}\n\t\tN += 1;\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrapcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample absolute Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/apcorr\n*\n* @example\n* var incrapcorr = require( '@stdlib/stats/incr/apcorr' );\n*\n* var accumulator = incrapcorr();\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator();\n* // returns ~1.0\n*/\n\n// MODULES //\n\nvar incrapcorr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrapcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns an accumulator function which incrementally updates a count.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrcount();\n*\n* var count = accumulator();\n* // returns 0\n*\n* count = accumulator( 2.0 );\n* // returns 1\n*\n* count = accumulator( -5.0 );\n* // returns 2\n*\n* count = accumulator();\n* // returns 2\n*/\nfunction incrcount() {\n\tvar count = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated count. If not provided a value, the accumulator function returns the current count.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {number} count\n\t*/\n\tfunction accumulator() {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn count;\n\t\t}\n\t\tcount += 1;\n\t\treturn count;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrcount;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a count incrementally.\n*\n* @module @stdlib/stats/incr/count\n*\n* @example\n* var incrcount = require( '@stdlib/stats/incr/count' );\n*\n* var accumulator = incrcount();\n*\n* var count = accumulator();\n* // returns 0\n*\n* count = accumulator( 2.0 );\n* // returns 1\n*\n* count = accumulator( -5.0 );\n* // returns 2\n*\n* count = accumulator();\n* // returns 2\n*/\n\n// MODULES //\n\nvar incrcount = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrcount;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample covariance.\n*\n* ## Method\n*\n* -   We begin by defining the co-moment \\\\(C_n\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{N} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n-1} \\\\\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})}{n-1}\n*     &= \\frac{C_{n-1} + (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_n)}{n-1}\n*     \\end{align*}\n*     ```\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrcovariance();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0, 3.14 );\n* // returns ~-7.49\n*\n* v = accumulator();\n* // returns ~-7.49\n*\n* @example\n* var accumulator = incrcovariance( 2.0, -3.0 );\n*/\nfunction incrcovariance( meanx, meany ) {\n\tvar dx;\n\tvar mx;\n\tvar my;\n\tvar C;\n\tvar N;\n\n\tC = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tmx = meanx;\n\t\tmy = meany;\n\t\treturn accumulator2;\n\t}\n\tmx = 0.0;\n\tmy = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated unbiased sample covariance. If not provided input values, the accumulator function returns the current unbiased sample covariance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} unbiased sample covariance or null\n\t*/\n\tfunction accumulator1( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( C ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn C / (N-1);\n\t\t}\n\t\tN += 1;\n\t\tdx = x - mx;\n\t\tmx += dx / N;\n\t\tmy += ( y-my ) / N;\n\t\tC += dx * ( y-my ); // Note: repeated `y-my` is intentional, as `my` is updated when used here\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( C ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn C / (N-1);\n\t}\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated unbiased sample covariance. If not provided input values, the accumulator function returns the current unbiased sample covariance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} unbiased sample covariance or null\n\t*/\n\tfunction accumulator2( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn C / N;\n\t\t}\n\t\tN += 1;\n\t\tC += ( x-mx ) * ( y-my );\n\t\treturn C / N;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrcovariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an unbiased sample covariance incrementally.\n*\n* @module @stdlib/stats/incr/covariance\n*\n* @example\n* var incrcovariance = require( '@stdlib/stats/incr/covariance' );\n*\n* var accumulator = incrcovariance();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0, 3.14 );\n* // returns ~-7.49\n*\n* v = accumulator();\n* // returns ~-7.49\n*/\n\n// MODULES //\n\nvar incrcovariance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrcovariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isSquareMatrix = require( '@stdlib/assert/is-square-matrix' );\nvar isVectorLike = require( '@stdlib/assert/is-vector-like' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar ctor = require( '@stdlib/ndarray/ctor' );\nvar bctor = require( '@stdlib/ndarray/base/ctor' );\nvar numel = require( '@stdlib/ndarray/base/numel' );\nvar format = require( '@stdlib/string/format' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a matrix.\n*\n* @private\n* @param {PositiveInteger} n - matrix order\n* @param {boolean} bool - boolean indicating whether to create a low-level ndarray\n* @returns {ndarray} matrix\n*/\nfunction createMatrix( n, bool ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\tvar f;\n\n\tif ( bool ) {\n\t\tf = bctor;\n\t} else {\n\t\tf = ctor;\n\t}\n\tbuffer = new Float64Array( n*n );\n\tshape = [ n, n ];\n\tstrides = [ n, 1 ];\n\treturn f( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n/**\n* Returns a vector.\n*\n* @private\n* @param {PositiveInteger} N - number of elements\n* @returns {ndarray} vector\n*/\nfunction createVector( N ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\n\tbuffer = new Float64Array( N );\n\tshape = [ N ];\n\tstrides = [ 1 ];\n\n\treturn bctor( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample covariance matrix.\n*\n* ## Method\n*\n* -   For each unbiased sample covariance, we begin by defining the co-moment \\\\(C_{jn}\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{n} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{C_{n-1}}{n-1} + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n-1}\n*     \\end{align*}\n*     ```\n*\n* @param {(PositiveInteger|ndarray)} out - order of the covariance matrix or a square 2-dimensional output ndarray for storing the covariance matrix\n* @param {ndarray} [means] - mean values\n* @throws {TypeError} first argument must be either a positive integer or a 2-dimensional ndarray having equal dimensions\n* @throws {TypeError} second argument must be a 1-dimensional ndarray\n* @throws {Error} number of means must match covariance matrix dimensions\n* @returns {Function} accumulator function\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n*\n* // Create an output covariance matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var cov = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a covariance matrix accumulator:\n* var accumulator = incrcovmat( cov );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === cov );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the covariance matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\nfunction incrcovmat( out, means ) {\n\tvar order;\n\tvar cov;\n\tvar mu;\n\tvar C;\n\tvar d;\n\tvar N;\n\n\tN = 0;\n\tif ( isPositiveInteger( out ) ) {\n\t\torder = out;\n\t\tcov = createMatrix( order, false );\n\t} else if ( isSquareMatrix( out ) ) {\n\t\torder = out.shape[ 0 ];\n\t\tcov = out;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must either specify the order of the covariance matrix or be a square 2-dimensional ndarray for storing the covariance matrix. Value: `%s`.', out ) );\n\t}\n\t// Create a scratch array for storing residuals (i.e., `x_i - xbar_{i-1}`):\n\td = new Float64Array( order );\n\n\t// Create a low-level scratch matrix for storing co-moments:\n\tC = createMatrix( order, true );\n\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isVectorLike( means ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a 1-dimensional ndarray. Value: `%s`.', means ) );\n\t\t}\n\t\tif ( numel( means.shape ) !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. The number of elements (means) in the second argument must match covariance matrix dimensions. Expected: %u. Actual: %u.', order, numel( means.shape ) ) );\n\t\t}\n\t\tmu = means; // TODO: should we copy this? Otherwise, internal state could be \"corrupted\" due to mutation outside the accumulator\n\t\treturn accumulator2;\n\t}\n\t// Create an ndarray vector for storing sample means (note: an ndarray interface is not necessary, but it reduces implementation complexity by ensuring a consistent abstraction for accessing and updating sample means):\n\tmu = createVector( order );\n\n\treturn accumulator1;\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated unbiased sample covariance matrix. If not provided a data vector, the accumulator function returns the current unbiased sample covariance matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match covariance matrix dimensions\n\t* @returns {(ndarray|null)} unbiased sample covariance matrix or null\n\t*/\n\tfunction accumulator1( v ) {\n\t\tvar covij;\n\t\tvar denom;\n\t\tvar rdx;\n\t\tvar cij;\n\t\tvar m;\n\t\tvar n;\n\t\tvar r;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn cov;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tn = N;\n\t\tN += 1;\n\t\tr = n / N;\n\n\t\tdenom = n || 1; // Bessel's correction (avoiding divide-by-zero below)\n\n\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\tm = mu.get( i );\n\n\t\t\t// Compute the residual:\n\t\t\td[ i ] = v.get( i ) - m;\n\n\t\t\t// Update the sample mean:\n\t\t\tm += d[ i ] / N;\n\t\t\tmu.set( i, m );\n\n\t\t\t// Update the co-moments and covariance matrix, recognizing that the covariance matrix is symmetric...\n\t\t\trdx = r * d[ i ]; // if `n=0`, `r=0.0`\n\t\t\tfor ( j = 0; j <= i; j++ ) {\n\t\t\t\tcij = C.get( i, j ) + ( rdx*d[j] );\n\t\t\t\tC.set( i, j, cij );\n\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\tcovij = cij / denom;\n\t\t\t\tcov.set( i, j, covij );\n\t\t\t\tcov.set( j, i, covij ); // via symmetry\n\t\t\t}\n\t\t}\n\t\treturn cov;\n\t}\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated unbiased sample covariance matrix. If not provided a data vector, the accumulator function returns the current unbiased sample covariance matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match covariance matrix dimensions\n\t* @returns {(ndarray|null)} unbiased sample covariance matrix or null\n\t*/\n\tfunction accumulator2( v ) {\n\t\tvar covij;\n\t\tvar cij;\n\t\tvar di;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn cov;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match covariance matrix dimensions. Expected: `%u`. Actual: `%u`.', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tN += 1;\n\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t// Compute the residual:\n\t\t\td[ i ] = v.get( i ) - mu.get( i );\n\n\t\t\t// Update the co-moments and covariance matrix, recognizing that the covariance matrix is symmetric...\n\t\t\tdi = d[ i ];\n\t\t\tfor ( j = 0; j <= i; j++ ) {\n\t\t\t\tcij = C.get( i, j ) + ( di*d[j] );\n\t\t\t\tC.set( i, j, cij );\n\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\tcovij = cij / N;\n\t\t\t\tcov.set( i, j, covij );\n\t\t\t\tcov.set( j, i, covij ); // via symmetry\n\t\t\t}\n\t\t}\n\t\treturn cov;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrcovmat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an unbiased sample covariance matrix incrementally.\n*\n* @module @stdlib/stats/incr/covmat\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n* var incrcovmat = require( '@stdlib/stats/incr/covmat' );\n*\n* // Create an output covariance matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var cov = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a covariance matrix accumulator:\n* var accumulator = incrcovmat( cov );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === cov );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the covariance matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar incrcovmat = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrcovmat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the coefficient of variation (CV).\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrcv();\n*\n* var cv = accumulator();\n* // returns null\n*\n* cv = accumulator( 2.0 );\n* // returns 0.0\n*\n* cv = accumulator( 1.0 );\n* // returns ~0.47\n*\n* cv = accumulator();\n* // returns ~0.47\n*\n* @example\n* var accumulator = incrcv( 3.14 );\n*/\nfunction incrcv( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t\t}\n\t\t\treturn sqrt( M2/(N-1) ) / mu;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t}\n\t\treturn sqrt( M2/(N-1) ) / mu;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sqrt( M2/N ) / mu;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn sqrt( M2/N ) / mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrcv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the coefficient of variation (CV) incrementally.\n*\n* @module @stdlib/stats/incr/cv\n*\n* @example\n* var incrcv = require( '@stdlib/stats/incr/cv' );\n*\n* var accumulator = incrcv();\n*\n* var cv = accumulator();\n* // returns null\n*\n* cv = accumulator( 2.0 );\n* // returns 0.0\n*\n* cv = accumulator( 1.0 );\n* // returns ~0.47\n*\n* cv = accumulator();\n* // returns ~0.47\n*/\n\n// MODULES //\n\nvar incrcv = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrcv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted mean.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwmean( 0.5 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( -5.0 );\n* // returns -1.5\n*\n* v = accumulator();\n* // returns -1.5\n*/\nfunction increwmean( alpha ) {\n\tvar m;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative number. Value: `%s`.', alpha ) );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `%f`.', alpha ) );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( m === void 0 ) ? null : m;\n\t\t}\n\t\tif ( m === void 0 ) {\n\t\t\tm = x;\n\t\t} else {\n\t\t\tm += alpha * ( x-m );\n\t\t}\n\t\treturn m;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = increwmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exponentially weighted mean incrementally.\n*\n* @module @stdlib/stats/incr/ewmean\n*\n* @example\n* var increwmean = require( '@stdlib/stats/incr/ewmean' );\n*\n* var accumulator = increwmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( -5.0 );\n* // returns -1.5\n*\n* v = accumulator();\n* // returns -1.5\n*/\n\n// MODULES //\n\nvar increwmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = increwmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted standard deviation.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwstdev( 0.5 );\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns 3.5\n*\n* s = accumulator();\n* // returns 3.5\n*/\nfunction increwstdev( alpha ) {\n\tvar incr;\n\tvar s2;\n\tvar s;\n\tvar r;\n\tvar m;\n\tvar c;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative number. Value: `%s`.', alpha ) );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `%f`.', alpha ) );\n\t}\n\tc = 1.0 - alpha;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated standard deviation. If not provided a value, the accumulator function returns the current standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} standard deviation or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( s === void 0 ) ? null : s;\n\t\t}\n\t\tif ( s === void 0 ) {\n\t\t\tm = x;\n\t\t\ts2 = 0.0;\n\t\t} else {\n\t\t\tr = x - m;\n\t\t\tincr = alpha * r;\n\t\t\tm += incr;\n\t\t\ts2 = c * ( s2+(r*incr) );\n\t\t}\n\t\ts = sqrt( s2 );\n\t\treturn s;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = increwstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exponentially weighted standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/ewstdev\n*\n* @example\n* var increwstdev = require( '@stdlib/stats/incr/ewstdev' );\n*\n* var accumulator = increwstdev();\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns 3.5\n*\n* s = accumulator();\n* // returns 3.5\n*/\n\n// MODULES //\n\nvar increwstdev = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = increwstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an exponentially weighted variance.\n*\n* @param {NonNegativeNumber} alpha - smoothing factor\n* @throws {TypeError} must provide a nonnegative number\n* @throws {RangeError} must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = increwvariance( 0.5 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0 );\n* // returns 12.25\n*\n* v = accumulator();\n* // returns 12.25\n*/\nfunction increwvariance( alpha ) {\n\tvar incr;\n\tvar s2;\n\tvar r;\n\tvar m;\n\tvar c;\n\tif ( !isNonNegativeNumber( alpha ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a nonnegative number. Value: `%s`.', alpha ) );\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Must provide a nonnegative number on the interval [0,1]. Value: `%f`.', alpha ) );\n\t}\n\tc = 1.0 - alpha;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated variance. If not provided a value, the accumulator function returns the current variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} variance or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( s2 === void 0 ) ? null : s2;\n\t\t}\n\t\tif ( s2 === void 0 ) {\n\t\t\tm = x;\n\t\t\ts2 = 0.0;\n\t\t} else {\n\t\t\tr = x - m;\n\t\t\tincr = alpha * r;\n\t\t\tm += incr;\n\t\t\ts2 = c * ( s2+(r*incr) );\n\t\t}\n\t\treturn s2;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = increwvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an exponentially weighted variance incrementally.\n*\n* @module @stdlib/stats/incr/ewvariance\n*\n* @example\n* var increwvariance = require( '@stdlib/stats/incr/ewvariance' );\n*\n* var accumulator = increwvariance();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0 );\n* // returns 12.25\n*\n* v = accumulator();\n* // returns 12.25\n*/\n\n// MODULES //\n\nvar increwvariance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = increwvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a geometric mean.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrgmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator();\n* // returns ~3.16\n*/\nfunction incrgmean() {\n\tvar sum;\n\tvar N;\n\tvar v;\n\n\tsum = 0.0;\n\tN = 0;\n\tv = 1;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} geometric mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn v;\n\t\t}\n\t\tN += 1;\n\t\tsum += ln( x );\n\t\tv = exp( sum/N );\n\t\treturn v;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a geometric mean incrementally.\n*\n* @module @stdlib/stats/incr/gmean\n*\n* @example\n* var incrgmean = require( '@stdlib/stats/incr/gmean' );\n*\n* var accumulator = incrgmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator();\n* // returns ~3.16\n*/\n\n// MODULES //\n\nvar incrgmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes minimum and maximum values.\n*\n* @param {Collection} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminmax();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\nfunction incrminmax( out ) {\n\tvar minmax;\n\tvar min;\n\tvar max;\n\tvar FLG;\n\tif ( arguments.length === 0 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tminmax = out;\n\t}\n\tmin = PINF;\n\tmax = NINF;\n\tFLG = false;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum values. If not provided a value, the accumulator function returns the current minimum and maximum values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( FLG === false ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tminmax[ 0 ] = min; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tminmax[ 1 ] = max;\n\t\t\treturn minmax;\n\t\t}\n\t\tFLG = true;\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t} else {\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrminmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum and maximum incrementally.\n*\n* @module @stdlib/stats/incr/minmax\n*\n* @example\n* var incrminmax = require( '@stdlib/stats/incr/minmax' );\n*\n* var accumulator = incrminmax();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar incrminmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrminmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean and corrected sample standard deviation.\n*\n* ## Method\n*\n\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {Collection} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanstdev();\n*\n* var ms = accumulator();\n* // returns null\n*\n* ms = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* ms = accumulator( -5.0 );\n* // returns [ -1.5, ~4.95 ]\n*\n* ms = accumulator( 3.0 );\n* // returns [ 0.0, ~4.36 ]\n*\n* ms = accumulator( 5.0 );\n* // returns [ 1.25, ~4.35 ]\n*\n* ms = accumulator();\n* // returns [ 1.25, ~4.35 ]\n*/\nfunction incrmeanstdev( out ) {\n\tvar meanstdev;\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\tif ( arguments.length === 0 ) {\n\t\tmeanstdev = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tmeanstdev = out;\n\t}\n\tM2 = 0.0;\n\tmu = 0.0;\n\tN = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated results. If not provided a value, the accumulator function returns the current results.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tmeanstdev[ 0 ] = mu; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tif ( N === 1 ) {\n\t\t\t\tif ( isnan( M2 ) ) {\n\t\t\t\t\tmeanstdev[ 1 ] = NaN;\n\t\t\t\t} else {\n\t\t\t\t\tmeanstdev[ 1 ] = 0.0;\n\t\t\t\t}\n\t\t\t\treturn meanstdev;\n\t\t\t}\n\t\t\tmeanstdev[ 1 ] = sqrt( M2/(N-1) );\n\t\t\treturn meanstdev;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\n\t\tmeanstdev[ 0 ] = mu;\n\t\tif ( N < 2 ) {\n\t\t\tif ( isnan( M2 ) ) {\n\t\t\t\tmeanstdev[ 1 ] = NaN;\n\t\t\t} else {\n\t\t\t\tmeanstdev[ 1 ] = 0.0;\n\t\t\t}\n\t\t\treturn meanstdev;\n\t\t}\n\t\tmeanstdev[ 1 ] = sqrt( M2/(N-1) );\n\t\treturn meanstdev;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean and corrected sample standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/meanstdev\n*\n* @example\n* var incrmeanstdev = require( '@stdlib/stats/incr/meanstdev' );\n*\n* var accumulator = incrmeanstdev();\n*\n* var ms = accumulator();\n* // returns null\n*\n* ms = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* ms = accumulator( -5.0 );\n* // returns [ -1.5, ~4.95 ]\n*\n* ms = accumulator( 3.0 );\n* // returns [ 0.0, ~4.36 ]\n*\n* ms = accumulator( 5.0 );\n* // returns [ 1.25, ~4.35 ]\n*\n* ms = accumulator();\n* // returns [ 1.25, ~4.35 ]\n*/\n\n// MODULES //\n\nvar incrmeanstdev = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sign = require( '@stdlib/math/base/special/signum' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for a Student's t distribution with degrees of freedom `v` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.376\n*\n* @example\n* var y = quantile( 0.1, 1.0 );\n* // returns ~-3.078\n*\n* @example\n* var y = quantile( 0.5, 0.1 );\n* // returns 0.0\n*\n* @example\n* var y = quantile( -0.2, 0.1 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, v ) {\n\tvar prob;\n\tvar xs;\n\tif (\n\t\tisnan( v ) ||\n\t\tisnan( p ) ||\n\t\tv <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\tprob = ( p > 0.5 ) ? 1.0 - p : p;\n\txs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );\n\treturn sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sign = require( '@stdlib/math/base/special/signum' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 0.5 );\n* var y = quantile( 0.5 );\n* // returns 0.0\n*\n* y = quantile( 0.8 );\n* // returns ~2.513\n*\n* y = quantile( 1.0 );\n* // returns Infinity\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar prob;\n\t\tvar xs;\n\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tprob = ( p > 0.5 ) ? 1.0 - p : p;\n\t\txs = kernelBetaincinv( v / 2.0, 0.5, 2.0 * prob, 1.0 - (2.0 * prob) );\n\t\treturn sign( p - 0.5 ) * sqrt( v * xs[ 1 ] / xs[ 0 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for a Student's t distribution.\n*\n* @module @stdlib/stats/base/dists/t/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/t/quantile' );\n*\n* var y = quantile( 0.8, 1.0 );\n* // returns ~1.376\n*\n* y = quantile( 0.1, 1.0 );\n* // returns ~-3.078\n*\n* y = quantile( 0.5, 0.1 );\n* // returns 0.0\n*\n* var myquantile = quantile.factory( 4.0 );\n*\n* y = myquantile( 0.2 );\n* // returns ~-0.941\n*\n* y = myquantile( 0.9 );\n* // returns ~1.533\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quantile = require( './quantile.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {NonNegativeInteger} [options.init] - number of data points used to compute initial statistics\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n*\n* var options = {\n*     'alpha': 0.05,\n*     'alernative': 'two-sided',\n*     'init': 100\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be on the interval [0,1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'init' ) ) {\n\t\topts.init = options.init;\n\t\tif ( !isNonNegativeInteger( opts.init ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'init', opts.init ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar incrminmax = require( './../../../incr/minmax' );\nvar incrmeanstdev = require( './../../../incr/meanstdev' );\nvar copy = require( '@stdlib/utils/copy' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar tQuantile = require( './../../../base/dists/t/quantile' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally performs Grubbs' test for detecting outliers.\n*\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis ('two-sided', 'min', 'max')\n* @param {NonNegativeInteger} [options.init=100] - number of data points used to compute initial statistics\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `alpha` option must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var rnorm = require( '@stdlib/random/base/normal' );\n*\n* var accumulator;\n* var opts;\n* var res;\n* var i;\n*\n* opts = {\n*     'init': 100\n* };\n*\n* accumulator = incrgrubbs( opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\nfunction incrgrubbs() {\n\tvar meanstdev;\n\tvar results;\n\tvar minmax;\n\tvar opts;\n\tvar err;\n\tvar mm;\n\tvar ms;\n\tvar gc;\n\tvar df;\n\tvar N;\n\tvar G;\n\n\topts = copy( defaults );\n\tif ( arguments.length ) {\n\t\terr = validate( opts, arguments[ 0 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Initialize the results object:\n\tresults = {};\n\tsetReadOnlyAccessor( results, 'rejected', getRejected );\n\tsetReadOnly( results, 'alpha', opts.alpha );\n\tsetReadOnlyAccessor( results, 'criticalValue', getCriticalValue );\n\tsetReadOnlyAccessor( results, 'statistic', getStatistic );\n\tsetReadOnlyAccessor( results, 'df', getDOF );\n\tsetReadOnlyAccessor( results, 'mean', getMean );\n\tsetReadOnlyAccessor( results, 'sd', getStDev );\n\tsetReadOnlyAccessor( results, 'min', getMin );\n\tsetReadOnlyAccessor( results, 'max', getMax );\n\tsetReadOnly( results, 'alt', opts.alternative );\n\tsetReadOnly( results, 'method', 'Grubbs\\' Test' );\n\tsetReadOnly( results, 'print', print );\n\n\tN = 0;\n\tdf = 0;\n\tG = 0.0;\n\tgc = 0.0;\n\n\t// Initialize statistics accumulators:\n\tmm = [ 0.0, 0.0 ];\n\tminmax = incrminmax( mm );\n\n\tms = [ 0.0, 0.0 ];\n\tmeanstdev = incrmeanstdev( ms );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated Grubbs' test results. If not provided a value, the accumulator function returns the current Grubbs' test results.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(Object|null)} test results or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar sig;\n\t\tvar md;\n\t\tvar tc;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < opts.init || df <= 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\tN += 1;\n\n\t\t// Update model statistics:\n\t\tmeanstdev( x );\n\t\tminmax( x );\n\n\t\t// Compute the degrees of freedom:\n\t\tdf = N - 2;\n\n\t\tif ( N < opts.init || df <= 0 ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Compute the test statistic and significance level...\n\t\tif ( opts.alternative === 'min' ) {\n\t\t\tG = ( ms[0]-mm[0] ) / ms[ 1 ];\n\t\t\tsig = opts.alpha / N;\n\t\t} else if ( opts.alternative === 'max' ) {\n\t\t\tG = ( mm[1]-ms[0] ) / ms[ 1 ];\n\t\t\tsig = opts.alpha / N;\n\t\t} else { // two-sided\n\t\t\tmd = max( ms[0]-mm[0], mm[1]-ms[0] ); // maximum absolute deviation\n\t\t\tG = md / ms[ 1 ];\n\t\t\tsig = opts.alpha / (2*N);\n\t\t}\n\t\t// Compute the critical values:\n\t\ttc = tQuantile( 1.0-sig, df );\n\t\tgc = (N-1)*tc / sqrt( N*(df+(tc*tc)) );\n\n\t\treturn results;\n\t}\n\n\t/**\n\t* Returns a `boolean` indicating whether the null hypothesis should be rejected.\n\t*\n\t* @private\n\t* @returns {boolean} boolean indicating whether the null hypothesis should be rejected\n\t*/\n\tfunction getRejected() {\n\t\treturn ( G > gc );\n\t}\n\n\t/**\n\t* Returns the critical value.\n\t*\n\t* @private\n\t* @returns {number} critical value\n\t*/\n\tfunction getCriticalValue() {\n\t\treturn gc;\n\t}\n\n\t/**\n\t* Returns the test statistic.\n\t*\n\t* @private\n\t* @returns {number} test statistic\n\t*/\n\tfunction getStatistic() {\n\t\treturn G;\n\t}\n\n\t/**\n\t* Returns the degrees of freedom (DOF).\n\t*\n\t* @private\n\t* @returns {PositiveInteger} degrees of freedom\n\t*/\n\tfunction getDOF() {\n\t\treturn df;\n\t}\n\n\t/**\n\t* Returns the sample mean.\n\t*\n\t* @private\n\t* @returns {number} sample mean\n\t*/\n\tfunction getMean() {\n\t\treturn ms[ 0 ];\n\t}\n\n\t/**\n\t* Returns the corrected sample standard deviation.\n\t*\n\t* @private\n\t* @returns {number} corrected sample standard deviation\n\t*/\n\tfunction getStDev() {\n\t\treturn ms[ 1 ];\n\t}\n\n\t/**\n\t* Returns the sample minimum.\n\t*\n\t* @private\n\t* @returns {number} sample minimum\n\t*/\n\tfunction getMin() {\n\t\treturn mm[ 0 ];\n\t}\n\n\t/**\n\t* Returns the sample maximum.\n\t*\n\t* @private\n\t* @returns {number} sample maximum\n\t*/\n\tfunction getMax() {\n\t\treturn mm[ 1 ];\n\t}\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Object} [options] - options object\n\t* @param {PositiveInteger} [options.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [options.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted output\n\t*/\n\tfunction print( options ) {\n\t\tvar decision;\n\t\tvar digits;\n\t\tvar str;\n\n\t\tdigits = opts.digits;\n\t\tdecision = opts.decision;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( options.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', options.digits ) );\n\t\t\t\t}\n\t\t\t\tdigits = options.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( options.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', options.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = options.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Alternative hypothesis: ';\n\t\tif ( opts.alternative === 'max' ) {\n\t\t\tstr += 'The maximum value (' + mm[ 1 ] + ') is an outlier';\n\t\t} else if ( opts.alternative === 'min' ) {\n\t\t\tstr += 'The minimum value (' + mm[ 0 ] + ') is an outlier';\n\t\t} else { // two-sided\n\t\t\tstr += 'The ';\n\t\t\tif ( ms[0]-mm[0] > mm[1]-ms[0] ) {\n\t\t\t\tstr += 'minimum value (' + mm[ 0 ] + ')';\n\t\t\t} else {\n\t\t\t\tstr += 'maximum value (' + mm[ 1 ] + ')';\n\t\t\t}\n\t\t\tstr += ' is an outlier';\n\t\t}\n\t\tstr += '\\n\\n';\n\t\tstr += '    criticalValue: ' + roundn( gc, -digits ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( G, -digits ) + '\\n';\n\t\tstr += '    df: ' + df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( G > gc ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrgrubbs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Grubbs' test for outliers.\n*\n* @module @stdlib/stats/incr/grubbs\n*\n* @example\n* var rnorm = require( '@stdlib/random/base/normal' );\n* var incrgrubbs = require( '@stdlib/stats/incr/grubbs' );\n*\n* var accumulator;\n* var opts;\n* var res;\n* var i;\n*\n* opts = {\n*     'init': 100\n* };\n*\n* accumulator = incrgrubbs( opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean.\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{n} \\sum_{i=0}^{n-1} x_i \\\\\n*           &= \\frac{1}{n} \\biggl(x_{n-1} + \\sum_{i=0}^{n-2} x_i \\biggr) \\\\\n*           &= \\frac{1}{n} (x_{n-1} + (n-1)\\mu_{n-1}) \\\\\n*           &= \\mu_{n-1} + \\frac{1}{n} (x_{n-1} - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\nfunction incrmean() {\n\tvar mu;\n\tvar N;\n\n\tmu = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\tN += 1;\n\t\tmu += (x-mu) / N;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean incrementally.\n*\n* @module @stdlib/stats/incr/mean\n*\n* @example\n* var incrmean = require( '@stdlib/stats/incr/mean' );\n*\n* var accumulator = incrmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator();\n* // returns -1.5\n*/\n\n// MODULES //\n\nvar incrmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a harmonic mean.\n*\n* ## Method\n*\n* -   The harmonic mean of positive real numbers \\\\(x_0, x_1, \\ldots, x_{n-1}\\\\) is defined as\n*\n*     ```tex\n*     \\begin{align*}\n*     H &= \\frac{n}{\\frac{1}{x_0} + \\frac{1}{x_1} + \\cdots + \\frac{1}{x_{n-1}}} \\\\\n*       &= \\frac{n}{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}\n*     \\end{align*}\n*     ```\n*\n*     which may be expressed\n*\n*     ```tex\n*     H = \\biggl( \\frac{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}{n} \\biggr)^{-1}\n*     ```\n*\n* -   Accordingly, to compute the harmonic mean incrementally, we can simply compute the arithmetic mean of reciprocal values and then compute the reciprocal of the result.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrhmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator();\n* // returns ~2.86\n*/\nfunction incrhmean() {\n\tvar mean = incrmean();\n\tvar v;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated harmonic mean. If not provided a value, the accumulator function returns the current harmonic mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} harmonic mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( v === void 0 ) ? null : v;\n\t\t}\n\t\tv = 1.0 / mean( 1.0/x );\n\t\treturn v;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a harmonic mean incrementally.\n*\n* @module @stdlib/stats/incr/hmean\n*\n* @example\n* var incrhmean = require( '@stdlib/stats/incr/hmean' );\n*\n* var accumulator = incrhmean();\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator();\n* // returns ~2.86\n*/\n\n// MODULES //\n\nvar incrhmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample excess kurtosis.\n*\n* ## Method\n*\n* The algorithm computes the sample excess kurtosis using the formula for `G_2` in [Joanes and Gill 1998][@joanes:1998]. In contrast to alternatives for calculating a sample kurtosis, `G_2` is an unbiased estimator under normality.\n*\n* ## References\n*\n* -   Joanes, D. N., and C. A. Gill. 1998. \"Comparing measures of sample skewness and kurtosis.\" _Journal of the Royal Statistical Society: Series D (The Statistician)_ 47 (1). Blackwell Publishers Ltd: 183–89. doi:[10.1111/1467-9884.00122][@joanes:1998].\n*\n* [@joanes:1998]: http://dx.doi.org/10.1111/1467-9884.00122\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrkurtosis();\n*\n* var kurtosis = accumulator();\n* // returns null\n*\n* kurtosis = accumulator( 2.0 );\n* // returns null\n*\n* kurtosis = accumulator( 2.0 );\n* // returns null\n*\n* kurtosis = accumulator( -4.0 );\n* // returns null\n*\n* kurtosis = accumulator( -4.0 );\n* // returns -6.0\n*/\nfunction incrkurtosis() {\n\tvar deltaN2;\n\tvar deltaN;\n\tvar delta;\n\tvar term1;\n\tvar mean;\n\tvar tmp;\n\tvar g2;\n\tvar M2;\n\tvar M3;\n\tvar M4;\n\tvar N;\n\n\tdeltaN2 = 0.0;\n\tdeltaN = 0.0;\n\tdelta = 0.0;\n\tterm1 = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tM3 = 0.0;\n\tM4 = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample excess kurtosis. If not provided a value, the accumulator function returns the current corrected sample excess kurtosis.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample excess kurtosis\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < 4 ) {\n\t\t\t\treturn ( isnan( M4 ) ) ? NaN : null;\n\t\t\t}\n\t\t\t// Calculate the population excess kurtosis:\n\t\t\tg2 = (( N*M4 ) / ( M2*M2 )) - 3.0;\n\n\t\t\t// Return the corrected sample excess kurtosis:\n\t\t\treturn (N-1) / ( (N-2)*(N-3) ) * ( ((N+1)*g2) + 6.0 );\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mean;\n\t\tdeltaN = delta / N;\n\t\tdeltaN2 = deltaN * deltaN;\n\n\t\tterm1 = delta * deltaN * (N-1);\n\n\t\ttmp = term1 * deltaN2 * ((N*N) - (3*N) + 3);\n\t\ttmp += 6.0 * deltaN2 * M2;\n\t\ttmp -= 4.0 * deltaN * M3;\n\t\tM4 += tmp;\n\n\t\ttmp = term1 * deltaN * (N-2);\n\t\ttmp -= 3.0 * deltaN * M2;\n\t\tM3 += tmp;\n\n\t\tM2 += term1;\n\t\tmean += deltaN;\n\t\tif ( N < 4 ) {\n\t\t\treturn ( isnan( M4 ) ) ? NaN : null;\n\t\t}\n\t\t// Calculate the population excess kurtosis:\n\t\tg2 = (N*M4 / ( M2*M2 )) - 3.0;\n\n\t\t// Return the corrected sample excess kurtosis:\n\t\treturn (N-1) / ( (N-2)*(N-3) ) * ( ((N+1)*g2) + 6.0 );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrkurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a corrected sample excess kurtosis incrementally.\n*\n* @module @stdlib/stats/incr/kurtosis\n*\n* @example\n* var incrkurtosis = require( '@stdlib/stats/incr/kurtosis' );\n*\n* var accumulator = incrkurtosis();\n*\n* var kurtosis = accumulator( 2.0 );\n* // returns null\n*\n* kurtosis = accumulator( 2.0 );\n* // returns null\n*\n* kurtosis = accumulator( -4.0 );\n* // returns null\n*\n* kurtosis = accumulator( -4.0 );\n* // returns -6.0\n*/\n\n// MODULES //\n\nvar incrkurtosis = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrkurtosis;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar atan = require( '@stdlib/math/base/special/atan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean arctangent absolute percentage error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmaape();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~0.3218\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~0.6523\n*\n* m = accumulator();\n* // returns ~0.6523\n*/\nfunction incrmaape() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean arctangent absolute percentage error. If not provided input values, the accumulator function returns the current mean arctangent absolute percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean arctangent absolute percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( atan( abs( (a-f)/a ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmaape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean arctangent absolute percentage error incrementally.\n*\n* @module @stdlib/stats/incr/maape\n*\n* @example\n* var incrmaape = require( '@stdlib/stats/incr/maape' );\n*\n* var accumulator = incrmaape();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~0.3218\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~0.6523\n*\n* m = accumulator();\n* // returns ~0.6523\n*/\n\n// MODULES //\n\nvar incrmaape = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmaape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean absolute error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmae();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator();\n* // returns 4.0\n*/\nfunction incrmae() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean absolute error. If not provided input values, the accumulator function returns the current mean absolute error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean absolute error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( y-x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmae;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean absolute error incrementally.\n*\n* @module @stdlib/stats/incr/mae\n*\n* @example\n* var incrmae = require( '@stdlib/stats/incr/mae' );\n*\n* var accumulator = incrmae();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator();\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar incrmae = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmae;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sample Pearson product-moment correlation coefficient.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute a sample Pearson product-moment correlation coefficient.\n*\n* -   We begin by defining the covariance \\\\( \\operatorname{cov}_n(x,y) \\\\) for a window \\\\(n\\\\) as follows\n*\n*     ```tex\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n}\n*     ```\n*\n*     where \\\\(C_n\\\\) is the co-moment, which is defined as\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{N} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     and where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively, and \\\\(i=1\\\\) specifies the first element in a window.\n*\n* -   The sample mean is computed using the canonical formula\n*\n*     ```tex\n*     \\bar{x}_n = \\frac{1}{N} \\sum_{i=1}^{N} x_i\n*     ```\n*\n*     which, taking into account a previous window, can be expressed\n*\n*     ```tex\n*     \\begin{align*}\n*     \\bar{x}_n &= \\frac{1}{N} \\biggl( \\sum_{i=0}^{N-1} x_i - x_0 + x_N \\biggr) \\\\\n*               &= \\bar{x}_{n-1} + \\frac{x_N - x_0}{N}\n*     \\end{align*}\n*     ```\n*\n*     where \\\\(x_0\\\\) is the first value in the previous window.\n*\n* -   We can substitute into the co-moment equation\n*\n*     ```tex\n*     \\begin{align*}\n*     C_n &= \\sum_{i=1}^{N} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n ) \\\\\n*         &= \\sum_{i=1}^{N} \\biggl( x_i - \\bar{x}_{n-1} - \\frac{x_N - x_0}{N} \\biggr) \\biggl( y_i - \\bar{y}_{n-1} - \\frac{y_N - y_0}{N} \\biggr) \\\\\n*         &= \\sum_{i=1}^{N} \\biggl( \\Delta x_{i,n-1} - \\frac{x_N - x_0}{N} \\biggr) \\biggl( \\Delta y_{i,n-1} - \\frac{y_N - y_0}{N} \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\Delta x_{i,k} = x_i - \\bar{x}_{k}\n*     ```\n*\n* -   We can subsequently expand terms and apply a summation identity\n*\n*     ```tex\n*     \\begin{align*}\n*     C_n &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\biggl( \\frac{y_N - y_0}{N} \\biggr) - \\sum_{i=1}^{N} \\Delta y_{i,n-1} \\biggl( \\frac{x_N - x_0}{N} \\biggr) + \\sum_{i=1}^{N} \\biggl( \\frac{x_N - x_0}{N} \\biggr) \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\\\\n*         &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta x_{i,n-1} - \\biggl( \\frac{x_N - x_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta y_{i,n-1} + \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     \\end{align*}\n*     ```\n*\n* -   Let us first consider the second term which we can reorganize as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta x_{i,n-1} &= \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}{N} ( x_i - \\bar{x}_{n-1}) \\\\\n*         &= \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} x_i - \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} \\bar{x}_{n-1} \\\\\n*         &= (y_N - y_0) \\bar{x}_{n} - (y_N - y_0)\\bar{x}_{n-1} \\\\\n*         &= (y_N - y_0) (\\bar{x}_{n} - \\bar{x}_{n-1}) \\\\\n*         &= \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     \\end{align*}\n*     ```\n*\n* -   The third term can be reorganized in a manner similar to the second term such that\n*\n*     ```tex\n*     \\biggl( \\frac{x_N - x_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta y_{i,n-1} = \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     ```\n*\n* -   Substituting back into the equation for the co-moment\n*\n*     ```tex\n*     \\begin{align*}\n*     C_n &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\frac{(x_N - x_0)(y_N - y_0)}{N} - \\frac{(x_N - x_0)(y_N - y_0)}{N} + \\frac{(x_N - x_0)(y_N - y_0)}{N} \\\\\n*         &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     \\end{align*}\n*     ```\n*\n* -   Let us now consider the first term which we can modify as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} &= \\sum_{i=1}^{N} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) \\\\\n*         &= \\sum_{i=1}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) \\\\\n*         &= \\sum_{i=1}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) + (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1}) - (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1}) \\\\\n*         &= \\sum_{i=0}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) - (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1})\n*     \\end{align*}\n*     ```\n*\n*     where we recognize that the first term equals the co-moment for the previous window\n*\n*     ```tex\n*     C_{n-1} = \\sum_{i=0}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1})\n*     ```\n*\n*     In which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} &= C_{n-1} + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) - (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1}) \\\\\n*         &= C_{n-1} + \\Delta x_{N,n-1} \\Delta y_{N,n-1} - \\Delta x_{0,n-1} \\Delta y_{0,n-1}\n*     \\end{align*}\n*     ```\n*\n* -   Substituting into the equation for the co-moment\n*\n*     ```tex\n*     C_n = C_{n-1} + \\Delta x_{N,n-1} \\Delta y_{N,n-1} - \\Delta x_{0,n-1} \\Delta y_{0,n-1} - \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     ```\n*\n* -   We can make one further modification to the last term\n*\n*     ```tex\n*     \\begin{align*}\n*     \\frac{(x_N - x_0)(y_N - y_0)}{N} &= \\frac{(x_N - \\bar{x}_{n-1} - x_0 + \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1} - y_0 + \\bar{y}_{n-1})}{N} \\\\\n*         &= \\frac{(\\Delta x_{N,n-1} - \\Delta x_{0,n-1})(\\Delta y_{N,n-1} - \\Delta y_{0,n-1})}{N}\n*     \\end{align*}\n*     ```\n*\n*     which, upon substitution into the equation for the co-moment, yields\n*\n*     ```tex\n*     C_n = C_{n-1} + \\Delta x_{N,n-1} \\Delta y_{N,n-1} - \\Delta x_{0,n-1} \\Delta y_{0,n-1} - \\frac{(\\Delta x_{N,n-1} - \\Delta x_{0,n-1})(\\Delta y_{N,n-1} - \\Delta y_{0,n-1})}{N}\n*     ```\n*\n* -   To calculate corrected sample standard deviations, we first recognize that the corrected sample standard deviation is defined as the square root of the unbiased sample variance. Accordingly, in order to derive an update equation for the corrected sample standard deviation, deriving an update equation for the unbiased sample variance is sufficient.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_{n-1}\\\\) and the unbiased sample variance in a window \\\\(W_{n})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_n^2 - s_{n-1}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{n}^2 - (N-1)s_{n-1}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{i=1}^N x_i^2 - N\\bar{x}_{n}^2 \\biggr) - \\biggl(\\sum_{i=0}^{N-1} x_i^2 - N\\bar{x}_{n-1}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{n}^2 + N\\bar{x}_{n-1}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{n}^2 - \\bar{x}_{n-1}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{n} - \\bar{x}_{n-1})(\\bar{x}_{n} + \\bar{x}_{n-1})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{n} - \\bar{x}_{n-1} = \\frac{1}{N} \\biggl( \\sum_{i=1}^N x_i - \\sum_{i=0}^{N-1} x_i \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{n} + \\bar{x}_{n-1})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{n} + \\bar{x}_{n-1})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{n} - \\bar{x}_{n-1}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{n} + x_0 - \\bar{x}_{n-1})\n*     \\end{align*}\n*     ```\n*\n* -   To compute the corrected sample standard deviation, we apply Bessel's correction and take the square root.\n*\n* -   The sample Pearson product-moment correlation coefficient can thus be calculated as\n*\n*     ```tex\n*     r_n(x,y) = \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_{x,n} \\sigma_{y,n}}\n*     ```\n*\n*     where \\\\(\\sigma_{x,n}\\\\) and \\\\(\\sigma_{y,n}\\\\) are the corrected sample standard deviations for \\\\(x\\\\) and \\\\(y\\\\), respectively, for a window \\\\(n\\\\).\n*\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmpcorr( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0, 3.14 );\n* // returns ~-1.0\n*\n* r = accumulator( 3.0, -1.0 );\n* // returns ~-0.925\n*\n* r = accumulator( 5.0, -9.5 );\n* // returns ~-0.863\n*\n* r = accumulator();\n* // returns ~-0.863\n*\n* @example\n* var accumulator = incrmpcorr( 3, -2.0, 10.0 );\n*/\nfunction incrmpcorr( W, meanx, meany ) {\n\tvar buf;\n\tvar dx0;\n\tvar dxN;\n\tvar dy0;\n\tvar dyN;\n\tvar M2x;\n\tvar M2y;\n\tvar mx;\n\tvar my;\n\tvar sx;\n\tvar sy;\n\tvar dx;\n\tvar dy;\n\tvar wi;\n\tvar C;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( 2*W ); // strided array\n\tn = W - 1;\n\tM2x = 0.0;\n\tM2y = 0.0;\n\tC = 0.0;\n\twi = -1;\n\tN = 0;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tmx = meanx;\n\t\tmy = meany;\n\t\treturn accumulator2;\n\t}\n\tmx = 0.0;\n\tmy = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sample correlation coefficient. If not provided a value, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sample correlation coefficient or null\n\t*/\n\tfunction accumulator1( x, y ) {\n\t\tvar v1;\n\t\tvar v2;\n\t\tvar n1;\n\t\tvar k;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn ( C/(N-1) ) / ( sx*sy );\n\t\t\t}\n\t\t\treturn ( C/n ) / ( sx*sy );\n\t\t}\n\t\t// Update the window and strided array indices for managing the circular buffer:\n\t\twi = (wi+1) % W;\n\t\ti = 2 * wi;\n\n\t\t// Case: an incoming value is NaN, the sliding co-moment is automatically NaN...\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tC = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tbuf[ i+1 ] = y;\n\n\t\t\tN += 1;\n\n\t\t\tdx = x - mx;\n\t\t\tmx += dx / N;\n\t\t\tM2x += dx * ( x-mx );\n\n\t\t\tdy = y - my;\n\t\t\tmy += dy / N;\n\t\t\tdyN = y - my;\n\t\t\tM2y += dy * dyN;\n\n\t\t\tC += dx * dyN;\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tn1 = N - 1;\n\t\t\tsx = sqrt( M2x/n1 );\n\t\t\tsy = sqrt( M2y/n1 );\n\t\t\treturn ( C/n1 ) / ( sx*sy ); // Note: why all the dividing by `N`? To avoid overflow.\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Case: an outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) || isnan( buf[ i+1 ] ) ) {\n\t\t\tN = 1;\n\t\t\tmx = x;\n\t\t\tmy = y;\n\t\t\tM2x = 0.0;\n\t\t\tM2y = 0.0;\n\t\t\tC = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tj = 2 * k; // convert to a strided array index\n\t\t\t\tif ( j !== i ) {\n\t\t\t\t\tv1 = buf[ j ];\n\t\t\t\t\tv2 = buf[ j+1 ];\n\t\t\t\t\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tC = NaN;\n\t\t\t\t\t\tbreak; // co-moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\n\t\t\t\t\tdx = v1 - mx;\n\t\t\t\t\tmx += dx / N;\n\t\t\t\t\tM2x += dx * ( v1-mx );\n\n\t\t\t\t\tdy = v2 - my;\n\t\t\t\t\tmy += dy / N;\n\t\t\t\t\tdyN = v2 - my;\n\t\t\t\t\tM2y += dy * dyN;\n\n\t\t\t\t\tC += dx * dyN;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current co-moment nor the incoming values are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( C ) === false ) {\n\t\t\tdx0 = buf[ i ] - mx;\n\t\t\tdy0 = buf[ i+1 ] - my;\n\t\t\tdxN = x - mx;\n\t\t\tdyN = y - my;\n\t\t\tdx = dxN - dx0;\n\t\t\tdy = dyN - dy0;\n\t\t\tmx += dx / W;\n\t\t\tmy += dy / W;\n\t\t\tM2x += dx * ( dx0+(x-mx) );\n\t\t\tM2y += dy * ( dy0+(y-my) );\n\t\t\tC += (dxN*dyN) - (dx0*dy0) - ( dx*dy/W );\n\t\t}\n\t\t// Case: the current co-moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\t\tbuf[ i+1 ] = y;\n\n\t\tsx = sqrt( M2x/n );\n\t\tsy = sqrt( M2y/n );\n\t\treturn ( C/n ) / ( sx*sy ); // Note: why all the dividing by `n`? To avoid overflow.\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sample correlation coefficient. If not provided a value, the accumulator function returns the current sample correlation coefficient.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sample correlation coefficient or null\n\t*/\n\tfunction accumulator2( x, y ) {\n\t\tvar k;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn ( C/N ) / ( sx*sy );\n\t\t\t}\n\t\t\treturn ( C/W ) / ( sx*sy );\n\t\t}\n\t\t// Update the window and strided array indices for managing the circular buffer:\n\t\twi = (wi+1) % W;\n\t\ti = 2 * wi;\n\n\t\t// Case: an incoming value is NaN, the sliding co-moment is automatically NaN...\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tC = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tbuf[ i+1 ] = y;\n\n\t\t\tN += 1;\n\t\t\tdx = x - mx;\n\t\t\tM2x += dx * dx;\n\t\t\tdy = y - my;\n\t\t\tM2y += dy * dy;\n\n\t\t\tC += dx * dy;\n\t\t\tsx = sqrt( M2x/N );\n\t\t\tsy = sqrt( M2y/N );\n\t\t\treturn ( C/N ) / ( sx*sy ); // Note: why all the dividing by `N`? To avoid overflow.\n\t\t}\n\t\t// Case: an outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) || isnan( buf[ i+1 ] ) ) {\n\t\t\tM2x = 0.0;\n\t\t\tM2y = 0.0;\n\t\t\tC = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tj = 2 * k; // convert to a strided array index\n\t\t\t\tif ( j !== i ) {\n\t\t\t\t\tif ( isnan( buf[ j ] ) || isnan( buf[ j+1 ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tC = NaN;\n\t\t\t\t\t\tbreak; // co-moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tdx = buf[j] - mx;\n\t\t\t\t\tM2x += dx * dx;\n\t\t\t\t\tdy = buf[j+1] - my;\n\t\t\t\t\tM2y += dy * dy;\n\t\t\t\t\tC += dx * dy;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current co-moment nor the incoming values are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( C ) === false ) {\n\t\t\t// Use textbook formulas along with simplification arising from difference of sums:\n\t\t\tdx0 = buf[ i ] - mx;\n\t\t\tdxN = x - mx;\n\t\t\tdy0 = buf[ i+1 ] - my;\n\t\t\tdyN = y - my;\n\t\t\tM2x += ( dxN-dx0 ) * ( dxN+dx0 );\n\t\t\tM2y += ( dyN-dy0 ) * ( dyN+dy0 );\n\t\t\tC += ( dxN*dyN ) - ( dx0*dy0 );\n\t\t}\n\t\t// Case: the current co-moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\t\tbuf[ i+1 ] = y;\n\n\t\tsx = sqrt( M2x/W );\n\t\tsy = sqrt( M2y/W );\n\t\treturn ( C/W ) / ( sx*sy ); // Note: why all the dividing by `W`? To avoid overflow.\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sample Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/mpcorr\n*\n* @example\n* var incrmpcorr = require( '@stdlib/stats/incr/mpcorr' );\n*\n* var accumulator = incrmpcorr( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0, 3.14 );\n* // returns ~-1.0\n*\n* r = accumulator( 3.0, -1.0 );\n* // returns ~-0.925\n*\n* r = accumulator( 5.0, -9.5 );\n* // returns ~-0.863\n*\n* r = accumulator();\n* // returns ~-0.863\n*/\n\n// MODULES //\n\nvar incrmpcorr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrmpcorr = require( './../../../incr/mpcorr' );\nvar format = require( '@stdlib/string/format' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sample absolute Pearson product-moment correlation coefficient.\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmapcorr( 3 );\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator( 3.0, -1.0 );\n* // returns ~0.925\n*\n* ar = accumulator( 5.0, -9.5 );\n* // returns ~0.863\n*\n* ar = accumulator();\n* // returns ~0.863\n*\n* @example\n* var accumulator = incrmapcorr( 3, -2.0, 10.0 );\n*/\nfunction incrmapcorr( W, meanx, meany ) {\n\tvar acc;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tacc = incrmpcorr( W, meanx, meany );\n\t} else {\n\t\tacc = incrmpcorr( W );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sample absolute correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = acc();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn abs( r );\n\t\t}\n\t\treturn abs( acc( x, y ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmapcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sample absolute Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/mapcorr\n*\n* @example\n* var incrmapcorr = require( '@stdlib/stats/incr/mapcorr' );\n*\n* var accumulator = incrmapcorr( 3 );\n*\n* var ar = accumulator();\n* // returns null\n*\n* ar = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* ar = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* ar = accumulator( 3.0, -1.0 );\n* // returns ~0.925\n*\n* ar = accumulator( 5.0, -9.5 );\n* // returns ~0.863\n*\n* ar = accumulator();\n* // returns ~0.863\n*/\n\n// MODULES //\n\nvar incrmapcorr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmapcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean absolute percentage error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmape();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~91.67\n*\n* m = accumulator();\n* // returns ~91.67\n*/\nfunction incrmape() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean absolute percentage error. If not provided input values, the accumulator function returns the current mean absolute percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean absolute percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( 100.0 * abs( (a-f)/a ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean absolute percentage error incrementally.\n*\n* @module @stdlib/stats/incr/mape\n*\n* @example\n* var incrmape = require( '@stdlib/stats/incr/mape' );\n*\n* var accumulator = incrmape();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~91.67\n*\n* m = accumulator();\n* // returns ~91.67\n*/\n\n// MODULES //\n\nvar incrmape = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a maximum value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmax();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 3.14\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\nfunction incrmax() {\n\tvar max;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum value. If not provided a value, the accumulator function returns the current max.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} max value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( max === void 0 ) ? null : max;\n\t\t}\n\t\tif (\n\t\t\tmax === void 0 ||\n\t\t\tx > max ||\n\t\t\tisnan( x ) ||\n\t\t\t( x === max && isPositiveZero( x ) )\n\t\t) {\n\t\t\tmax = x;\n\t\t}\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a maximum value incrementally.\n*\n* @module @stdlib/stats/incr/max\n*\n* @example\n* var incrmax = require( '@stdlib/stats/incr/max' );\n*\n* var accumulator = incrmax();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 3.14\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\n\n// MODULES //\n\nvar incrmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmax = require( './../../../incr/max' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a maximum absolute value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmaxabs();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 5.0\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\nfunction incrmaxabs() {\n\tvar max = incrmax();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} maximum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn max();\n\t\t}\n\t\treturn max( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a maximum absolute value incrementally.\n*\n* @module @stdlib/stats/incr/maxabs\n*\n* @example\n* var incrmaxabs = require( '@stdlib/stats/incr/maxabs' );\n*\n* var accumulator = incrmaxabs();\n*\n* var max = accumulator();\n* // returns null\n*\n* max = accumulator( 3.14 );\n* // returns 3.14\n*\n* max = accumulator( -5.0 );\n* // returns 5.0\n*\n* max = accumulator( 10.1 );\n* // returns 10.1\n*\n* max = accumulator();\n* // returns 10.1\n*/\n\n// MODULES //\n\nvar incrmaxabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving unbiased sample covariance.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute an unbiased sample covariance.\n*\n* -   We begin by defining the covariance \\\\( \\operatorname{cov}_n(x,y) \\\\) for a window \\\\(n\\\\) as follows\n*\n*     ```tex\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n}\n*     ```\n*\n*     where \\\\(C_n\\\\) is the co-moment, which is defined as\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{N} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     and where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively, and \\\\(i=1\\\\) specifies the first element in a window.\n*\n* -   The sample mean is computed using the canonical formula\n*\n*     ```tex\n*     \\bar{x}_n = \\frac{1}{N} \\sum_{i=1}^{N} x_i\n*     ```\n*\n*     which, taking into account a previous window, can be expressed\n*\n*     ```tex\n*     \\begin{align*}\n*     \\bar{x}_n &= \\frac{1}{N} \\biggl( \\sum_{i=0}^{N-1} x_i - x_0 + x_N \\biggr) \\\\\n*               &= \\bar{x}_{n-1} + \\frac{x_N - x_0}{N}\n*     \\end{align*}\n*     ```\n*\n*     where \\\\(x_0\\\\) is the first value in the previous window.\n*\n* -   We can substitute into the co-moment equation\n*\n*     ```tex\n*     \\begin{align*}\n*     C_n &= \\sum_{i=1}^{N} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n ) \\\\\n*         &= \\sum_{i=1}^{N} \\biggl( x_i - \\bar{x}_{n-1} - \\frac{x_N - x_0}{N} \\biggr) \\biggl( y_i - \\bar{y}_{n-1} - \\frac{y_N - y_0}{N} \\biggr) \\\\\n*         &= \\sum_{i=1}^{N} \\biggl( \\Delta x_{i,n-1} - \\frac{x_N - x_0}{N} \\biggr) \\biggl( \\Delta y_{i,n-1} - \\frac{y_N - y_0}{N} \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     where\n*\n*     ```tex\n*     \\Delta x_{i,k} = x_i - \\bar{x}_{k}\n*     ```\n*\n* -   We can subsequently expand terms and apply a summation identity\n*\n*     ```tex\n*     \\begin{align*}\n*     C_n &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\biggl( \\frac{y_N - y_0}{N} \\biggr) - \\sum_{i=1}^{N} \\Delta y_{i,n-1} \\biggl( \\frac{x_N - x_0}{N} \\biggr) + \\sum_{i=1}^{N} \\biggl( \\frac{x_N - x_0}{N} \\biggr) \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\\\\n*         &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta x_{i,n-1} - \\biggl( \\frac{x_N - x_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta y_{i,n-1} + \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     \\end{align*}\n*     ```\n*\n* -   Let us first consider the second term which we can reorganize as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta x_{i,n-1} &= \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}{N} ( x_i - \\bar{x}_{n-1}) \\\\\n*         &= \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} x_i - \\biggl( \\frac{y_N - y_0}{N} \\biggr) \\sum_{i=1}^{N} \\bar{x}_{n-1} \\\\\n*         &= (y_N - y_0) \\bar{x}_{n} - (y_N - y_0)\\bar{x}_{n-1} \\\\\n*         &= (y_N - y_0) (\\bar{x}_{n} - \\bar{x}_{n-1}) \\\\\n*         &= \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     \\end{align*}\n*     ```\n*\n* -   The third term can be reorganized in a manner similar to the second term such that\n*\n*     ```tex\n*     \\biggl( \\frac{x_N - x_0}{N} \\biggr) \\sum_{i=1}^{N} \\Delta y_{i,n-1} = \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     ```\n*\n* -   Substituting back into the equation for the co-moment\n*\n*     ```tex\n*     \\begin{align*}\n*     C_n &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\frac{(x_N - x_0)(y_N - y_0)}{N} - \\frac{(x_N - x_0)(y_N - y_0)}{N} + \\frac{(x_N - x_0)(y_N - y_0)}{N} \\\\\n*         &= \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} - \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     \\end{align*}\n*     ```\n*\n* -   Let us now consider the first term which we can modify as follows\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} &= \\sum_{i=1}^{N} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) \\\\\n*         &= \\sum_{i=1}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) \\\\\n*         &= \\sum_{i=1}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) + (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1}) - (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1}) \\\\\n*         &= \\sum_{i=0}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1}) + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) - (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1})\n*     \\end{align*}\n*     ```\n*\n*     where we recognize that the first term equals the co-moment for the previous window\n*\n*     ```tex\n*     C_{n-1} = \\sum_{i=0}^{N-1} (x_i - \\bar{x}_{n-1})(y_i - \\bar{y}_{n-1})\n*     ```\n*\n*     In which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\sum_{i=1}^{N} \\Delta x_{i,n-1} \\Delta y_{i,n-1} &= C_{n-1} + (x_N - \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1}) - (x_0 - \\bar{x}_{n-1})(y_0 - \\bar{y}_{n-1}) \\\\\n*         &= C_{n-1} + \\Delta x_{N,n-1} \\Delta y_{N,n-1} - \\Delta x_{0,n-1} \\Delta y_{0,n-1}\n*     \\end{align*}\n*     ```\n*\n* -   Substituting into the equation for the co-moment\n*\n*     ```tex\n*     C_n = C_{n-1} + \\Delta x_{N,n-1} \\Delta y_{N,n-1} - \\Delta x_{0,n-1} \\Delta y_{0,n-1} - \\frac{(x_N - x_0)(y_N - y_0)}{N}\n*     ```\n*\n* -   We can make one further modification to the last term\n*\n*     ```tex\n*     \\begin{align*}\n*     \\frac{(x_N - x_0)(y_N - y_0)}{N} &= \\frac{(x_N - \\bar{x}_{n-1} - x_0 + \\bar{x}_{n-1})(y_N - \\bar{y}_{n-1} - y_0 + \\bar{y}_{n-1})}{N} \\\\\n*         &= \\frac{(\\Delta x_{N,n-1} - \\Delta x_{0,n-1})(\\Delta y_{N,n-1} - \\Delta y_{0,n-1})}{N}\n*     \\end{align*}\n*     ```\n*\n*     which, upon substitution into the equation for the co-moment, yields\n*\n*     ```tex\n*     C_n = C_{n-1} + \\Delta x_{N,n-1} \\Delta y_{N,n-1} - \\Delta x_{0,n-1} \\Delta y_{0,n-1} - \\frac{(\\Delta x_{N,n-1} - \\Delta x_{0,n-1})(\\Delta y_{N,n-1} - \\Delta y_{0,n-1})}{N}\n*     ```\n*\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmcovariance( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0, 3.14 );\n* // returns ~-7.49\n*\n* v = accumulator( 3.0, -1.0 );\n* // returns -8.35\n*\n* v = accumulator( 5.0, -9.5 );\n* // returns -29.42\n*\n* v = accumulator();\n* // returns -29.42\n*\n* @example\n* var accumulator = incrmcovariance( 3, -2.0, 10.0 );\n*/\nfunction incrmcovariance( W, meanx, meany ) {\n\tvar buf;\n\tvar dx0;\n\tvar dxN;\n\tvar dy0;\n\tvar dyN;\n\tvar mx;\n\tvar my;\n\tvar wi;\n\tvar C;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( 2*W ); // strided array\n\tn = W - 1;\n\tC = 0.0;\n\twi = -1;\n\tN = 0;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tmx = meanx;\n\t\tmy = meany;\n\t\treturn accumulator2;\n\t}\n\tmx = 0.0;\n\tmy = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample covariance. If not provided a value, the accumulator function returns the current unbiased sample covariance.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} unbiased sample covariance or null\n\t*/\n\tfunction accumulator1( x, y ) {\n\t\tvar v1;\n\t\tvar v2;\n\t\tvar k;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn C / (N-1);\n\t\t\t}\n\t\t\treturn C / n;\n\t\t}\n\t\t// Update the window and strided array indices for managing the circular buffer:\n\t\twi = (wi+1) % W;\n\t\ti = 2 * wi;\n\n\t\t// Case: an incoming value is NaN, the sliding co-moment is automatically NaN...\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tC = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tbuf[ i+1 ] = y;\n\n\t\t\tN += 1;\n\t\t\tdxN = x - mx;\n\t\t\tmx += dxN / N;\n\t\t\tmy += ( y-my ) / N;\n\t\t\tC += dxN * ( y-my ); // Note: repeated `y-my` is intentional, as `my` is updated when used here\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn C / (N-1);\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Case: an outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) || isnan( buf[ i+1 ] ) ) {\n\t\t\tN = 1;\n\t\t\tmx = x;\n\t\t\tmy = y;\n\t\t\tC = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tj = 2 * k; // convert to a strided array index\n\t\t\t\tif ( j !== i ) {\n\t\t\t\t\tv1 = buf[ j ];\n\t\t\t\t\tv2 = buf[ j+1 ];\n\t\t\t\t\tif ( isnan( v1 ) || isnan( v2 ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tC = NaN;\n\t\t\t\t\t\tbreak; // co-moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdxN = v1 - mx;\n\t\t\t\t\tmx += dxN / N;\n\t\t\t\t\tmy += ( v2-my ) / N;\n\t\t\t\t\tC += dxN * ( v2-my ); // Note: repeated `y-my` is intentional, as `my` is updated when used here\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current co-moment nor the incoming values are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( C ) === false ) {\n\t\t\tdx0 = buf[ i ] - mx;\n\t\t\tdy0 = buf[ i+1 ] - my;\n\t\t\tdxN = x - mx;\n\t\t\tdyN = y - my;\n\t\t\tC += (dxN*dyN) - (dx0*dy0) - ( (dxN-dx0)*(dyN-dy0)/W );\n\t\t\tmx += ( dxN-dx0 ) / W;\n\t\t\tmy += ( dyN-dy0 ) / W;\n\t\t}\n\t\t// Case: the current co-moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\t\tbuf[ i+1 ] = y;\n\n\t\treturn C / n;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample covariance. If not provided a value, the accumulator function returns the current unbiased sample covariance.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} unbiased sample covariance or null\n\t*/\n\tfunction accumulator2( x, y ) {\n\t\tvar k;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn C / N;\n\t\t\t}\n\t\t\treturn C / W;\n\t\t}\n\t\t// Update the window and strided array indices for managing the circular buffer:\n\t\twi = (wi+1) % W;\n\t\ti = 2 * wi;\n\n\t\t// Case: an incoming value is NaN, the sliding co-moment is automatically NaN...\n\t\tif ( isnan( x ) || isnan( y ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tC = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tbuf[ i+1 ] = y;\n\n\t\t\tN += 1;\n\t\t\tC += ( x-mx ) * ( y-my );\n\t\t\treturn C / N;\n\t\t}\n\t\t// Case: an outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) || isnan( buf[ i+1 ] ) ) {\n\t\t\tC = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tj = 2 * k; // convert to a strided array index\n\t\t\t\tif ( j !== i ) {\n\t\t\t\t\tif ( isnan( buf[ j ] ) || isnan( buf[ j+1 ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tC = NaN;\n\t\t\t\t\t\tbreak; // co-moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tC += ( buf[j]-mx ) * ( buf[j+1]-my );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current co-moment nor the incoming values are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( C ) === false ) {\n\t\t\t// Use textbook formula along with simplification arising from difference of sums:\n\t\t\tC += ( (x-mx)*(y-my) ) - ( (buf[i]-mx)*(buf[i+1]-my) );\n\t\t}\n\t\t// Case: the current co-moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\t\tbuf[ i+1 ] = y;\n\n\t\treturn C / W;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmcovariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving unbiased sample covariance incrementally.\n*\n* @module @stdlib/stats/incr/mcovariance\n*\n* @example\n* var incrmcovariance = require( '@stdlib/stats/incr/mcovariance' );\n*\n* var accumulator = incrmcovariance( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* v = accumulator( -5.0, 3.14 );\n* // returns ~-7.49\n*\n* v = accumulator( 3.0, -1.0 );\n* // returns -8.35\n*\n* v = accumulator( 5.0, -9.5 );\n* // returns -29.42\n*\n* v = accumulator();\n* // returns -29.42\n*/\n\n// MODULES //\n\nvar incrmcovariance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmcovariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving coefficient of variation (CV).\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute the coefficient of variation (CV), which is defined as the sample standard deviation divided by the sample mean.\n*\n* -   We first recognize that the corrected sample standard deviation is defined as the square root of the unbiased sample variance. Accordingly, in order to derive an update equation for the corrected sample standard deviation, deriving an update equation for the unbiased sample variance is sufficient.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation for the unbiased sample variance\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmcv( 3 );\n*\n* var cv = accumulator();\n* // returns null\n*\n* cv = accumulator( 2.0 );\n* // returns 0.0\n*\n* cv = accumulator( 1.0 );\n* // returns ~0.47\n*\n* cv = accumulator( 3.0 );\n* // returns 0.5\n*\n* cv = accumulator( 7.0 );\n* // returns ~0.83\n*\n* cv = accumulator();\n* // returns ~0.83\n*\n* @example\n* var accumulator = incrmcv( 3, 2.0 );\n*/\nfunction incrmcv( W, mean ) {\n\tvar delta;\n\tvar buf;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tn = W - 1;\n\tM2 = 0.0;\n\ti = -1;\n\tN = 0;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn sqrt( M2/(N-1) ) / mu;\n\t\t\t}\n\t\t\treturn sqrt( M2/n ) / mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0 / mu;\n\t\t\t}\n\t\t\treturn sqrt( M2/(N-1) ) / mu;\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\treturn M2 / mu;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn sqrt( M2/n ) / mu;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn sqrt( M2/N ) / mu;\n\t\t\t}\n\t\t\treturn sqrt( M2/W ) / mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tM2 += delta * delta;\n\t\t\treturn sqrt( M2/N ) / mu;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tM2 += delta * delta;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tM2 += ( x-tmp ) * ( x-mu + tmp-mu );\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn sqrt( M2/W ) / mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmcv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving coefficient of variation (CV) incrementally.\n*\n* @module @stdlib/stats/incr/mcv\n*\n* @example\n* var incrmcv = require( '@stdlib/stats/incr/mcv' );\n*\n* var accumulator = incrmcv( 3 );\n*\n* var cv = accumulator();\n* // returns null\n*\n* cv = accumulator( 2.0 );\n* // returns 0.0\n*\n* cv = accumulator( 1.0 );\n* // returns ~0.47\n*\n* cv = accumulator( 3.0 );\n* // returns 0.5\n*\n* cv = accumulator( 7.0 );\n* // returns ~0.83\n*\n* cv = accumulator();\n* // returns ~0.83\n*/\n\n// MODULES //\n\nvar incrmcv = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmcv;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\nvar signum = require( '@stdlib/math/base/special/signum' );\nvar kroneckerDelta = require( '@stdlib/math/base/special/kronecker-delta' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean directional accuracy.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmda();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 4.0 );\n* // returns 0.5\n*\n* m = accumulator();\n* // returns 0.5\n*/\nfunction incrmda() {\n\tvar mean;\n\tvar FLG;\n\tvar f0;\n\tvar a0;\n\n\tmean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean directional accuracy. If not provided a value, the accumulator function returns the current mean directional accuracy.\n\t*\n\t* @private\n\t* @param {number} [f] - forecast value\n\t* @param {number} [a] - actual value\n\t* @returns {(number|null)} mean directional accuracy or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tvar sf;\n\t\tvar sa;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tif ( FLG === void 0 ) {\n\t\t\tFLG = true;\n\t\t\tf0 = f;\n\t\t\ta0 = a;\n\t\t}\n\t\tsf = signum( f-f0 );\n\t\tsa = signum( a-a0 );\n\t\tf0 = f;\n\t\ta0 = a;\n\t\treturn mean( kroneckerDelta( sf, sa ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmda;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean directional accuracy (MDA) incrementally.\n*\n* @module @stdlib/stats/incr/mda\n*\n* @example\n* var incrmda = require( '@stdlib/stats/incr/mda' );\n*\n* var accumulator = incrmda();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 4.0 );\n* // returns 0.5\n*\n* m = accumulator();\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar incrmda = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmda;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrme();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator();\n* // returns 4.0\n*/\nfunction incrme() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean error. If not provided input values, the accumulator function returns the current mean error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( y-x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrme;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean error incrementally.\n*\n* @module @stdlib/stats/incr/me\n*\n* @example\n* var incrme = require( '@stdlib/stats/incr/me' );\n*\n* var accumulator = incrme();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator();\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar incrme = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrme;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean of absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanabs();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator();\n* // returns 3.5\n*/\nfunction incrmeanabs() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean of absolute values incrementally.\n*\n* @module @stdlib/stats/incr/meanabs\n*\n* @example\n* var incrmeanabs = require( '@stdlib/stats/incr/meanabs' );\n*\n* var accumulator = incrmeanabs();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator();\n* // returns 3.5\n*/\n\n// MODULES //\n\nvar incrmeanabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanabs2();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator();\n* // returns 14.5\n*/\nfunction incrmeanabs2() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} mean value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean of squared absolute values incrementally.\n*\n* @module @stdlib/stats/incr/meanabs2\n*\n* @example\n* var incrmeanabs2 = require( '@stdlib/stats/incr/meanabs2' );\n*\n* var accumulator = incrmeanabs2();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator();\n* // returns 14.5\n*/\n\n// MODULES //\n\nvar incrmeanabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an arithmetic mean and unbiased sample variance.\n*\n* ## Method\n*\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {Collection} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmeanvar();\n*\n* var mv = accumulator();\n* // returns null\n*\n* mv = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* mv = accumulator( -5.0 );\n* // returns [ -1.5, 24.5 ]\n*\n* mv = accumulator( 3.0 );\n* // returns [ 0.0, 19.0 ]\n*\n* mv = accumulator( 5.0 );\n* // returns [ 1.25, ~18.92 ]\n*\n* mv = accumulator();\n* // returns [ 1.25, ~18.92 ]\n*/\nfunction incrmeanvar( out ) {\n\tvar meanvar;\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\tif ( arguments.length === 0 ) {\n\t\tmeanvar = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tmeanvar = out;\n\t}\n\tM2 = 0.0;\n\tmu = 0.0;\n\tN = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated results. If not provided a value, the accumulator function returns the current results.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tmeanvar[ 0 ] = mu; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tif ( N === 1 ) {\n\t\t\t\tif ( isnan( M2 ) ) {\n\t\t\t\t\tmeanvar[ 1 ] = NaN;\n\t\t\t\t} else {\n\t\t\t\t\tmeanvar[ 1 ] = 0.0;\n\t\t\t\t}\n\t\t\t\treturn meanvar;\n\t\t\t}\n\t\t\tmeanvar[ 1 ] = M2 / (N-1);\n\t\t\treturn meanvar;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\n\t\tmeanvar[ 0 ] = mu;\n\t\tif ( N < 2 ) {\n\t\t\tif ( isnan( M2 ) ) {\n\t\t\t\tmeanvar[ 1 ] = NaN;\n\t\t\t} else {\n\t\t\t\tmeanvar[ 1 ] = 0.0;\n\t\t\t}\n\t\t\treturn meanvar;\n\t\t}\n\t\tmeanvar[ 1 ] = M2 / (N-1);\n\t\treturn meanvar;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanvar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an arithmetic mean and unbiased sample variance incrementally.\n*\n* @module @stdlib/stats/incr/meanvar\n*\n* @example\n* var incrmeanvar = require( '@stdlib/stats/incr/meanvar' );\n*\n* var accumulator = incrmeanvar();\n*\n* var mv = accumulator();\n* // returns null\n*\n* mv = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* mv = accumulator( -5.0 );\n* // returns [ -1.5, 24.5 ]\n*\n* mv = accumulator( 3.0 );\n* // returns [ 0.0, 19.0 ]\n*\n* mv = accumulator( 5.0 );\n* // returns [ 1.25, ~18.92 ]\n*\n* mv = accumulator();\n* // returns [ 1.25, ~18.92 ]\n*/\n\n// MODULES //\n\nvar incrmeanvar = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmeanvar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar ln = require( '@stdlib/math/base/special/ln' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving geometric mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmgmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator( 3.0 );\n* // returns ~3.11\n*\n* v = accumulator( 5.0 );\n* // returns ~4.22\n*\n* v = accumulator();\n* // returns ~4.22\n*/\nfunction incrmgmean( W ) {\n\tvar buf;\n\tvar sum;\n\tvar gm;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tsum = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated geometric mean. If not provided a value, the accumulator function returns the current geometric mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} geometric mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar lnx;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn gm;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Compute the natural log:\n\t\tlnx = ln( x );\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tsum = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tsum += lnx;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tsum = lnx;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tsum = NaN;\n\t\t\t\t\t\tbreak; // sum is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tsum += buf[ k ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( sum ) === false ) {\n\t\t\tsum += lnx - buf[ i ];\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = lnx;\n\n\t\tgm = exp( sum/N );\n\t\treturn gm;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving geometric mean incrementally.\n*\n* @module @stdlib/stats/incr/mgmean\n*\n* @example\n* var incrmgmean = require( '@stdlib/stats/incr/mgmean' );\n*\n* var accumulator = incrmgmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~3.16\n*\n* v = accumulator( 3.0 );\n* // returns ~3.11\n*\n* v = accumulator( 5.0 );\n* // returns ~4.22\n*\n* v = accumulator();\n* // returns ~4.22\n*/\n\n// MODULES //\n\nvar incrmgmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmgmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n*\n* var options = {\n*     'alpha': 0.05,\n*     'alernative': 'two-sided'\n* };\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be on the interval [0,1]. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes moving minimum and maximum values.\n*\n* @private\n* @param {Collection} out - output array\n* @param {PositiveInteger} W - window size\n* @param {Collection} buf - data buffer\n* @returns {Function} accumulator function\n*\n* @example\n* var buf = [ 0.0, 0.0, 0.0 ];\n*\n* var accumulator = incrmminmax( [ 0.0, 0.0 ], 3, buf );\n*\n* var mm = accumulator( 2.0, 0 );\n* // returns [ 2.0, 2.0 ]\n*\n* buf[ 0 ] = 2.0;\n*\n* mm = accumulator( -5.0, 1 );\n* // returns [ -5.0, 2.0 ]\n*\n* buf[ 1 ] = -5.0;\n*\n* mm = accumulator( 3.0, 2 );\n* // returns [ -5.0, 3.0 ]\n*\n* buf[ 2 ] = 3.0;\n*\n* mm = accumulator( 5.0, 0 );\n* // returns [ -5.0, 5.0 ]\n*\n* buf[ 0 ] = 5.0;\n*/\nfunction incrmminmax( out, W, buf ) {\n\tvar min;\n\tvar max;\n\tvar N;\n\n\tmin = PINF;\n\tmax = NINF;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* Updates accumulator state.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @param {NonNegativeInteger} i - buffer index\n\t* @returns {Collection} output array\n\t*/\n\tfunction accumulator( x, i ) {\n\t\tvar sgn;\n\t\tvar v;\n\t\tvar k;\n\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: incoming value is zero, which means we need to be careful and correctly handle signed zeros...\n\t\telse if ( x === 0.0 ) {\n\t\t\tsgn = isNegativeZero( x );\n\t\t\tif ( x === min ) {\n\t\t\t\t// Case: outgoing value is the current minimum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === min &&\n\t\t\t\t\tisNegativeZero( buf[ i ] ) &&\n\t\t\t\t\tsgn === false\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\t\tmin = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn ) {\n\t\t\t\t\t// Ensure minimum value has the correct sign:\n\t\t\t\t\tmin = x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( x === max ) {\n\t\t\t\t// Case: outgoing value is the current maximum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === max &&\n\t\t\t\t\tisPositiveZero( buf[ i ] ) &&\n\t\t\t\t\tsgn\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\t\tmax = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn === false ) {\n\t\t\t\t\t// Ensure maximum value has the correct sign:\n\t\t\t\t\tmax = x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do...\n\n\t\tout[ 0 ] = min;\n\t\tout[ 1 ] = max;\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmminmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean and corrected sample standard deviation.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute a corrected sample standard deviation.\n*\n* -   We first recognize that the corrected sample standard deviation is defined as the square root of the unbiased sample variance. Accordingly, in order to derive an update equation for the corrected sample standard deviation, deriving an update equation for the unbiased sample variance is sufficient.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @private\n* @param {Collection} out - output array\n* @param {PositiveInteger} W - window size\n* @param {Collection} buf - data buffer\n* @returns {Function} accumulator function\n*\n* @example\n* var buf = [ 0.0, 0.0, 0.0 ];\n* var accumulator = incrmmeanstdev( [ 0.0, 0.0 ], 3, buf );\n*\n* var v = accumulator( 2.0, 0 );\n* // returns [ 2.0, 0.0 ]\n*\n* buf[ 0 ] = 2.0;\n*\n* v = accumulator( -5.0, 1 );\n* // returns [ -1.5, ~4.95 ]\n*\n* buf[ 1 ] = -5.0;\n*\n* v = accumulator( 3.0, 2 );\n* // returns [ 0.0, ~4.36 ]\n*\n* buf[ 2 ] = 3.0;\n*\n* v = accumulator( 5.0, 0 );\n* // returns [ 1.0, ~5.29 ]\n*\n* buf[ 0 ] = 5.0;\n*/\nfunction incrmmeanstdev( out, W, buf ) {\n\tvar delta;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar N;\n\tvar n;\n\n\tn = W - 1;\n\tM2 = 0.0;\n\tmu = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* Updates accumulator state.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @param {NonNegativeInteger} i - buffer index\n\t* @returns {ArrayLike} output array\n\t*/\n\tfunction accumulator( x, i ) {\n\t\tvar k;\n\t\tvar v;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\n\t\t\tout[ 0 ] = mu;\n\t\t\tif ( N === 1 ) {\n\t\t\t\tout[ 1 ] = 0.0;\n\t\t\t} else {\n\t\t\t\tout[ 1 ] = sqrt( M2/(N-1) );\n\t\t\t}\n\t\t\treturn out;\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tout[ 0 ] = x;\n\t\t\tout[ 1 ] = 0.0;\n\t\t\treturn out;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tout[ 0 ] = mu;\n\t\tout[ 1 ] = sqrt( M2/n );\n\t\treturn out;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar copy = require( '@stdlib/utils/copy' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar setReadOnlyAccessor = require( '@stdlib/utils/define-read-only-accessor' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\nvar tQuantile = require( './../../../base/dists/t/quantile' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar validate = require( './validate.js' );\nvar defaults = require( './defaults.json' );\nvar incrmminmax = require( './minmax.js' );\nvar incrmmeanstdev = require( './meanstdev.js' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally performs a moving Grubbs' test for detecting outliers.\n*\n* @param {PositiveInteger} W - window size\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis ('two-sided', 'min', 'max')\n* @throws {TypeError} first argument must be a positive integer\n* @throws {RangeError} first argument must be greater than or equal to 3\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} `alpha` option must be on the interval `[0,1]`\n* @returns {Function} accumulator function\n*\n* @example\n* var rnorm = require( '@stdlib/random/base/normal' );\n*\n* var accumulator;\n* var opts;\n* var i;\n*\n* accumulator = incrmgrubbs( 20, opts );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\nfunction incrmgrubbs( W ) {\n\tvar meanstdev;\n\tvar results;\n\tvar minmax;\n\tvar opts;\n\tvar err;\n\tvar buf;\n\tvar sig;\n\tvar mm;\n\tvar ms;\n\tvar tc;\n\tvar gc;\n\tvar df;\n\tvar N;\n\tvar G;\n\tvar i;\n\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Window size must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tif ( W < 3 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Window size must be greater than or equal to 3. Value: `%s`.', W ) );\n\t}\n\topts = copy( defaults );\n\tif ( arguments.length > 1 ) {\n\t\terr = validate( opts, arguments[ 1 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tbuf = new Float64Array( W );\n\tdf = W - 2;\n\tgc = 0.0;\n\tG = 0.0;\n\tN = 0;\n\ti = -1;\n\n\t// Compute the critical values:\n\tif ( opts.alternative === 'min' ) {\n\t\tsig = opts.alpha / W;\n\t} else if ( opts.alternative === 'max' ) {\n\t\tsig = opts.alpha / W;\n\t} else { // two-sided\n\t\tsig = opts.alpha / (2*W);\n\t}\n\ttc = tQuantile( 1.0-sig, df );\n\tgc = (W-1)*tc / sqrt( W*(df+(tc*tc)) );\n\n\t// Initialize statistics accumulators:\n\tmm = [ 0.0, 0.0 ];\n\tminmax = incrmminmax( mm, W, buf );\n\n\tms = [ 0.0, 0.0 ];\n\tmeanstdev = incrmmeanstdev( ms, W, buf );\n\n\t// Initialize the results object:\n\tresults = {};\n\tsetReadOnlyAccessor( results, 'rejected', getRejected );\n\tsetReadOnly( results, 'alpha', opts.alpha );\n\tsetReadOnly( results, 'criticalValue', gc );\n\tsetReadOnlyAccessor( results, 'statistic', getStatistic );\n\tsetReadOnly( results, 'df', df );\n\tsetReadOnlyAccessor( results, 'mean', getMean );\n\tsetReadOnlyAccessor( results, 'sd', getStDev );\n\tsetReadOnlyAccessor( results, 'min', getMin );\n\tsetReadOnlyAccessor( results, 'max', getMax );\n\tsetReadOnly( results, 'alt', opts.alternative );\n\tsetReadOnly( results, 'method', 'Grubbs\\' Test' );\n\tsetReadOnly( results, 'print', print );\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated Grubbs' test results. If not provided a value, the accumulator function returns the current Grubbs' test results.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(Object|null)} test results or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar md;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < W ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn results;\n\t\t}\n\t\tN += 1;\n\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Update model statistics:\n\t\tmeanstdev( x, i );\n\t\tminmax( x, i );\n\n\t\t// Insert the value into the buffer:\n\t\tbuf[ i ] = x;\n\n\t\tif ( N < W ) {\n\t\t\treturn null;\n\t\t}\n\t\t// Compute the test statistic...\n\t\tif ( opts.alternative === 'min' ) {\n\t\t\tG = ( ms[0]-mm[0] ) / ms[ 1 ];\n\t\t} else if ( opts.alternative === 'max' ) {\n\t\t\tG = ( mm[1]-ms[0] ) / ms[ 1 ];\n\t\t} else { // two-sided\n\t\t\tmd = max( ms[0]-mm[0], mm[1]-ms[0] ); // maximum absolute deviation\n\t\t\tG = md / ms[ 1 ];\n\t\t}\n\t\treturn results;\n\t}\n\n\t/**\n\t* Returns a `boolean` indicating whether the null hypothesis should be rejected.\n\t*\n\t* @private\n\t* @returns {boolean} boolean indicating whether the null hypothesis should be rejected\n\t*/\n\tfunction getRejected() {\n\t\treturn ( G > gc );\n\t}\n\n\t/**\n\t* Returns the test statistic.\n\t*\n\t* @private\n\t* @returns {number} test statistic\n\t*/\n\tfunction getStatistic() {\n\t\treturn G;\n\t}\n\n\t/**\n\t* Returns the sample mean.\n\t*\n\t* @private\n\t* @returns {number} sample mean\n\t*/\n\tfunction getMean() {\n\t\treturn ms[ 0 ];\n\t}\n\n\t/**\n\t* Returns the corrected sample standard deviation.\n\t*\n\t* @private\n\t* @returns {number} corrected sample standard deviation\n\t*/\n\tfunction getStDev() {\n\t\treturn ms[ 1 ];\n\t}\n\n\t/**\n\t* Returns the sample minimum.\n\t*\n\t* @private\n\t* @returns {number} sample minimum\n\t*/\n\tfunction getMin() {\n\t\treturn mm[ 0 ];\n\t}\n\n\t/**\n\t* Returns the sample maximum.\n\t*\n\t* @private\n\t* @returns {number} sample maximum\n\t*/\n\tfunction getMax() {\n\t\treturn mm[ 1 ];\n\t}\n\n\t/**\n\t* Pretty-print test results.\n\t*\n\t* @private\n\t* @param {Object} [options] - options object\n\t* @param {PositiveInteger} [options.digits=4] - number of digits after the decimal point\n\t* @param {boolean} [options.decision=true] - boolean indicating whether to print the test decision\n\t* @throws {TypeError} options argument must be an object\n\t* @throws {TypeError} must provide valid options\n\t* @returns {string} formatted output\n\t*/\n\tfunction print( options ) {\n\t\tvar decision;\n\t\tvar digits;\n\t\tvar str;\n\n\t\tdigits = opts.digits;\n\t\tdecision = opts.decision;\n\t\tif ( arguments.length > 0 ) {\n\t\t\tif ( !isObject( options ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide an object. Value: `%s`.', options ) );\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'digits' ) ) {\n\t\t\t\tif ( !isPositiveInteger( options.digits ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', options.digits ) );\n\t\t\t\t}\n\t\t\t\tdigits = options.digits;\n\t\t\t}\n\t\t\tif ( hasOwnProp( options, 'decision' ) ) {\n\t\t\t\tif ( !isBoolean( options.decision ) ) {\n\t\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', options.decision ) );\n\t\t\t\t}\n\t\t\t\tdecision = options.decision;\n\t\t\t}\n\t\t}\n\t\tstr = '';\n\t\tstr += results.method;\n\t\tstr += '\\n\\n';\n\t\tstr += 'Alternative hypothesis: ';\n\t\tif ( opts.alternative === 'max' ) {\n\t\t\tstr += 'The maximum value (' + mm[ 1 ] + ') is an outlier';\n\t\t} else if ( opts.alternative === 'min' ) {\n\t\t\tstr += 'The minimum value (' + mm[ 0 ] + ') is an outlier';\n\t\t} else { // two-sided\n\t\t\tstr += 'The ';\n\t\t\tif ( ms[0]-mm[0] > mm[1]-ms[0] ) {\n\t\t\t\tstr += 'minimum value (' + mm[ 0 ] + ')';\n\t\t\t} else {\n\t\t\t\tstr += 'maximum value (' + mm[ 1 ] + ')';\n\t\t\t}\n\t\t\tstr += ' is an outlier';\n\t\t}\n\t\tstr += '\\n\\n';\n\t\tstr += '    criticalValue: ' + roundn( gc, -digits ) + '\\n';\n\t\tstr += '    statistic: ' + roundn( G, -digits ) + '\\n';\n\t\tstr += '    df: ' + df + '\\n';\n\t\tstr += '\\n';\n\t\tif ( decision ) {\n\t\t\tstr += 'Test Decision: ';\n\t\t\tif ( G > gc ) {\n\t\t\t\tstr += 'Reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t} else {\n\t\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (opts.alpha*100.0) + '% significance level';\n\t\t\t}\n\t\t\tstr += '\\n';\n\t\t}\n\t\treturn str;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmgrubbs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Moving Grubbs' test for outliers.\n*\n* @module @stdlib/stats/incr/mgrubbs\n*\n* @example\n* var rnorm = require( '@stdlib/random/base/normal' );\n* var incrmgrubbs = require( '@stdlib/stats/incr/mgrubbs' );\n*\n* var accumulator;\n* var res;\n* var i;\n*\n* accumulator = incrmgrubbs( 20 );\n*\n* for ( i = 0; i < 200; i++ ) {\n*     res = accumulator( rnorm( 10.0, 5.0 ) );\n* }\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\nfunction incrmmean( W ) {\n\tvar delta;\n\tvar buf;\n\tvar mu;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmu = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding mean is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the sample mean...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tbreak; // mean is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current mean nor the incoming value are NaN, so we need to update the sample mean...\n\t\telse if ( isnan( mu ) === false ) {\n\t\t\tdelta = x - buf[ i ];\n\t\t\tmu += delta / W;\n\t\t}\n\t\t// Case: the current mean is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean incrementally.\n*\n* @module @stdlib/stats/incr/mmean\n*\n* @example\n* var incrmmean = require( '@stdlib/stats/incr/mmean' );\n*\n* var accumulator = incrmmean( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns -1.5\n*\n* mu = accumulator( 3.0 );\n* // returns 0.0\n*\n* mu = accumulator( 5.0 );\n* // returns 1.0\n*\n* mu = accumulator();\n* // returns 1.0\n*/\n\n// MODULES //\n\nvar incrmmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving harmonic mean.\n*\n* ## Method\n*\n* -   The harmonic mean of positive real numbers \\\\(x_0, x_1, \\ldots, x_{n-1}\\\\) is defined as\n*\n*     ```tex\n*     \\begin{align*}\n*     H &= \\frac{n}{\\frac{1}{x_0} + \\frac{1}{x_1} + \\cdots + \\frac{1}{x_{n-1}}} \\\\\n*       &= \\frac{n}{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}\n*     \\end{align*}\n*     ```\n*\n*     which may be expressed\n*\n*     ```tex\n*     H = \\biggl( \\frac{\\sum_{i=0}^{n-1} \\frac{1}{x_i}}{n} \\biggr)^{-1}\n*     ```\n*\n* -   Accordingly, to compute the harmonic mean for each window incrementally, we can simply compute the arithmetic mean of reciprocal values and then compute the reciprocal of the result.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmhmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator( 3.0 );\n* // returns ~2.90\n*\n* v = accumulator( 5.0 );\n* // returns ~4.09\n*\n* v = accumulator();\n* // returns ~4.09\n*/\nfunction incrmhmean( W ) {\n\tvar mmean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated harmonic mean. If not provided a value, the accumulator function returns the current harmonic mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} harmonic mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tv = mmean();\n\t\t\tif ( v === null ) {\n\t\t\t\treturn v;\n\t\t\t}\n\t\t\treturn 1.0 / v;\n\t\t}\n\t\treturn 1.0 / mmean( 1.0/x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving harmonic mean incrementally.\n*\n* @module @stdlib/stats/incr/mhmean\n*\n* @example\n* var incrmhmean = require( '@stdlib/stats/incr/mhmean' );\n*\n* var accumulator = incrmhmean( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns 2.0\n*\n* v = accumulator( 5.0 );\n* // returns ~2.86\n*\n* v = accumulator( 3.0 );\n* // returns ~2.90\n*\n* v = accumulator( 5.0 );\n* // returns ~4.09\n*\n* v = accumulator();\n* // returns ~4.09\n*/\n\n// MODULES //\n\nvar incrmhmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a mid-range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmidrange();\n*\n* var midrange = accumulator();\n* // returns null\n*\n* midrange = accumulator( 3.14 );\n* // returns 3.14\n*\n* midrange = accumulator( -5.0 );\n* // returns ~-0.93\n*\n* midrange = accumulator( 10.1 );\n* // returns 2.55\n*\n* midrange = accumulator();\n* // returns 2.55\n*/\nfunction incrmidrange() {\n\tvar max = NINF;\n\tvar min = PINF;\n\tvar sum;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {number} mid-range\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( sum === void 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sum / 2.0;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\tsum = max + min;\n\t\treturn sum / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a mid-range incrementally.\n*\n* @module @stdlib/stats/incr/midrange\n*\n* @example\n* var incrmidrange = require( '@stdlib/stats/incr/midrange' );\n*\n* var accumulator = incrmidrange();\n*\n* var midrange = accumulator();\n* // returns null\n*\n* midrange = accumulator( 3.14 );\n* // returns 3.14\n*\n* midrange = accumulator( -5.0 );\n* // returns ~-0.93\n*\n* midrange = accumulator( 10.1 );\n* // returns 2.55\n*\n* midrange = accumulator();\n* // returns 2.55\n*/\n\n// MODULES //\n\nvar incrmidrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmin = require( './../../../incr/min' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a minimum absolute value.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminabs();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns 3.14\n*\n* min = accumulator( 10.1 );\n* // returns 3.14\n*\n* min = accumulator();\n* // returns 3.14\n*/\nfunction incrminabs() {\n\tvar min = incrmin();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} minimum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn min();\n\t\t}\n\t\treturn min( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a minimum absolute value incrementally.\n*\n* @module @stdlib/stats/incr/minabs\n*\n* @example\n* var incrminabs = require( '@stdlib/stats/incr/minabs' );\n*\n* var accumulator = incrminabs();\n*\n* var min = accumulator();\n* // returns null\n*\n* min = accumulator( 3.14 );\n* // returns 3.14\n*\n* min = accumulator( -5.0 );\n* // returns 3.14\n*\n* min = accumulator( 10.1 );\n* // returns 3.14\n*\n* min = accumulator();\n* // returns 3.14\n*/\n\n// MODULES //\n\nvar incrminabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes minimum and maximum absolute values.\n*\n* @param {Collection} [out] - output array\n* @throws {TypeError} output argument must be array-like\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrminmaxabs();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 2.0, 5.0 ]\n*/\nfunction incrminmaxabs( out ) {\n\tvar minmax;\n\tvar min;\n\tvar max;\n\tvar FLG;\n\tif ( arguments.length === 0 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tminmax = out;\n\t}\n\tmin = PINF;\n\tmax = 0.0;\n\tFLG = false;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum absolute values. If not provided a value, the accumulator function returns the current minimum and maximum absolute values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar ax;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( FLG === false ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tminmax[ 0 ] = min; // Why? Because we cannot guarantee someone hasn't mutated the output array\n\t\t\tminmax[ 1 ] = max;\n\t\t\treturn minmax;\n\t\t}\n\t\tFLG = true;\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t} else {\n\t\t\tax = abs( x );\n\t\t\tif ( ax < min ) {\n\t\t\t\tmin = ax;\n\t\t\t}\n\t\t\tif ( ax > max ) {\n\t\t\t\tmax = ax;\n\t\t\t}\n\t\t}\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrminmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute minimum and maximum absolute values incrementally.\n*\n* @module @stdlib/stats/incr/minmaxabs\n*\n* @example\n* var incrminmaxabs = require( '@stdlib/stats/incr/minmaxabs' );\n*\n* var accumulator = incrminmaxabs();\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 2.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar incrminmaxabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrminmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar atan = require( '@stdlib/math/base/special/atan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean arctangent absolute percentage error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmaape( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~0.32\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~0.65\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.59\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~0.66\n*\n* m = accumulator();\n* // returns ~0.66\n*/\nfunction incrmmaape( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean arctangent absolute percentage error. If not provided input values, the accumulator function returns the current mean arctangent absolute percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean arctangent absolute percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( atan( abs( (a-f)/a ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmaape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean arctangent absolute percentage error incrementally.\n*\n* @module @stdlib/stats/incr/mmaape\n*\n* @example\n* var incrmmaape = require( '@stdlib/stats/incr/mmaape' );\n*\n* var accumulator = incrmmaape( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~0.32\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~0.65\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.59\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~0.66\n*\n* m = accumulator();\n* // returns ~0.66\n*/\n\n// MODULES //\n\nvar incrmmaape = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmaape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean absolute error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmae( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmae( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean absolute error. If not provided input values, the accumulator function returns the current mean absolute error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean absolute error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( y-x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmae;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean absolute error incrementally.\n*\n* @module @stdlib/stats/incr/mmae\n*\n* @example\n* var incrmmae = require( '@stdlib/stats/incr/mmae' );\n*\n* var accumulator = incrmmae( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar incrmmae = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmae;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean absolute percentage error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmape( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~91.67\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~77.78\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~86.67\n*\n* m = accumulator();\n* // returns ~86.67\n*/\nfunction incrmmape( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean absolute percentage error. If not provided input values, the accumulator function returns the current mean absolute percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean absolute percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( 100.0 * abs( (a-f)/a ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean absolute percentage error incrementally.\n*\n* @module @stdlib/stats/incr/mmape\n*\n* @example\n* var incrmmape = require( '@stdlib/stats/incr/mmape' );\n*\n* var accumulator = incrmmape( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~91.67\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~77.78\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~86.67\n*\n* m = accumulator();\n* // returns ~86.67\n*/\n\n// MODULES //\n\nvar incrmmape = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmape;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmax( W ) {\n\tvar buf;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum. If not provided a value, the accumulator function returns the current maximum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx > max ||\n\t\t\t\t( x === max && isPositiveZero( x ) )\n\t\t\t) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or greater than current maximum value...\n\t\telse if ( isnan( x ) || x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: outgoing value is the current maximum and the new value is less than the maximum, and, thus, we need to find a new maximum among the current values...\n\t\telse if ( ( buf[ i ] === max && x < max ) || isnan( buf[ i ] ) ) {\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current maximum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === max && x === max && x === 0.0 ) {\n\t\t\tif ( isPositiveZero( x ) ) {\n\t\t\t\tmax = x;\n\t\t\t} else if ( isPositiveZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\tmax = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both negative zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the maximum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn max;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving maximum incrementally.\n*\n* @module @stdlib/stats/incr/mmax\n*\n* @example\n* var incrmmax = require( '@stdlib/stats/incr/mmax' );\n*\n* var accumulator = incrmmax( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 3.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar incrmmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmmax = require( './../../../incr/mmax' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving maximum absolute value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmaxabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 5.0\n*\n* m = accumulator( 3.0 );\n* // returns 5.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\nfunction incrmmaxabs( W ) {\n\tvar max;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmax = incrmmax( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated maximum absolute value. If not provided a value, the accumulator function returns the current maximum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} maximum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn max();\n\t\t}\n\t\treturn max( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving maximum absolute value incrementally.\n*\n* @module @stdlib/stats/incr/mmaxabs\n*\n* @example\n* var incrmmaxabs = require( '@stdlib/stats/incr/mmaxabs' );\n*\n* var accumulator = incrmmaxabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 5.0\n*\n* m = accumulator( 3.0 );\n* // returns 5.0\n*\n* m = accumulator( 5.0 );\n* // returns 5.0\n*\n* m = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar incrmmaxabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar signum = require( '@stdlib/math/base/special/signum' );\nvar kroneckerDelta = require( '@stdlib/math/base/special/kronecker-delta' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean directional accuracy.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\nfunction incrmmda( W ) {\n\tvar mean;\n\tvar FLG;\n\tvar f0;\n\tvar a0;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean directional accuracy. If not provided input values, the accumulator function returns the current mean directional.\n\t*\n\t* @private\n\t* @param {number} [f] - forecast value\n\t* @param {number} [a] - actual value\n\t* @returns {(number|null)} mean directional accuracy or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tvar sf;\n\t\tvar sa;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tif ( FLG === void 0 ) {\n\t\t\tFLG = true;\n\t\t\tf0 = f;\n\t\t\ta0 = a;\n\t\t}\n\t\tsf = signum( f-f0 );\n\t\tsa = signum( a-a0 );\n\t\tf0 = f;\n\t\ta0 = a;\n\t\treturn mean( kroneckerDelta( sf, sa ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmda;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean directional accuracy incrementally.\n*\n* @module @stdlib/stats/incr/mmda\n*\n* @example\n* var incrmmda = require( '@stdlib/stats/incr/mmda' );\n*\n* var accumulator = incrmmda( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns 0.5\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~0.33\n*\n* m = accumulator( 4.0, 5.0 );\n* // returns ~0.33\n*\n* m = accumulator();\n* // returns ~0.33\n*/\n\n// MODULES //\n\nvar incrmmda = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmda;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmme( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~2.33\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns ~-0.33\n*\n* m = accumulator();\n* // returns ~-0.33\n*/\nfunction incrmme( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean error. If not provided input values, the accumulator function returns the current mean error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( y-x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmme;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean error incrementally.\n*\n* @module @stdlib/stats/incr/mme\n*\n* @example\n* var incrmme = require( '@stdlib/stats/incr/mme' );\n*\n* var accumulator = incrmme( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 4.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~2.33\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns ~-0.33\n*\n* m = accumulator();\n* // returns ~-0.33\n*/\n\n// MODULES //\n\nvar incrmme = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmme;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean of absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanabs( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator( 3.0 );\n* // returns ~3.33\n*\n* mu = accumulator( 5.0 );\n* // returns ~4.33\n*\n* mu = accumulator();\n* // returns ~4.33\n*/\nfunction incrmmeanabs( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean of absolute values incrementally.\n*\n* @module @stdlib/stats/incr/mmeanabs\n*\n* @example\n* var incrmmeanabs = require( '@stdlib/stats/incr/mmeanabs' );\n*\n* var accumulator = incrmmeanabs( 3 );\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0 );\n* // returns 2.0\n*\n* mu = accumulator( -5.0 );\n* // returns 3.5\n*\n* mu = accumulator( 3.0 );\n* // returns ~3.33\n*\n* mu = accumulator( 5.0 );\n* // returns ~4.33\n*\n* mu = accumulator();\n* // returns ~4.33\n*/\n\n// MODULES //\n\nvar incrmmeanabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean of squared absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanabs2( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator( 3.0 );\n* // returns ~12.67\n*\n* m = accumulator( 5.0 );\n* // returns ~19.67\n*\n* m = accumulator();\n* // returns ~19.67\n*/\nfunction incrmmeanabs2( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mean. If not provided a value, the accumulator function returns the current mean.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mean or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean of squared absolute values incrementally.\n*\n* @module @stdlib/stats/incr/mmeanabs2\n*\n* @example\n* var incrmmeanabs2 = require( '@stdlib/stats/incr/mmeanabs2' );\n*\n* var accumulator = incrmmeanabs2( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 4.0\n*\n* m = accumulator( -5.0 );\n* // returns 14.5\n*\n* m = accumulator( 3.0 );\n* // returns ~12.67\n*\n* m = accumulator( 5.0 );\n* // returns ~19.67\n*\n* m = accumulator();\n* // returns ~19.67\n*/\n\n// MODULES //\n\nvar incrmmeanabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean and corrected sample standard deviation.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute a corrected sample standard deviation.\n*\n* -   We first recognize that the corrected sample standard deviation is defined as the square root of the unbiased sample variance. Accordingly, in order to derive an update equation for the corrected sample standard deviation, deriving an update equation for the unbiased sample variance is sufficient.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @param {Collection} [out] - output array\n* @param {PositiveInteger} window - window size\n* @throws {TypeError} output argument must be array-like\n* @throws {TypeError} window size must be a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanstdev( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* v = accumulator( -5.0 );\n* // returns [ -1.5, ~4.95 ]\n*\n* v = accumulator( 3.0 );\n* // returns [ 0.0, ~4.36 ]\n*\n* v = accumulator( 5.0 );\n* // returns [ 1.0, ~5.29 ]\n*\n* v = accumulator();\n* // returns [ 1.0, ~5.29 ]\n*/\nfunction incrmmeanstdev( out, window ) {\n\tvar meanstdev;\n\tvar delta;\n\tvar buf;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar W;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( arguments.length === 1 ) {\n\t\tmeanstdev = [ 0.0, 0.0 ];\n\t\tW = out;\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tmeanstdev = out;\n\t\tW = window;\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Window size must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tn = W - 1;\n\tM2 = 0.0;\n\tmu = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated accumulated values. If not provided a value, the accumulator function returns the current accumulated values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tmeanstdev[ 0 ] = mu;\n\t\t\tif ( N === 1 ) {\n\t\t\t\tif ( isnan( M2 ) ) {\n\t\t\t\t\tmeanstdev[ 1 ] = NaN;\n\t\t\t\t} else {\n\t\t\t\t\tmeanstdev[ 1 ] = 0.0;\n\t\t\t\t}\n\t\t\t} else if ( N < W ) {\n\t\t\t\tmeanstdev[ 1 ] = sqrt( M2/(N-1) );\n\t\t\t} else {\n\t\t\t\tmeanstdev[ 1 ] = sqrt( M2/n );\n\t\t\t}\n\t\t\treturn meanstdev;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\n\t\t\tmeanstdev[ 0 ] = mu;\n\t\t\tif ( N === 1 ) {\n\t\t\t\tmeanstdev[ 1 ] = 0.0;\n\t\t\t} else {\n\t\t\t\tmeanstdev[ 1 ] = sqrt( M2/(N-1) );\n\t\t\t}\n\t\t\treturn meanstdev;\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tmeanstdev[ 0 ] = x;\n\t\t\tmeanstdev[ 1 ] = 0.0;\n\t\t\treturn meanstdev;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\tmeanstdev[ 0 ] = mu;\n\t\tmeanstdev[ 1 ] = sqrt( M2/n );\n\t\treturn meanstdev;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean and corrected sample standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/mmeanstdev\n*\n* @example\n* var incrmmeanstdev = require( '@stdlib/stats/incr/mmeanstdev' );\n*\n* var accumulator = incrmmeanstdev( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* v = accumulator( -5.0 );\n* // returns [ -1.5, ~4.95 ]\n*\n* v = accumulator( 3.0 );\n* // returns [ 0.0, ~4.36 ]\n*\n* v = accumulator( 5.0 );\n* // returns [ 1.0, ~5.29 ]\n*\n* v = accumulator();\n* // returns [ 1.0, ~5.29 ]\n*/\n\n// MODULES //\n\nvar incrmmeanstdev = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving arithmetic mean and unbiased sample variance.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute an unbiased sample variance.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @param {Collection} [out] - output array\n* @param {PositiveInteger} window - window size\n* @throws {TypeError} output argument must be array-like\n* @throws {TypeError} window size must be a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmeanvar( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* v = accumulator( -5.0 );\n* // returns [ -1.5, 24.5 ]\n*\n* v = accumulator( 3.0 );\n* // returns [ 0.0, 19.0 ]\n*\n* v = accumulator( 5.0 );\n* // returns [ 1.0, 28.0 ]\n*\n* v = accumulator();\n* // returns [ 1.0, 28.0 ]\n*/\nfunction incrmmeanvar( out, window ) {\n\tvar meanvar;\n\tvar delta;\n\tvar buf;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar W;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( arguments.length === 1 ) {\n\t\tmeanvar = [ 0.0, 0.0 ];\n\t\tW = out;\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tmeanvar = out;\n\t\tW = window;\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Window size must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tn = W - 1;\n\tM2 = 0.0;\n\tmu = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated accumulated values. If not provided a value, the accumulator function returns the current accumulated values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tmeanvar[ 0 ] = mu;\n\t\t\tif ( N === 1 ) {\n\t\t\t\tif ( isnan( M2 ) ) {\n\t\t\t\t\tmeanvar[ 1 ] = NaN;\n\t\t\t\t} else {\n\t\t\t\t\tmeanvar[ 1 ] = 0.0;\n\t\t\t\t}\n\t\t\t} else if ( N < W ) {\n\t\t\t\tmeanvar[ 1 ] = M2 / (N-1);\n\t\t\t} else {\n\t\t\t\tmeanvar[ 1 ] = M2 / n;\n\t\t\t}\n\t\t\treturn meanvar;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\n\t\t\tmeanvar[ 0 ] = mu;\n\t\t\tif ( N === 1 ) {\n\t\t\t\tmeanvar[ 1 ] = 0.0;\n\t\t\t} else {\n\t\t\t\tmeanvar[ 1 ] = M2 / (N-1);\n\t\t\t}\n\t\t\treturn meanvar;\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tmeanvar[ 0 ] = x;\n\t\t\tmeanvar[ 1 ] = 0.0;\n\t\t\treturn meanvar;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\tmeanvar[ 0 ] = mu;\n\t\tmeanvar[ 1 ] = M2 / n;\n\t\treturn meanvar;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanvar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving arithmetic mean and unbiased sample variance incrementally.\n*\n* @module @stdlib/stats/incr/mmeanvar\n*\n* @example\n* var incrmmeanvar = require( '@stdlib/stats/incr/mmeanvar' );\n*\n* var accumulator = incrmmeanvar( 3 );\n*\n* var v = accumulator();\n* // returns null\n*\n* v = accumulator( 2.0 );\n* // returns [ 2.0, 0.0 ]\n*\n* v = accumulator( -5.0 );\n* // returns [ -1.5, 24.5 ]\n*\n* v = accumulator( 3.0 );\n* // returns [ 0.0, 19.0 ]\n*\n* v = accumulator( 5.0 );\n* // returns [ 1.0, 28.0 ]\n*\n* v = accumulator();\n* // returns [ 1.0, 28.0 ]\n*/\n\n// MODULES //\n\nvar incrmmeanvar = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmeanvar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mid-range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmidrange( 3 );\n*\n* var mr = accumulator();\n* // returns null\n*\n* mr = accumulator( 2.0 );\n* // returns 2.0\n*\n* mr = accumulator( -5.0 );\n* // returns -1.5\n*\n* mr = accumulator( 3.0 );\n* // returns -1.0\n*\n* mr = accumulator( 5.0 );\n* // returns 0.0\n*\n* mr = accumulator();\n* // returns 0.0\n*/\nfunction incrmmidrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated mid-range. If not provided a value, the accumulator function returns the current mid-range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} mid-range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( max+min ) / 2.0;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn ( max+min ) / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mid-range incrementally.\n*\n* @module @stdlib/stats/incr/mmidrange\n*\n* @example\n* var incrmmidrange = require( '@stdlib/stats/incr/mmidrange' );\n*\n* var accumulator = incrmmidrange( 3 );\n*\n* var mr = accumulator();\n* // returns null\n*\n* mr = accumulator( 2.0 );\n* // returns 2.0\n*\n* mr = accumulator( -5.0 );\n* // returns -1.5\n*\n* mr = accumulator( 3.0 );\n* // returns -1.0\n*\n* mr = accumulator( 5.0 );\n* // returns 0.0\n*\n* mr = accumulator();\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar incrmmidrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving minimum value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmin( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns -5.0\n*\n* m = accumulator( 3.0 );\n* // returns -5.0\n*\n* m = accumulator( 5.0 );\n* // returns -5.0\n*\n* m = accumulator();\n* // returns -5.0\n*/\nfunction incrmmin( W ) {\n\tvar buf;\n\tvar min;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum. If not provided a value, the accumulator function returns the current minimum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} minimum value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: update initial window...\n\t\tif ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif (\n\t\t\t\tisnan( x ) ||\n\t\t\t\tx < min ||\n\t\t\t\t( x === min && isNegativeZero( x ) )\n\t\t\t) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is NaN or less than current minimum value...\n\t\telse if ( isnan( x ) || x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: outgoing value is the current minimum and the new value is greater than the minimum, and, thus, we need to find a new minimum among the current values...\n\t\telse if ( ( buf[ i ] === min && x > min ) || isnan( buf[ i ] ) ) {\n\t\t\tmin = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum, which is zero, and the new value is also zero, and, thus, we need to correctly handle signed zeros...\n\t\telse if ( buf[ i ] === min && x === min && x === 0.0 ) {\n\t\t\tif ( isNegativeZero( x ) ) {\n\t\t\t\tmin = x;\n\t\t\t} else if ( isNegativeZero( buf[ i ] ) ) {\n\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\tmin = x;\n\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Case: the outgoing and incoming values are both positive zero, so nothing changes\n\t\t}\n\t\t// Case: updating existing window; however, the minimum value does not change so nothing to do but update our buffer...\n\n\t\tbuf[ i ] = x;\n\t\treturn min;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving minimum incrementally.\n*\n* @module @stdlib/stats/incr/mmin\n*\n* @example\n* var incrmmin = require( '@stdlib/stats/incr/mmin' );\n*\n* var accumulator = incrmmin( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns -5.0\n*\n* m = accumulator( 3.0 );\n* // returns -5.0\n*\n* m = accumulator( 5.0 );\n* // returns -5.0\n*\n* m = accumulator();\n* // returns -5.0\n*/\n\n// MODULES //\n\nvar incrmmin = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmmin = require( './../../../incr/mmin' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving minimum absolute value.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 2.0\n*\n* m = accumulator( 5.0 );\n* // returns 3.0\n*\n* m = accumulator();\n* // returns 3.0\n*/\nfunction incrmminabs( W ) {\n\tvar min;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmin = incrmmin( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated minimum absolute value. If not provided a value, the accumulator function returns the current minimum absolute value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} minimum absolute value or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn min();\n\t\t}\n\t\treturn min( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving minimum absolute value incrementally.\n*\n* @module @stdlib/stats/incr/mminabs\n*\n* @example\n* var incrmminabs = require( '@stdlib/stats/incr/mminabs' );\n*\n* var accumulator = incrmminabs( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0 );\n* // returns 2.0\n*\n* m = accumulator( -5.0 );\n* // returns 2.0\n*\n* m = accumulator( 3.0 );\n* // returns 2.0\n*\n* m = accumulator( 5.0 );\n* // returns 2.0\n*\n* m = accumulator();\n* // returns 2.0\n*/\n\n// MODULES //\n\nvar incrmminabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes moving minimum and maximum values.\n*\n* @param {Collection} [out] - output array\n* @param {PositiveInteger} window - window size\n* @throws {TypeError} output argument must be array-like\n* @throws {TypeError} window size must be a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminmax( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\nfunction incrmminmax( out, window ) {\n\tvar minmax;\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar W;\n\tvar N;\n\tvar i;\n\tif ( arguments.length === 1 ) {\n\t\tminmax = [ 0.0, 0.0 ];\n\t\tW = out;\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\tminmax = out;\n\t\tW = window;\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Window size must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum values. If not provided a value, the accumulator function returns the current minimum and maximum values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar sgn;\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn minmax;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min || ( x === min && isNegativeZero( x ) ) ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max || ( x === max && isPositiveZero( x ) ) ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: incoming value is zero, which means we need to be careful and correctly handle signed zeros...\n\t\telse if ( x === 0.0 ) {\n\t\t\tsgn = isNegativeZero( x );\n\t\t\tif ( x === min ) {\n\t\t\t\t// Case: outgoing value is the current minimum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === min &&\n\t\t\t\t\tisNegativeZero( buf[ i ] ) &&\n\t\t\t\t\tsgn === false\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (-,+), we need to search the buffer to see if it contains a negative zero. If so, the minimum value remains negative zero; otherwise, the minimum value is incoming value...\n\t\t\t\t\tmin = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isNegativeZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmin = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn ) {\n\t\t\t\t\t// Ensure minimum value has the correct sign:\n\t\t\t\t\tmin = x;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ( x === max ) {\n\t\t\t\t// Case: outgoing value is the current maximum...\n\t\t\t\tif (\n\t\t\t\t\tbuf[ i ] === max &&\n\t\t\t\t\tisPositiveZero( buf[ i ] ) &&\n\t\t\t\t\tsgn\n\t\t\t\t) {\n\t\t\t\t\t// Because the outgoing and incoming are different signs (+,-), we need to search the buffer to see if it contains a positive zero. If so, the maximum value remains positive zero; otherwise, the maximum value is incoming value...\n\t\t\t\t\tmax = x;\n\t\t\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\t\t\tif ( k !== i && isPositiveZero( buf[ k ] ) ) {\n\t\t\t\t\t\t\tmax = buf[ k ];\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if ( sgn === false ) {\n\t\t\t\t\t// Ensure maximum value has the correct sign:\n\t\t\t\t\tmax = x;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\tminmax[ 0 ] = min;\n\t\tminmax[ 1 ] = max;\n\t\treturn minmax;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmminmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving minimum and maximum incrementally.\n*\n* @module @stdlib/stats/incr/mminmax\n*\n* @example\n* var incrmminmax = require( '@stdlib/stats/incr/mminmax' );\n*\n* var accumulator = incrmminmax( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ -5.0, 2.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ -5.0, 3.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ -5.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ -5.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar incrmminmax = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmminmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isArrayLike = require( '@stdlib/assert/is-array-like-object' );\nvar incrmminmax = require( './../../../incr/mminmax' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes moving minimum and maximum absolute values.\n*\n* @param {Collection} [out] - output array\n* @param {PositiveInteger} window - window size\n* @throws {TypeError} output argument must be array-like\n* @throws {TypeError} window size must be a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmminmaxabs( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 3.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 3.0, 5.0 ]\n*/\nfunction incrmminmaxabs( out, window ) {\n\tvar minmax;\n\tvar o;\n\tvar W;\n\tif ( arguments.length === 1 ) {\n\t\to = [ 0.0, 0.0 ];\n\t\tW = out;\n\t} else {\n\t\tif ( !isArrayLike( out ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Output argument must be an array-like object. Value: `%s`.', out ) );\n\t\t}\n\t\to = out;\n\t\tW = window;\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Window size must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tminmax = incrmminmax( o, W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns updated minimum and maximum absolute values. If not provided a value, the accumulator function returns the current minimum and maximum absolute values.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(ArrayLikeObject|null)} output array or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn minmax();\n\t\t}\n\t\treturn minmax( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmminmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute moving minimum and maximum absolute values incrementally.\n*\n* @module @stdlib/stats/incr/mminmaxabs\n*\n* @example\n* var incrmminmaxabs = require( '@stdlib/stats/incr/mminmaxabs' );\n*\n* var accumulator = incrmminmaxabs( 3 );\n*\n* var mm = accumulator();\n* // returns null\n*\n* mm = accumulator( 2.0 );\n* // returns [ 2.0, 2.0 ]\n*\n* mm = accumulator( -5.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 3.0 );\n* // returns [ 2.0, 5.0 ]\n*\n* mm = accumulator( 5.0 );\n* // returns [ 3.0, 5.0 ]\n*\n* mm = accumulator();\n* // returns [ 3.0, 5.0 ]\n*/\n\n// MODULES //\n\nvar incrmminmaxabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmminmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean percentage error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmpe( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~-58.33\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~-55.56\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~-46.67\n*\n* m = accumulator();\n* // returns ~-46.67\n*/\nfunction incrmmpe( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean percentage error. If not provided input values, the accumulator function returns the current mean percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( 100.0 * ((a-f)/a) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmpe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean percentage error incrementally.\n*\n* @module @stdlib/stats/incr/mmpe\n*\n* @example\n* var incrmmpe = require( '@stdlib/stats/incr/mmpe' );\n*\n* var accumulator = incrmmpe( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~-58.33\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns ~-55.56\n*\n* m = accumulator( 2.0, 5.0 );\n* // returns ~-46.67\n*\n* m = accumulator();\n* // returns ~-46.67\n*/\n\n// MODULES //\n\nvar incrmmpe = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmpe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving mean squared error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmmse( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 25.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 17.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 33.0\n*\n* m = accumulator();\n* // returns 33.0\n*/\nfunction incrmmse( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean squared error. If not provided input values, the accumulator function returns the current mean squared error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean squared error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tr = y - x;\n\t\treturn mean( r*r );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving mean squared error (MSE) incrementally.\n*\n* @module @stdlib/stats/incr/mmse\n*\n* @example\n* var incrmmse = require( '@stdlib/stats/incr/mmse' );\n*\n* var accumulator = incrmmse( 3 );\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 25.0\n*\n* m = accumulator( 3.0, 2.0 );\n* // returns 17.0\n*\n* m = accumulator( 5.0, -2.0 );\n* // returns 33.0\n*\n* m = accumulator();\n* // returns 33.0\n*/\n\n// MODULES //\n\nvar incrmmse = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrmpcorr = require( './../../../incr/mpcorr' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving squared sample Pearson product-moment correlation coefficient.\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmpcorr2( 3 );\n*\n* var r2 = accumulator();\n* // returns null\n*\n* r2 = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r2 = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* r2 = accumulator( 3.0, -1.0 );\n* // returns ~0.86\n*\n* r2 = accumulator( 5.0, -9.5 );\n* // returns ~0.74\n*\n* r2 = accumulator();\n* // returns ~0.74\n*\n* @example\n* var accumulator = incrmpcorr2( 3, -2.0, 10.0 );\n*/\nfunction incrmpcorr2( W, meanx, meany ) {\n\tvar acc;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tacc = incrmpcorr( W, meanx, meany );\n\t} else {\n\t\tacc = incrmpcorr( W );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} squared sample correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = acc();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn r * r;\n\t\t}\n\t\tr = acc( x, y );\n\t\treturn r * r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving squared sample Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/mpcorr2\n*\n* @example\n* var incrmpcorr2 = require( '@stdlib/stats/incr/mpcorr2' );\n*\n* var accumulator = incrmpcorr2( 3 );\n*\n* var r2 = accumulator();\n* // returns null\n*\n* r2 = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r2 = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* r2 = accumulator( 3.0, -1.0 );\n* // returns ~0.86\n*\n* r2 = accumulator( 5.0, -9.5 );\n* // returns ~0.74\n*\n* r2 = accumulator();\n* // returns ~0.74\n*/\n\n// MODULES //\n\nvar incrmpcorr2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrmpcorr = require( './../../../incr/mpcorr' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sample Pearson product-moment correlation distance.\n*\n* ## Method\n*\n* -   The sample Pearson product-moment correlation distance is defined as\n*\n*     ```tex\n*     d_{n} = 1 - r_{n} = 1 - \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_{x,n} \\sigma_{y,n}}\n*     ```\n*\n* -   The implementation thus computes the sample Pearson product-moment correlation coefficient \\\\(r_n\\\\) for each window \\\\(n\\\\) and subtracts the coefficient from 1.\n*\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @throws {TypeError} third argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmpcorrdist( 3 );\n*\n* var d = accumulator();\n* // returns null\n*\n* d = accumulator( 2.0, 1.0 );\n* // returns 1.0\n*\n* d = accumulator( -5.0, 3.14 );\n* // returns ~2.0\n*\n* d = accumulator( 3.0, -1.0 );\n* // returns ~1.925\n*\n* d = accumulator( 5.0, -9.5 );\n* // returns ~1.863\n*\n* d = accumulator();\n* // returns ~1.863\n*\n* @example\n* var accumulator = incrmpcorrdist( 3, -2.0, 10.0 );\n*/\nfunction incrmpcorrdist( W, meanx, meany ) {\n\tvar pcorr;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Third argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tpcorr = incrmpcorr( W, meanx, meany );\n\t} else {\n\t\tpcorr = incrmpcorr( W );\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sample correlation distance. If not provided a value, the accumulator function returns the current sample correlation distance.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sample correlation distance or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = pcorr();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn 1.0 - r;\n\t\t}\n\t\treturn 1.0 - pcorr( x, y );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorrdist;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sample Pearson product-moment correlation distance incrementally.\n*\n* @module @stdlib/stats/incr/mpcorrdist\n*\n* @example\n* var incrmpcorrdist = require( '@stdlib/stats/incr/mpcorrdist' );\n*\n* var accumulator = incrmpcorrdist( 3 );\n*\n* var d = accumulator();\n* // returns null\n*\n* d = accumulator( 2.0, 1.0 );\n* // returns 1.0\n*\n* d = accumulator( -5.0, 3.14 );\n* // returns ~2.0\n*\n* d = accumulator( 3.0, -1.0 );\n* // returns ~1.925\n*\n* d = accumulator( 5.0, -9.5 );\n* // returns ~1.863\n*\n* d = accumulator();\n* // returns ~1.863\n*/\n\n// MODULES //\n\nvar incrmpcorrdist = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmpcorrdist;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean percentage error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmpe();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~-58.33\n*\n* m = accumulator();\n* // returns ~-58.33\n*/\nfunction incrmpe() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean percentage error. If not provided input values, the accumulator function returns the current mean percentage error.\n\t*\n\t* @private\n\t* @param {number} [f] - input value\n\t* @param {number} [a] - input value\n\t* @returns {(number|null)} mean percentage error or null\n\t*/\n\tfunction accumulator( f, a ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\treturn mean( 100.0 * ((a-f)/a) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmpe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean percentage error incrementally.\n*\n* @module @stdlib/stats/incr/mpe\n*\n* @example\n* var incrmpe = require( '@stdlib/stats/incr/mpe' );\n*\n* var accumulator = incrmpe();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns ~33.33\n*\n* m = accumulator( 5.0, 2.0 );\n* // returns ~-58.33\n*\n* m = accumulator();\n* // returns ~-58.33\n*/\n\n// MODULES //\n\nvar incrmpe = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmpe;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isInfinite = require( '@stdlib/math/base/assert/is-infinite' );\nvar frexp = require( '@stdlib/math/base/special/frexp' );\nvar ldexp = require( '@stdlib/math/base/special/ldexp' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// FUNCTIONS //\n\n/**\n* Computes an updated product.\n*\n* @private\n* @param {Array} workspace - workspace array\n* @param {Object} acc - accumulated fractional and exponent parts\n* @param {number} x - multiplicative factor\n* @returns {number} product\n*/\nfunction product( workspace, acc, x ) {\n\t// Split the incoming value into a normalized fraction and exponent:\n\tfrexp( workspace, x );\n\n\t// Update the accumulated fraction:\n\tacc.frac *= workspace[ 0 ];\n\n\t// Update the accumulated exponent:\n\tacc.exp += workspace[ 1 ];\n\n\t// Ensure fraction remains normalized to avoid overflow/underflow...\n\tif ( acc.frac > -0.5 && acc.frac < 0.5 ) {\n\t\tfrexp( workspace, acc.frac );\n\t\tacc.frac = workspace[ 0 ];\n\t\tacc.exp += workspace[ 1 ];\n\t}\n\treturn ldexp( acc.frac, acc.exp );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving product.\n*\n* ## Method\n*\n* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.\n*\n* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).\n*\n*\n* ## References\n*\n* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmprod( 3 );\n*\n* var p = accumulator();\n* // returns null\n*\n* p = accumulator( 2.0 );\n* // returns 2.0\n*\n* p = accumulator( -5.0 );\n* // returns -10.0\n*\n* p = accumulator( 3.0 );\n* // returns -30.0\n*\n* p = accumulator( 5.0 );\n* // returns -75.0\n*\n* p = accumulator();\n* // returns -75.0\n*/\nfunction incrmprod( W ) {\n\tvar parts;\n\tvar prod;\n\tvar buf;\n\tvar acc;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\ti = -1;\n\tN = 0;\n\n\t// Initialize a workspace for `frexp`:\n\tparts = [ 0.0, 0 ];\n\n\t// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):\n\tprod = 1.0;\n\tacc = {};\n\tacc.frac = 0.5;\n\tacc.exp = 1.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated prodct. If not provided a value, the accumulator function returns the current prodct.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} product or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn prod;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tprod = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tprod = product( parts, acc, x );\n\t\t}\n\t\t// Case: outgoing value is a \"special\" value, and, thus, we need to compute the accumulated value...\n\t\telse if (\n\t\t\tbuf[ i ] === 0.0 ||\n\t\t\tisnan( buf[ i ] ) ||\n\t\t\tisInfinite( buf[ i ] )\n\t\t) {\n\t\t\tN = 1;\n\t\t\tacc.frac = 0.5;\n\t\t\tacc.exp = 1.0;\n\t\t\tproduct( parts, acc, x );\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tprod = NaN;\n\t\t\t\t\t\tbreak; // product is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tprod = product( parts, acc, v );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( prod ) === false ) {\n\t\t\tv = x / buf[ i ];\n\t\t\tprod = product( parts, acc, v );\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn prod;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving product incrementally.\n*\n* @module @stdlib/stats/incr/mprod\n*\n* @example\n* var incrmprod = require( '@stdlib/stats/incr/mprod' );\n*\n* var accumulator = incrmprod( 3 );\n*\n* var p = accumulator();\n* // returns null\n*\n* p = accumulator( 2.0 );\n* // returns 2.0\n*\n* p = accumulator( -5.0 );\n* // returns -10.0\n*\n* p = accumulator( 3.0 );\n* // returns -30.0\n*\n* p = accumulator( 5.0 );\n* // returns -75.0\n*\n* p = accumulator();\n* // returns -75.0\n*/\n\n// MODULES //\n\nvar incrmprod = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving range.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmrange( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0 );\n* // returns 7.0\n*\n* r = accumulator( 3.0 );\n* // returns 8.0\n*\n* r = accumulator( 5.0 );\n* // returns 10.0\n*\n* r = accumulator();\n* // returns 10.0\n*/\nfunction incrmrange( W ) {\n\tvar buf;\n\tvar min;\n\tvar max;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tmin = PINF;\n\tmax = NINF;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar v;\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn max - min;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\tif ( x === 0.0 ) {\n\t\t\tx = 0.0; // normalizes +-0\n\t\t}\n\t\t// Case: incoming value is NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tif ( x < min ) {\n\t\t\t\tmin = x;\n\t\t\t}\n\t\t\tif ( x > max ) {\n\t\t\t\tmax = x;\n\t\t\t}\n\t\t}\n\t\t// Case: outgoing value is the current minimum or maximum and the new value is either greater than the minimum or less than the maximum, and, thus, we need to find a new accumulated values among the current buffer values...\n\t\telse if (\n\t\t\t( buf[ i ] === min && x > min ) ||\n\t\t\t( buf[ i ] === max && x < max ) ||\n\t\t\tisnan( buf[ i ] )\n\t\t) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t\tbreak; // no need to continue searching\n\t\t\t\t\t}\n\t\t\t\t\tif ( v < min ) {\n\t\t\t\t\t\tmin = v;\n\t\t\t\t\t}\n\t\t\t\t\tif ( v > max ) {\n\t\t\t\t\t\tmax = v;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: incoming value is less than current minimum value...\n\t\telse if ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\t// Case: incoming value is greater than current maximum value...\n\t\telse if ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\t// Case: updating existing window; however, the minimum and maximum values do not change so nothing to do but update our buffer...\n\t\tbuf[ i ] = x;\n\n\t\treturn max - min;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving range incrementally.\n*\n* @module @stdlib/stats/incr/mrange\n*\n* @example\n* var incrmrange = require( '@stdlib/stats/incr/mrange' );\n*\n* var accumulator = incrmrange( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0 );\n* // returns 0.0\n*\n* r = accumulator( -5.0 );\n* // returns 7.0\n*\n* r = accumulator( 3.0 );\n* // returns 8.0\n*\n* r = accumulator( 5.0 );\n* // returns 10.0\n*\n* r = accumulator();\n* // returns 10.0\n*/\n\n// MODULES //\n\nvar incrmrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmmean = require( './../../../incr/mmean' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving root mean squared error.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmrmse( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 5.0\n*\n* r = accumulator( 3.0, 2.0 );\n* // returns ~4.12\n*\n* r = accumulator( 5.0, -2.0 );\n* // returns ~5.74\n*\n* r = accumulator();\n* // returns ~5.74\n*/\nfunction incrmrmse( W ) {\n\tvar mean;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmean = incrmmean( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated root mean squared error. If not provided input values, the accumulator function returns the current root mean squared error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} root mean squared error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = mean();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn sqrt( r );\n\t\t}\n\t\tr = y - x;\n\t\treturn sqrt( mean( r*r ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmrmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving root mean squared error (RMSE) incrementally.\n*\n* @module @stdlib/stats/incr/mrmse\n*\n* @example\n* var incrmrmse = require( '@stdlib/stats/incr/mrmse' );\n*\n* var accumulator = incrmrmse( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 5.0\n*\n* r = accumulator( 3.0, 2.0 );\n* // returns ~4.12\n*\n* r = accumulator( 5.0, -2.0 );\n* // returns ~5.74\n*\n* r = accumulator();\n* // returns ~5.74\n*/\n\n// MODULES //\n\nvar incrmrmse = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmrmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsum( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator( 3.0 );\n* // returns 0.0\n*\n* sum = accumulator( 5.0 );\n* // returns 3.0\n*\n* sum = accumulator();\n* // returns 3.0\n*/\nfunction incrmsum( W ) {\n\tvar buf;\n\tvar sum;\n\tvar N;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tsum = 0.0;\n\ti = -1;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn sum;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the accumulated value is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tsum = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tN += 1;\n\t\t\tsum += x;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated value...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tsum = x;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tsum = NaN;\n\t\t\t\t\t\tbreak; // sum is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tsum += buf[ k ];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current accumulated value nor the incoming value are NaN, so we need to update the accumulated value...\n\t\telse if ( isnan( sum ) === false ) {\n\t\t\tsum += x - buf[ i ];\n\t\t}\n\t\t// Case: the current accumulated value is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum incrementally.\n*\n* @module @stdlib/stats/incr/msum\n*\n* @example\n* var incrmsum = require( '@stdlib/stats/incr/msum' );\n*\n* var accumulator = incrmsum( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator( 3.0 );\n* // returns 0.0\n*\n* sum = accumulator( 5.0 );\n* // returns 3.0\n*\n* sum = accumulator();\n* // returns 3.0\n*/\n\n// MODULES //\n\nvar incrmsum = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmsum = require( './../../../incr/msum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving residual sum of squares.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmrss( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 50.0\n*\n* r = accumulator( 3.0, 2.0 );\n* // returns 51.0\n*\n* r = accumulator( 5.0, -2.0 );\n* // returns 99.0\n*\n* r = accumulator();\n* // returns 99.0\n*/\nfunction incrmrss( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated residual sum of squares. If not provided input values, the accumulator function returns the current residual sum of squares.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} residual sum of squares or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\tr = y - x;\n\t\treturn sum( r*r );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmrss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving residual sum of squares (RSS) incrementally.\n*\n* @module @stdlib/stats/incr/mrss\n*\n* @example\n* var incrmrss = require( '@stdlib/stats/incr/mrss' );\n*\n* var accumulator = incrmrss( 3 );\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 50.0\n*\n* r = accumulator( 3.0, 2.0 );\n* // returns 51.0\n*\n* r = accumulator( 5.0, -2.0 );\n* // returns 99.0\n*\n* r = accumulator();\n* // returns 99.0\n*/\n\n// MODULES //\n\nvar incrmrss = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmrss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the mean squared error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmse();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 25.0\n*\n* m = accumulator();\n* // returns 25.0\n*/\nfunction incrmse() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated mean squared error. If not provided input values, the accumulator function returns the current mean squared error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} mean squared error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn mean();\n\t\t}\n\t\tr = y - x;\n\t\treturn mean( r*r );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mean squared error incrementally.\n*\n* @module @stdlib/stats/incr/mse\n*\n* @example\n* var incrmse = require( '@stdlib/stats/incr/mse' );\n*\n* var accumulator = incrmse();\n*\n* var m = accumulator();\n* // returns null\n*\n* m = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* m = accumulator( -5.0, 2.0 );\n* // returns 25.0\n*\n* m = accumulator();\n* // returns 25.0\n*/\n\n// MODULES //\n\nvar incrmse = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving corrected sample standard deviation.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute an corrected sample standard deviation.\n*\n* -   We first recognize that the corrected sample standard deviation is defined as the square root of the unbiased sample variance. Accordingly, in order to derive an update equation for the corrected sample standard deviation, deriving an update equation for the unbiased sample variance is sufficient.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmstdev( 3 );\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator( 3.0 );\n* // returns ~4.36\n*\n* s = accumulator( 5.0 );\n* // returns ~5.29\n*\n* s = accumulator();\n* // returns ~5.29\n*\n* @example\n* var accumulator = incrmstdev( 3, 5.0 );\n*/\nfunction incrmstdev( W, mean ) {\n\tvar delta;\n\tvar buf;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Float64Array( W );\n\tn = W - 1;\n\tM2 = 0.0;\n\ti = -1;\n\tN = 0;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn sqrt( M2 / (N-1) );\n\t\t\t}\n\t\t\treturn sqrt( M2 / n );\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn sqrt( M2 / (N-1) );\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tM2 = 0.0;\n\t\t\treturn M2;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn sqrt( M2 / n );\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample standard deviation. If not provided a value, the accumulator function returns the current corrected sample standard deviation.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} corrected sample standard deviation or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn sqrt( M2 / N );\n\t\t\t}\n\t\t\treturn sqrt( M2 / W );\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tM2 += delta * delta;\n\t\t\treturn sqrt( M2 / N );\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tM2 += delta * delta;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tM2 += ( x-tmp ) * ( x-mu + tmp-mu );\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn sqrt( M2 / W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving corrected sample standard deviation incrementally.\n*\n* @module @stdlib/stats/incr/mstdev\n*\n* @example\n* var incrmstdev = require( '@stdlib/stats/incr/mstdev' );\n*\n* var accumulator = incrmstdev( 3 );\n*\n* var s = accumulator();\n* // returns null\n*\n* s = accumulator( 2.0 );\n* // returns 0.0\n*\n* s = accumulator( -5.0 );\n* // returns ~4.95\n*\n* s = accumulator( 3.0 );\n* // returns ~4.36\n*\n* s = accumulator( 5.0 );\n* // returns ~5.29\n*\n* s = accumulator();\n* // returns ~5.29\n*/\n\n// MODULES //\n\nvar incrmstdev = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar incrmsum = require( './../../../incr/msum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumabs( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator( 3.0 );\n* // returns 10.0\n*\n* sum = accumulator( 5.0 );\n* // returns 13.0\n*\n* sum = accumulator();\n* // returns 13.0\n*/\nfunction incrmsumabs( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( abs( x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum of absolute values incrementally.\n*\n* @module @stdlib/stats/incr/msumabs\n*\n* @example\n* var incrmsumabs = require( '@stdlib/stats/incr/msumabs' );\n*\n* var accumulator = incrmsumabs( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator( 3.0 );\n* // returns 10.0\n*\n* sum = accumulator( -5.0 );\n* // returns 13.0\n*\n* sum = accumulator();\n* // returns 13.0\n*/\n\n// MODULES //\n\nvar incrmsumabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmsum = require( './../../../incr/msum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of squared absolute values.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumabs2( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator( 3.0 );\n* // returns 38.0\n*\n* sum = accumulator( 5.0 );\n* // returns 59.0\n*\n* sum = accumulator();\n* // returns 59.0\n*/\nfunction incrmsumabs2( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum of squared absolute values incrementally.\n*\n* @module @stdlib/stats/incr/msumabs2\n*\n* @example\n* var incrmsumabs2 = require( '@stdlib/stats/incr/msumabs2' );\n*\n* var accumulator = incrmsumabs2( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator( 3.0 );\n* // returns 38.0\n*\n* sum = accumulator( -5.0 );\n* // returns 59.0\n*\n* sum = accumulator();\n* // returns 59.0\n*/\n\n// MODULES //\n\nvar incrmsumabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving unbiased sample variance.\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute an unbiased sample variance.\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmvariance( 3 );\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator( 3.0 );\n* // returns 19.0\n*\n* s2 = accumulator( 5.0 );\n* // returns 28.0\n*\n* s2 = accumulator();\n* // returns 28.0\n*\n* @example\n* var accumulator = incrmvariance( 3, -2.0 );\n*/\nfunction incrmvariance( W, mean ) {\n\tvar delta;\n\tvar buf;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Array( W );\n\tn = W - 1;\n\tM2 = 0.0;\n\ti = -1;\n\tN = 0;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn M2 / (N-1);\n\t\t\t}\n\t\t\treturn M2 / n;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0;\n\t\t\t}\n\t\t\treturn M2 / (N-1);\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tM2 = 0.0;\n\t\t\treturn M2;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn M2 / n;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn M2 / N;\n\t\t\t}\n\t\t\treturn M2 / W;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tM2 += delta * delta;\n\t\t\treturn M2 / N;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tM2 += delta * delta;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tM2 += ( x-tmp ) * ( x-mu + tmp-mu );\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\n\t\tbuf[ i ] = x;\n\t\treturn M2 / W;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving unbiased sample variance incrementally.\n*\n* @module @stdlib/stats/incr/mvariance\n*\n* @example\n* var incrmvariance = require( '@stdlib/stats/incr/mvariance' );\n*\n* var accumulator = incrmvariance( 3 );\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator( 3.0 );\n* // returns 19.0\n*\n* s2 = accumulator( 5.0 );\n* // returns 28.0\n*\n* s2 = accumulator();\n* // returns 28.0\n*/\n\n// MODULES //\n\nvar incrmvariance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmsum = require( './../../../incr/msum' );\nvar incrmmean = require( './../../../incr/mmean' );\nvar incrmvariance = require( './../../../incr/mvariance' );\nvar incrmstdev = require( './../../../incr/mstdev' );\nvar incrmmin = require( './../../../incr/mmin' );\nvar incrmmax = require( './../../../incr/mmax' );\nvar incrmrange = require( './../../../incr/mrange' );\nvar incrmmidrange = require( './../../../incr/mmidrange' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving statistical summary.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\nfunction incrmsummary( W ) {\n\tvar mvariance;\n\tvar mmidrange;\n\tvar summary;\n\tvar mrange;\n\tvar mstdev;\n\tvar mmean;\n\tvar msum;\n\tvar mmax;\n\tvar mmin;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tmvariance = incrmvariance( W );\n\tmmidrange = incrmmidrange( W );\n\tmrange = incrmrange( W );\n\tmstdev = incrmstdev( W );\n\tmmean = incrmmean( W );\n\tmsum = incrmsum( W );\n\tmmin = incrmmin( W );\n\tmmax = incrmmax( W );\n\tsummary = {};\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {Object} summary\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn summary;\n\t\t}\n\t\tsummary.window = W;\n\t\tsummary.sum = msum( x );\n\t\tsummary.mean = mmean( x );\n\t\tsummary.variance = mvariance( x );\n\t\tsummary.stdev = mstdev( x );\n\t\tsummary.min = mmin( x );\n\t\tsummary.max = mmax( x );\n\t\tsummary.range = mrange( x );\n\t\tsummary.midrange = mmidrange( x );\n\t\treturn summary;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsummary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving statistical summary incrementally.\n*\n* @module @stdlib/stats/incr/msummary\n*\n* @example\n* var incrmsummary = require( '@stdlib/stats/incr/msummary' );\n*\n* var accumulator = incrmsummary( 3 );\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar incrmsummary = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsummary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar incrmsum = require( './../../../incr/msum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving sum of products.\n*\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} must provide a positive integer\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmsumprod( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0, 3.0 );\n* // returns 6.0\n*\n* sum = accumulator( -5.0, 2.0 );\n* // returns -4.0\n*\n* sum = accumulator( 3.0, -2.0 );\n* // returns -10.0\n*\n* sum = accumulator( 5.0, 3.0 );\n* // returns -1.0\n*\n* sum = accumulator();\n* // returns -1.0\n*/\nfunction incrmsumprod( W ) {\n\tvar sum;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tsum = incrmsum( W );\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x*y );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving sum of products incrementally.\n*\n* @module @stdlib/stats/incr/msumprod\n*\n* @example\n* var incrmsumprod = require( '@stdlib/stats/incr/msumprod' );\n*\n* var accumulator = incrmsumprod( 3 );\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0, 3.0 );\n* // returns 6.0\n*\n* sum = accumulator( -5.0, 2.0 );\n* // returns -4.0\n*\n* sum = accumulator( 3.0, -2.0 );\n* // returns -10.0\n*\n* sum = accumulator( 5.0, 3.0 );\n* // returns -1.0\n*\n* sum = accumulator();\n* // returns -1.0\n*/\n\n// MODULES //\n\nvar incrmsumprod = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmsumprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a moving variance-to-mean ratio (VMR).\n*\n* ## Method\n*\n* -   Let \\\\(W\\\\) be a window of \\\\(N\\\\) elements over which we want to compute a variance-to-mean ratio (VMR).\n*\n* -   The difference between the unbiased sample variance in a window \\\\(W_i\\\\) and the unbiased sample variance in a window \\\\(W_{i+1})\\\\) is given by\n*\n*     ```tex\n*     \\Delta s^2 = s_{i+1}^2 - s_{i}^2\n*     ```\n*\n* -   If we multiply both sides by \\\\(N-1\\\\),\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = (N-1)s_{i+1}^2 - (N-1)s_{i}^2\n*     ```\n*\n* -   If we substitute the definition of the unbiased sample variance having the form\n*\n*     ```tex\n*     \\begin{align*}\n*     s^2 &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i - \\bar{x})^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} (x_i^2 - 2\\bar{x}x_i + \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2\\bar{x} \\sum_{i=1}^{N} x_i + \\sum_{i=1}^{N} \\bar{x}^2) \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - \\frac{2N\\bar{x}\\sum_{i=1}^{N} x_i}{N} + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - 2N\\bar{x}^2 + N\\bar{x}^2 \\biggr) \\\\\n*         &= \\frac{1}{N-1} \\biggl( \\sum_{i=1}^{N} x_i^2 - N\\bar{x}^2 \\biggr)\n*     \\end{align*}\n*     ```\n*\n*     we return\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = \\biggl(\\sum_{k=1}^N x_k^2 - N\\bar{x}_{i+1}^2 \\biggr) - \\biggl(\\sum_{k=0}^{N-1} x_k^2 - N\\bar{x}_{i}^2 \\biggr)\n*     ```\n*\n* -   This can be further simplified by recognizing that subtracting the sums reduces to \\\\(x_N^2 - x_0^2\\\\); in which case,\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= x_N^2 - x_0^2 - N\\bar{x}_{i+1}^2 + N\\bar{x}_{i}^2 \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1}^2 - \\bar{x}_{i}^2) \\\\\n*     &= x_N^2 - x_0^2 - N(\\bar{x}_{i+1} - \\bar{x}_{i})(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* -   Recognizing that the difference of means can be expressed\n*\n*     ```tex\n*     \\bar{x}_{i+1} - \\bar{x}_i = \\frac{1}{N} \\biggl( \\sum_{k=1}^N x_k - \\sum_{k=0}^{N-1} x_k \\biggr) = \\frac{x_N - x_0}{N}\n*     ```\n*\n*     and substituting into the equation above\n*\n*     ```tex\n*     (N-1)(\\Delta s^2) = x_N^2 - x_0^2 - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     ```\n*\n* -   Rearranging terms gives us the update equation for the unbiased sample variance\n*\n*     ```tex\n*     \\begin{align*}\n*     (N-1)(\\Delta s^2) &= (x_N - x_0)(x_N + x_0) - (x_N - x_0)(\\bar{x}_{i+1} + \\bar{x}_{i})\n*     &= (x_N - x_0)(x_N + x_0 - \\bar{x}_{i+1} - \\bar{x}_{i}) \\\\\n*     &= (x_N - x_0)(x_N - \\bar{x}_{i+1} + x_0 - \\bar{x}_{i})\n*     \\end{align*}\n*     ```\n*\n* @param {PositiveInteger} W - window size\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be a positive integer\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrmvmr( 3 );\n*\n* var F = accumulator();\n* // returns null\n*\n* F = accumulator( 2.0 );\n* // returns 0.0\n*\n* F = accumulator( 1.0 );\n* // returns ~0.33\n*\n* F = accumulator( 3.0 );\n* // returns 0.5\n*\n* F = accumulator( 7.0 );\n* // returns ~2.55\n*\n* F = accumulator();\n* // returns ~2.55\n*\n* @example\n* var accumulator = incrmvmr( 3, 2.0 );\n*/\nfunction incrmvmr( W, mean ) {\n\tvar delta;\n\tvar buf;\n\tvar tmp;\n\tvar M2;\n\tvar mu;\n\tvar d1;\n\tvar d2;\n\tvar N;\n\tvar n;\n\tvar i;\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide a positive integer. Value: `%s`.', W ) );\n\t}\n\tbuf = new Array( W );\n\tn = W - 1;\n\tM2 = 0.0;\n\ti = -1;\n\tN = 0;\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tvar k;\n\t\tvar v;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn ( M2/(N-1) ) / mu;\n\t\t\t}\n\t\t\treturn ( M2/n ) / mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tmu = NaN;\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tmu += delta / N;\n\t\t\tM2 += delta * (x - mu);\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn 0.0 / mu;\n\t\t\t}\n\t\t\treturn ( M2/(N-1) ) / mu;\n\t\t}\n\t\t// Case: N = W = 1\n\t\telse if ( N === 1 ) {\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\treturn M2 / mu;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tN = 1;\n\t\t\tmu = x;\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tv = buf[ k ];\n\t\t\t\t\tif ( isnan( v ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tmu = NaN;\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tN += 1;\n\t\t\t\t\tdelta = v - mu;\n\t\t\t\t\tmu += delta / N;\n\t\t\t\t\tM2 += delta * (v - mu);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tdelta = x - tmp;\n\t\t\td1 = tmp - mu;\n\t\t\tmu += delta / W;\n\t\t\td2 = x - mu;\n\t\t\tM2 += delta * (d1 + d2);\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn ( M2/n ) / mu;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tvar k;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N < W ) {\n\t\t\t\treturn ( M2/N ) / mu;\n\t\t\t}\n\t\t\treturn ( M2/W ) / mu;\n\t\t}\n\t\t// Update the index for managing the circular buffer:\n\t\ti = (i+1) % W;\n\n\t\t// Case: incoming value is NaN, the sliding second moment is automatically NaN...\n\t\tif ( isnan( x ) ) {\n\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\tM2 = NaN;\n\t\t}\n\t\t// Case: initial window...\n\t\telse if ( N < W ) {\n\t\t\tbuf[ i ] = x; // update buffer\n\t\t\tN += 1;\n\t\t\tdelta = x - mu;\n\t\t\tM2 += delta * delta;\n\t\t\treturn ( M2/N ) / mu;\n\t\t}\n\t\t// Case: outgoing value is NaN, and, thus, we need to compute the accumulated values...\n\t\telse if ( isnan( buf[ i ] ) ) {\n\t\t\tM2 = 0.0;\n\t\t\tfor ( k = 0; k < W; k++ ) {\n\t\t\t\tif ( k !== i ) {\n\t\t\t\t\tif ( isnan( buf[ k ] ) ) {\n\t\t\t\t\t\tN = W; // explicitly set to avoid `N < W` branch\n\t\t\t\t\t\tM2 = NaN;\n\t\t\t\t\t\tbreak; // second moment is automatically NaN, so no need to continue\n\t\t\t\t\t}\n\t\t\t\t\tdelta = buf[ k ] - mu;\n\t\t\t\t\tM2 += delta * delta;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t// Case: neither the current second moment nor the incoming value are NaN, so we need to update the accumulated values...\n\t\telse if ( isnan( M2 ) === false ) {\n\t\t\ttmp = buf[ i ];\n\t\t\tM2 += ( x-tmp ) * ( x-mu + tmp-mu );\n\t\t}\n\t\t// Case: the current second moment is NaN, so nothing to do until the buffer no longer contains NaN values...\n\t\tbuf[ i ] = x;\n\n\t\treturn ( M2/W ) / mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrmvmr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a moving variance-to-mean ratio (VMR) incrementally.\n*\n* @module @stdlib/stats/incr/mvmr\n*\n* @example\n* var incrmvmr = require( '@stdlib/stats/incr/mvmr' );\n*\n* var accumulator = incrmvmr( 3 );\n*\n* var F = accumulator();\n* // returns null\n*\n* F = accumulator( 2.0 );\n* // returns 0.0\n*\n* F = accumulator( 1.0 );\n* // returns ~0.33\n*\n* F = accumulator( 3.0 );\n* // returns 0.5\n*\n* F = accumulator( 7.0 );\n* // returns ~2.55\n*\n* F = accumulator();\n* // returns ~2.55\n*/\n\n// MODULES //\n\nvar incrmvmr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrmvmr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally updates a count, ignoring `NaN` values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrnancount();\n*\n* var count = accumulator();\n* // returns 0\n*\n* count = accumulator( 2.0 );\n* // returns 1\n*\n* count = accumulator( -5.0 );\n* // returns 2\n*\n* count = accumulator();\n* // returns 2\n*/\nfunction incrnancount() {\n\tvar count = 0;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated count. If not provided a value, the accumulator function returns the current count.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {number} count\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn count;\n\t\t}\n\t\tif ( isnan( x ) === false ) {\n\t\t\tcount += 1;\n\t\t}\n\t\treturn count;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrnancount;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a count incrementally, ignoring `NaN` values.\n*\n* @module @stdlib/stats/incr/nancount\n*\n* @example\n* var incrnancount = require( '@stdlib/stats/incr/nancount' );\n*\n* var accumulator = incrnancount();\n*\n* var nancount = accumulator();\n* // returns 0\n*\n* nancount = accumulator( 2.0 );\n* // returns 1\n*\n* nancount = accumulator( -5.0 );\n* // returns 2\n*\n* nancount = accumulator();\n* // returns 2\n*/\n\n// MODULES //\n\nvar incrnancount = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrnancount;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum.\n*\n* ## Method\n*\n* -   This implementation uses a second-order \"iterative Kahan–Babuška algorithm\", as proposed by Klein (2005).\n*\n* ## References\n*\n* -   Klein, Andreas. 2005. \"A Generalized Kahan-Babuška-Summation-Algorithm.\" _Computing_ 76 (3): 279–93. doi:[10.1007/s00607-005-0139-x](https://doi.org/10.1007/s00607-005-0139-x).\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\nfunction incrsum() {\n\tvar sum;\n\tvar ccs;\n\tvar FLG;\n\tvar cs;\n\tvar cc;\n\tvar t;\n\tvar c;\n\n\tsum = 0.0;\n\tccs = 0.0; // second order correction term for lost low order bits\n\tcs = 0.0; // first order correction term for lost low order bits\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum+cs+ccs : null;\n\t\t}\n\t\tFLG = true;\n\t\tt = sum + x;\n\t\tif ( abs( sum ) >= abs( x ) ) {\n\t\t\tc = (sum-t) + x;\n\t\t} else {\n\t\t\tc = (x-t) + sum;\n\t\t}\n\t\tsum = t;\n\t\tt = cs + c;\n\t\tif ( abs( cs ) >= abs( c ) ) {\n\t\t\tcc = (cs-t) + c;\n\t\t} else {\n\t\t\tcc = (c-t) + cs;\n\t\t}\n\t\tcs = t;\n\t\tccs += cc;\n\t\treturn sum + cs + ccs;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum incrementally.\n*\n* @module @stdlib/stats/incr/sum\n*\n* @example\n* var incrsum = require( '@stdlib/stats/incr/sum' );\n*\n* var accumulator = incrsum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\n\n// MODULES //\n\nvar incrsum = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar incrsum = require( './../../../incr/sum' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum, ignoring `NaN` values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrnansum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( NaN );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\nfunction incrnansum() {\n\tvar sum = incrsum();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 || isnan( x ) ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum incrementally, ignoring `NaN` values.\n*\n* @module @stdlib/stats/incr/nansum\n*\n* @example\n* var incrnansum = require( '@stdlib/stats/incr/nansum' );\n*\n* var accumulator = incrnansum();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( NaN );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns -3.0\n*\n* sum = accumulator();\n* // returns -3.0\n*/\n\n// MODULES //\n\nvar incrnansum = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrnansum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\nfunction incrsumabs() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += abs( x );\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of absolute values incrementally.\n*\n* @module @stdlib/stats/incr/sumabs\n*\n* @example\n* var incrsumabs = require( '@stdlib/stats/incr/sumabs' );\n*\n* var accumulator = incrsumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar incrsumabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar incrsumabs = require( './../../../incr/sumabs' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of absolute values, ignoring `NaN` values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrnansumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( NaN );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\nfunction incrnansumabs() {\n\tvar sum = incrsumabs();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 || isnan( x ) ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrnansumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of absolute values incrementally, ignoring `NaN` values.\n*\n* @module @stdlib/stats/incr/nansumabs\n*\n* @example\n* var incrnansumabs = require( '@stdlib/stats/incr/nansumabs' );\n*\n* var accumulator = incrnansumabs();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 2.0\n*\n* sum = accumulator( NaN );\n* // returns 2.0\n*\n* sum = accumulator( -5.0 );\n* // returns 7.0\n*\n* sum = accumulator();\n* // returns 7.0\n*/\n\n// MODULES //\n\nvar incrnansumabs = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrnansumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of squared absolute values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\nfunction incrsumabs2() {\n\tvar sum = 0.0;\n\tvar FLG;\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( FLG ) ? sum : null;\n\t\t}\n\t\tFLG = true;\n\t\tsum += x * x;\n\t\treturn sum;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of squared absolute values incrementally.\n*\n* @module @stdlib/stats/incr/sumabs2\n*\n* @example\n* var incrsumabs2 = require( '@stdlib/stats/incr/sumabs2' );\n*\n* var accumulator = incrsumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\n\n// MODULES //\n\nvar incrsumabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar incrsumabs2 = require( './../../../incr/sumabs2' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of squared absolute values, ignoring `NaN` values.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrnansumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( NaN );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\nfunction incrnansumabs2() {\n\tvar sum = incrsumabs2();\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated sum. If not provided a value, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} sum or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 || isnan( x ) ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrnansumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of squared absolute values incrementally, ignoring `NaN` values.\n*\n* @module @stdlib/stats/incr/nansumabs2\n*\n* @example\n* var incrnansumabs2 = require( '@stdlib/stats/incr/nansumabs2' );\n*\n* var accumulator = incrnansumabs2();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0 );\n* // returns 4.0\n*\n* sum = accumulator( NaN );\n* // returns 4.0\n*\n* sum = accumulator( -5.0 );\n* // returns 29.0\n*\n* sum = accumulator();\n* // returns 29.0\n*/\n\n// MODULES //\n\nvar incrnansumabs2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrnansumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrpcorr = require( './../../../incr/pcorr' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a squared sample Pearson product-moment correlation coefficient.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrpcorr2();\n*\n* var r2 = accumulator();\n* // returns null\n*\n* r2 = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r2 = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* r2 = accumulator();\n* // returns ~1.0\n*\n* @example\n* var accumulator = incrpcorr2( 2.0, -3.0 );\n*/\nfunction incrpcorr2( meanx, meany ) {\n\tvar acc;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tacc = incrpcorr( meanx, meany );\n\t} else {\n\t\tacc = incrpcorr();\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated accumulated value. If not provided input values, the accumulator function returns the current accumulate value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} squared sample correlation coefficient or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = acc();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn r * r;\n\t\t}\n\t\tr = acc( x, y );\n\t\treturn r * r;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a squared sample Pearson product-moment correlation coefficient incrementally.\n*\n* @module @stdlib/stats/incr/pcorr2\n*\n* @example\n* var incrpcorr2 = require( '@stdlib/stats/incr/pcorr2' );\n*\n* var accumulator = incrpcorr2();\n*\n* var r2 = accumulator();\n* // returns null\n*\n* r2 = accumulator( 2.0, 1.0 );\n* // returns 0.0\n*\n* r2 = accumulator( -5.0, 3.14 );\n* // returns ~1.0\n*\n* r2 = accumulator();\n* // returns ~1.0\n*/\n\n// MODULES //\n\nvar incrpcorr2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorr2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrpcorr = require( './../../../incr/pcorr' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample Pearson product-moment correlation distance.\n*\n* ## Method\n*\n* -   The sample Pearson product-moment correlation distance is defined as\n*\n*     ```tex\n*     d = 1 - r = 1 - \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_x \\sigma_y}\n*     ```\n*\n* -   The implementation thus computes the sample Pearson product-moment correlation coefficient \\\\(r\\\\) and subtracts the coefficient from 1.\n*\n* @param {number} [meanx] - mean value\n* @param {number} [meany] - mean value\n* @throws {TypeError} first argument must be a number\n* @throws {TypeError} second argument must be a number\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrpcorrdist();\n*\n* var d = accumulator();\n* // returns null\n*\n* d = accumulator( 2.0, 1.0 );\n* // returns 1.0\n*\n* d = accumulator( -5.0, 3.14 );\n* // returns ~2.0\n*\n* d = accumulator();\n* // returns ~2.0\n*\n* @example\n* var accumulator = incrpcorrdist( 2.0, -3.0 );\n*/\nfunction incrpcorrdist( meanx, meany ) {\n\tvar pcorr;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( meanx ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be a number. Value: `%s`.', meanx ) );\n\t\t}\n\t\tif ( !isNumber( meany ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', meany ) );\n\t\t}\n\t\tpcorr = incrpcorr( meanx, meany );\n\t} else {\n\t\tpcorr = incrpcorr();\n\t}\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sample correlation distance. If not provided input values, the accumulator function returns the current sample correlation distance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @param {number} [y] - new value\n\t* @returns {(number|null)} sample correlation distance or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = pcorr();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn 1.0 - r;\n\t\t}\n\t\treturn 1.0 - pcorr( x, y );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorrdist;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample Pearson product-moment correlation distance incrementally.\n*\n* @module @stdlib/stats/incr/pcorrdist\n*\n* @example\n* var incrpcorrdist = require( '@stdlib/stats/incr/pcorrdist' );\n*\n* var accumulator = incrpcorrdist();\n*\n* var d = accumulator();\n* // returns null\n*\n* d = accumulator( 2.0, 1.0 );\n* // returns 1.0\n*\n* d = accumulator( -5.0, 3.14 );\n* // returns ~2.0\n*\n* d = accumulator();\n* // returns ~2.0\n*/\n\n// MODULES //\n\nvar incrpcorrdist = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorrdist;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isSquareMatrix = require( '@stdlib/assert/is-square-matrix' );\nvar isVectorLike = require( '@stdlib/assert/is-vector-like' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar ctor = require( '@stdlib/ndarray/ctor' );\nvar bctor = require( '@stdlib/ndarray/base/ctor' );\nvar numel = require( '@stdlib/ndarray/base/numel' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a matrix.\n*\n* @private\n* @param {PositiveInteger} n - matrix order\n* @param {boolean} bool - boolean indicating whether to create a low-level ndarray\n* @returns {ndarray} matrix\n*/\nfunction createMatrix( n, bool ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\tvar f;\n\n\tif ( bool ) {\n\t\tf = bctor;\n\t} else {\n\t\tf = ctor;\n\t}\n\tbuffer = new Float64Array( n*n );\n\tshape = [ n, n ];\n\tstrides = [ n, 1 ];\n\treturn f( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n/**\n* Returns a vector.\n*\n* @private\n* @param {PositiveInteger} N - number of elements\n* @returns {ndarray} vector\n*/\nfunction createVector( N ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\n\tbuffer = new Float64Array( N );\n\tshape = [ N ];\n\tstrides = [ 1 ];\n\n\treturn bctor( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample Pearson product-moment correlation distance matrix.\n*\n* ## Method\n*\n* -   For each sample Pearson product-moment correlation distance, we begin by defining the co-moment \\\\(C_{jn}\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{n} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{C_{n-1}}{n-1} + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n-1}\n*     \\end{align*}\n*     ```\n*\n* -   To calculate the corrected sample standard deviation, we can use Welford's method, which can be derived as follows. We can express the variance as\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* -   To compute the corrected sample standard deviation, we apply Bessel's correction and take the square root.\n*\n* -   The sample Pearson product-moment correlation coefficient can thus be calculated as\n*\n*     ```tex\n*     r = \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_x \\sigma_y}\n*     ```\n*\n*     where \\\\(\\sigma_x\\\\) and \\\\(\\sigma_y\\\\) are the corrected sample standard deviations for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   The sample Pearson product-moment correlation distance is defined as\n*\n*     ```tex\n*     d = 1 - r = 1 - \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_x \\sigma_y}\n*     ```\n*\n* -   The implementation thus computes each sample Pearson product-moment correlation coefficient \\\\(r\\\\) and subtracts each coefficient from 1.\n*\n* @param {(PositiveInteger|ndarray)} out - order of the correlation distance matrix or a square 2-dimensional output ndarray for storing the correlation distance matrix\n* @param {ndarray} [means] - mean values\n* @throws {TypeError} first argument must be either a positive integer or a 2-dimensional ndarray having equal dimensions\n* @throws {TypeError} second argument must be a 1-dimensional ndarray\n* @throws {Error} number of means must match correlation distance matrix dimensions\n* @returns {Function} accumulator function\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n*\n* // Create an output correlation distance matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var dist = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a correlation distance matrix accumulator:\n* var accumulator = incrpcorrdistmat( dist );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === dist );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the correlation distance matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\nfunction incrpcorrdistmat( out, means ) {\n\tvar order;\n\tvar dist;\n\tvar M2;\n\tvar sd;\n\tvar mu;\n\tvar C;\n\tvar d;\n\tvar N;\n\n\tN = 0;\n\tif ( isPositiveInteger( out ) ) {\n\t\torder = out;\n\t\tdist = createMatrix( order, false );\n\t} else if ( isSquareMatrix( out ) ) {\n\t\torder = out.shape[ 0 ];\n\t\tdist = out;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must either specify the order of the correlation distance matrix or be a square 2-dimensional ndarray for storing the correlation distance matrix. Value: `%s`.', out ) );\n\t}\n\t// Create a scratch array for storing residuals (i.e., `x_i - xbar_{i-1}`):\n\td = new Float64Array( order );\n\n\t// Create a scratch array for storing second moments:\n\tM2 = new Float64Array( order );\n\n\t// Create a scratch array for storing standard deviations:\n\tsd = new Float64Array( order );\n\n\t// Create a low-level scratch matrix for storing co-moments:\n\tC = createMatrix( order, true );\n\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isVectorLike( means ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a 1-dimensional ndarray. Value: `%s`.', means ) );\n\t\t}\n\t\tif ( numel( means.shape ) !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. The number of elements (means) in the second argument must match correlation distance matrix dimensions. Expected: %u. Actual: %u.', order, numel( means.shape ) ) );\n\t\t}\n\t\tmu = means; // TODO: should we copy this? Otherwise, internal state could be \"corrupted\" due to mutation outside the accumulator\n\t\treturn accumulator2;\n\t}\n\t// Create an ndarray vector for storing sample means (note: an ndarray interface is not necessary, but it reduces implementation complexity by ensuring a consistent abstraction for accessing and updating sample means):\n\tmu = createVector( order );\n\n\treturn accumulator1;\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated sample correlation distance matrix. If not provided a data vector, the accumulator function returns the current sample correlation distance matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match correlation distance matrix dimensions\n\t* @returns {(ndarray|null)} sample correlation distance matrix or null\n\t*/\n\tfunction accumulator1( v ) {\n\t\tvar denom;\n\t\tvar rdx;\n\t\tvar cij;\n\t\tvar dij;\n\t\tvar sdi;\n\t\tvar di;\n\t\tvar vi;\n\t\tvar m;\n\t\tvar n;\n\t\tvar r;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn dist;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match correlation matrix dimensions. Expected: `%u`. Actual: `%u`.', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tn = N;\n\t\tN += 1;\n\t\tr = n / N;\n\n\t\tdenom = n || 1; // Bessel's correction (avoiding divide-by-zero below)\n\n\t\tif ( N === 1 ) {\n\t\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t\tvi = v.get( i );\n\t\t\t\tm = mu.get( i );\n\n\t\t\t\t// Compute the residual:\n\t\t\t\tdi = vi - m;\n\n\t\t\t\t// Update the sample mean:\n\t\t\t\tm += di / N;\n\t\t\t\tmu.set( i, m );\n\n\t\t\t\t// Update the sample standard deviation:\n\t\t\t\td[ i ] = di;\n\t\t\t\tM2[ i ] += di * ( vi-m );\n\t\t\t\tsd[ i ] = sqrt( M2[i]/denom );\n\n\t\t\t\t// Update the co-moments and correlation distance matrix, recognizing that the matrices are symmetric...\n\t\t\t\trdx = r * d[i]; // if `n=0`, `r=0.0`\n\t\t\t\tfor ( j = 0; j <= i; j++ ) {\n\t\t\t\t\tcij = C.get( i, j ) + ( rdx*d[j] );\n\t\t\t\t\tC.set( i, j, cij );\n\t\t\t\t\tC.set( j, i, cij ); // via symmetry\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t\tvi = v.get( i );\n\t\t\t\tm = mu.get( i );\n\n\t\t\t\t// Compute the residual:\n\t\t\t\tdi = vi - m;\n\n\t\t\t\t// Update the sample mean:\n\t\t\t\tm += di / N;\n\t\t\t\tmu.set( i, m );\n\n\t\t\t\t// Update the sample standard deviation:\n\t\t\t\td[ i ] = di;\n\t\t\t\tM2[ i ] += di * ( vi-m );\n\t\t\t\tsd[ i ] = sqrt( M2[i]/denom );\n\n\t\t\t\t// Update the co-moments and correlation distance matrix, recognizing that the matrices are symmetric...\n\t\t\t\trdx = r * d[i];\n\t\t\t\tsdi = sd[ i ];\n\t\t\t\tfor ( j = 0; j < i; j++ ) {\n\t\t\t\t\tcij = C.get( i, j ) + ( rdx*d[j] );\n\t\t\t\t\tC.set( i, j, cij );\n\t\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\t\tdij = 1.0 - ( (cij/denom)/(sdi*sd[j]) );\n\t\t\t\t\tdist.set( i, j, dij );\n\t\t\t\t\tdist.set( j, i, dij ); // via symmetry\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn dist;\n\t}\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated sample correlation distance matrix. If not provided a data vector, the accumulator function returns the current sample correlation distance matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match correlation distance matrix dimensions\n\t* @returns {(ndarray|null)} sample correlation distance matrix or null\n\t*/\n\tfunction accumulator2( v ) {\n\t\tvar dij;\n\t\tvar cij;\n\t\tvar sdi;\n\t\tvar di;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn dist;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match correlation distance matrix dimensions. Expected: `%u`. Actual: `%u`.', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tN += 1;\n\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t// Compute the residual:\n\t\t\tdi = v.get( i ) - mu.get( i );\n\n\t\t\t// Update standard deviation:\n\t\t\td[ i ] = di;\n\t\t\tM2[ i ] += di * di;\n\t\t\tsd[ i ] = sqrt( M2[i]/N );\n\n\t\t\t// Update the co-moments and correlation distance matrix, recognizing that the matrices are symmetric...\n\t\t\tsdi = sd[ i ];\n\t\t\tfor ( j = 0; j < i; j++ ) {\n\t\t\t\tcij = C.get( i, j ) + ( di*d[j] );\n\t\t\t\tC.set( i, j, cij );\n\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\tdij = 1.0 - ( (cij/N)/(sdi*sd[j]) );\n\t\t\t\tdist.set( i, j, dij );\n\t\t\t\tdist.set( j, i, dij ); // via symmetry\n\t\t\t}\n\t\t}\n\t\treturn dist;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorrdistmat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample Pearson product-moment correlation distance matrix incrementally.\n*\n* @module @stdlib/stats/incr/pcorrdistmat\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n* var incrpcorrdistmat = require( '@stdlib/stats/incr/pcorrdistmat' );\n*\n* // Create an output correlation distance matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var dist = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a correlation distance matrix accumulator:\n* var accumulator = incrpcorrdistmat( dist );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === dist );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the distance matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar incrpcorrdistmat = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorrdistmat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isSquareMatrix = require( '@stdlib/assert/is-square-matrix' );\nvar isVectorLike = require( '@stdlib/assert/is-vector-like' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar ctor = require( '@stdlib/ndarray/ctor' );\nvar bctor = require( '@stdlib/ndarray/base/ctor' );\nvar numel = require( '@stdlib/ndarray/base/numel' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a matrix.\n*\n* @private\n* @param {PositiveInteger} n - matrix order\n* @param {boolean} bool - boolean indicating whether to create a low-level ndarray\n* @returns {ndarray} matrix\n*/\nfunction createMatrix( n, bool ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\tvar f;\n\n\tif ( bool ) {\n\t\tf = bctor;\n\t} else {\n\t\tf = ctor;\n\t}\n\tbuffer = new Float64Array( n*n );\n\tshape = [ n, n ];\n\tstrides = [ n, 1 ];\n\treturn f( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n/**\n* Sets the values along the main diagonal of a square matrix.\n*\n* @private\n* @param {ndarray} matrix - input square matrix\n* @param {number} v - value\n* @returns {ndarray} input matrix\n*/\nfunction diagonal( matrix, v ) {\n\tvar M = matrix.shape[ 0 ];\n\tvar i;\n\tfor ( i = 0; i < M; i++ ) {\n\t\tmatrix.set( i, i, v );\n\t}\n\treturn matrix;\n}\n\n/**\n* Returns a vector.\n*\n* @private\n* @param {PositiveInteger} N - number of elements\n* @returns {ndarray} vector\n*/\nfunction createVector( N ) {\n\tvar strides;\n\tvar buffer;\n\tvar shape;\n\n\tbuffer = new Float64Array( N );\n\tshape = [ N ];\n\tstrides = [ 1 ];\n\n\treturn bctor( 'float64', buffer, shape, strides, 0, 'row-major' );\n}\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sample Pearson product-moment correlation matrix.\n*\n* ## Method\n*\n* -   For each sample Pearson product-moment correlation coefficient, we begin by defining the co-moment \\\\(C_{jn}\\\\)\n*\n*     ```tex\n*     C_n = \\sum_{i=1}^{n} ( x_i - \\bar{x}_n ) ( y_i - \\bar{y}_n )\n*     ```\n*\n*     where \\\\(\\bar{x}_n\\\\) and \\\\(\\bar{y}_n\\\\) are the sample means for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* -   Based on Welford's method, we know the update formulas for the sample means are given by\n*\n*     ```tex\n*     \\bar{x}_n = \\bar{x}_{n-1} + \\frac{x_n - \\bar{x}_{n-1}}{n}\n*     ```\n*\n*     and\n*\n*     ```tex\n*     \\bar{y}_n = \\bar{y}_{n-1} + \\frac{y_n - \\bar{y}_{n-1}}{n}\n*     ```\n*\n* -   Substituting into the equation for \\\\(C_n\\\\) and rearranging terms\n*\n*     ```tex\n*     C_n = C_{n-1} + (x_n - \\bar{x}_n) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n*     where the apparent asymmetry arises from\n*\n*     ```tex\n*     x_n - \\bar{x}_n = \\frac{n-1}{n} (x_n - \\bar{x}_{n-1})\n*     ```\n*\n*     and, hence, the update term can be equivalently expressed\n*\n*     ```tex\n*     \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})\n*     ```\n*\n* -   The covariance can be defined\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{C_n}{n} \\\\\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     \\end{align*}\n*     ```\n*\n* -   Applying Bessel's correction, we arrive at an update formula for calculating an unbiased sample covariance\n*\n*     ```tex\n*     \\begin{align*}\n*     \\operatorname{cov}_n(x,y) &= \\frac{n}{n-1}\\cdot\\frac{(n-1)\\operatorname{cov}_{n-1}(x,y) + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\operatorname{cov}_{n-1}(x,y) + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n} \\\\\n*     &= \\frac{C_{n-1}}{n-1} + \\frac{(x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n}\n*     &= \\frac{C_{n-1} + \\frac{n-1}{n} (x_n - \\bar{x}_{n-1}) (y_n - \\bar{y}_{n-1})}{n-1}\n*     \\end{align*}\n*     ```\n*\n* -   To calculate the corrected sample standard deviation, we can use Welford's method, which can be derived as follows. We can express the variance as\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* -   To compute the corrected sample standard deviation, we apply Bessel's correction and take the square root.\n*\n* -   The sample Pearson product-moment correlation coefficient can thus be calculated as\n*\n*     ```tex\n*     r = \\frac{\\operatorname{cov}_n(x,y)}{\\sigma_x \\sigma_y}\n*     ```\n*\n*     where \\\\(\\sigma_x\\\\) and \\\\(\\sigma_y\\\\) are the corrected sample standard deviations for \\\\(x\\\\) and \\\\(y\\\\), respectively.\n*\n* @param {(PositiveInteger|ndarray)} out - order of the correlation matrix or a square 2-dimensional output ndarray for storing the correlation matrix\n* @param {ndarray} [means] - mean values\n* @throws {TypeError} first argument must be either a positive integer or a 2-dimensional ndarray having equal dimensions\n* @throws {TypeError} second argument must be a 1-dimensional ndarray\n* @throws {Error} number of means must match correlation matrix dimensions\n* @returns {Function} accumulator function\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n*\n* // Create an output correlation matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var corr = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a correlation matrix accumulator:\n* var accumulator = incrpcorrmat( corr );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === corr );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the correlation matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\nfunction incrpcorrmat( out, means ) {\n\tvar order;\n\tvar corr;\n\tvar M2;\n\tvar sd;\n\tvar mu;\n\tvar C;\n\tvar d;\n\tvar N;\n\n\tN = 0;\n\tif ( isPositiveInteger( out ) ) {\n\t\torder = out;\n\t\tcorr = createMatrix( order, false );\n\t} else if ( isSquareMatrix( out ) ) {\n\t\torder = out.shape[ 0 ];\n\t\tcorr = out;\n\t} else {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must either specify the order of the correlation matrix or be a square 2-dimensional ndarray for storing the correlation matrix. Value: `%s`.', out ) );\n\t}\n\t// Set the values along the correlation matrix diagonal to `1` (i.e., a random variable is always perfectly correlated with itself):\n\tcorr = diagonal( corr, 1.0 );\n\n\t// Create a scratch array for storing residuals (i.e., `x_i - xbar_{i-1}`):\n\td = new Float64Array( order );\n\n\t// Create a scratch array for storing second moments:\n\tM2 = new Float64Array( order );\n\n\t// Create a scratch array for storing standard deviations:\n\tsd = new Float64Array( order );\n\n\t// Create a low-level scratch matrix for storing co-moments:\n\tC = createMatrix( order, true );\n\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isVectorLike( means ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a 1-dimensional ndarray. Value: `%s`.', means ) );\n\t\t}\n\t\tif ( numel( means.shape ) !== order ) {\n\t\t\tthrow new Error( 'invalid argument. The number of elements (means) in the second argument must match correlation matrix dimensions. Expected: '+order+'. Actual: '+numel( means.shape )+'.' );\n\t\t}\n\t\tmu = means; // TODO: should we copy this? Otherwise, internal state could be \"corrupted\" due to mutation outside the accumulator\n\t\treturn accumulator2;\n\t}\n\t// Create an ndarray vector for storing sample means (note: an ndarray interface is not necessary, but it reduces implementation complexity by ensuring a consistent abstraction for accessing and updating sample means):\n\tmu = createVector( order );\n\n\treturn accumulator1;\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated sample correlation matrix. If not provided a data vector, the accumulator function returns the current sample correlation matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match correlation matrix dimensions\n\t* @returns {(ndarray|null)} sample correlation matrix or null\n\t*/\n\tfunction accumulator1( v ) {\n\t\tvar denom;\n\t\tvar rdx;\n\t\tvar cij;\n\t\tvar rij;\n\t\tvar sdi;\n\t\tvar di;\n\t\tvar vi;\n\t\tvar m;\n\t\tvar n;\n\t\tvar r;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn corr;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match correlation matrix dimensions. Expected: `%u`. Actual: `%u`.', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tn = N;\n\t\tN += 1;\n\t\tr = n / N;\n\n\t\tdenom = n || 1; // Bessel's correction (avoiding divide-by-zero below)\n\n\t\tif ( N === 1 ) {\n\t\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t\tvi = v.get( i );\n\t\t\t\tm = mu.get( i );\n\n\t\t\t\t// Compute the residual:\n\t\t\t\tdi = vi - m;\n\n\t\t\t\t// Update the sample mean:\n\t\t\t\tm += di / N;\n\t\t\t\tmu.set( i, m );\n\n\t\t\t\t// Update the sample standard deviation:\n\t\t\t\td[ i ] = di;\n\t\t\t\tM2[ i ] += di * ( vi-m );\n\t\t\t\tsd[ i ] = sqrt( M2[i]/denom );\n\n\t\t\t\t// Update the co-moments and correlation matrix, recognizing that the matrices are symmetric...\n\t\t\t\trdx = r * d[i]; // if `n=0`, `r=0.0`\n\t\t\t\tfor ( j = 0; j < i; j++ ) {\n\t\t\t\t\tcij = C.get( i, j ) + ( rdx*d[j] );\n\t\t\t\t\tC.set( i, j, cij );\n\t\t\t\t\tC.set( j, i, cij ); // via symmetry\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t\tvi = v.get( i );\n\t\t\t\tm = mu.get( i );\n\n\t\t\t\t// Compute the residual:\n\t\t\t\tdi = vi - m;\n\n\t\t\t\t// Update the sample mean:\n\t\t\t\tm += di / N;\n\t\t\t\tmu.set( i, m );\n\n\t\t\t\t// Update the sample standard deviation:\n\t\t\t\td[ i ] = di;\n\t\t\t\tM2[ i ] += di * ( vi-m );\n\t\t\t\tsd[ i ] = sqrt( M2[i]/denom );\n\n\t\t\t\trdx = r * d[i];\n\t\t\t\tsdi = sd[ i ];\n\t\t\t\tfor ( j = 0; j < i; j++ ) {\n\t\t\t\t\tcij = C.get( i, j ) + ( rdx*d[j] );\n\t\t\t\t\tC.set( i, j, cij );\n\t\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\t\trij = ( cij/denom ) / ( sdi*sd[j] );\n\t\t\t\t\tcorr.set( i, j, rij );\n\t\t\t\t\tcorr.set( j, i, rij ); // via symmetry\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn corr;\n\t}\n\n\t/**\n\t* If provided a data vector, the accumulator function returns an updated sample correlation matrix. If not provided a data vector, the accumulator function returns the current sample correlation matrix.\n\t*\n\t* @private\n\t* @param {ndarray} [v] - data vector\n\t* @throws {TypeError} must provide a 1-dimensional ndarray\n\t* @throws {Error} vector length must match correlation matrix dimensions\n\t* @returns {(ndarray|null)} sample correlation matrix or null\n\t*/\n\tfunction accumulator2( v ) {\n\t\tvar rij;\n\t\tvar cij;\n\t\tvar sdi;\n\t\tvar di;\n\t\tvar i;\n\t\tvar j;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn corr;\n\t\t}\n\t\tif ( !isVectorLike( v ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a 1-dimensional ndarray. Value: `%s`.', v ) );\n\t\t}\n\t\tif ( v.shape[ 0 ] !== order ) {\n\t\t\tthrow new Error( format( 'invalid argument. Vector length must match correlation matrix dimensions. Expected: `%u`. Actual: `%u`.', order, v.shape[ 0 ] ) );\n\t\t}\n\t\tN += 1;\n\t\tfor ( i = 0; i < order; i++ ) {\n\t\t\t// Compute the residual:\n\t\t\tdi = v.get( i ) - mu.get( i );\n\t\t\td[ i ] = di;\n\n\t\t\t// Update the standard deviation:\n\t\t\tM2[ i ] += di * di;\n\t\t\tsd[ i ] = sqrt( M2[i]/N );\n\n\t\t\t// Update the co-moments and correlation matrix, recognizing that the matrices are symmetric...\n\t\t\tsdi = sd[ i ];\n\t\t\tfor ( j = 0; j < i; j++ ) {\n\t\t\t\tcij = C.get( i, j ) + ( di*d[j] );\n\t\t\t\tC.set( i, j, cij );\n\t\t\t\tC.set( j, i, cij ); // via symmetry\n\n\t\t\t\trij = ( cij/N ) / ( sdi*sd[j] );\n\t\t\t\tcorr.set( i, j, rij );\n\t\t\t\tcorr.set( j, i, rij ); // via symmetry\n\t\t\t}\n\t\t}\n\t\treturn corr;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorrmat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sample Pearson product-moment correlation matrix incrementally.\n*\n* @module @stdlib/stats/incr/pcorrmat\n*\n* @example\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ndarray = require( '@stdlib/ndarray/ctor' );\n* var incrpcorrmat = require( '@stdlib/stats/incr/pcorrmat' );\n*\n* // Create an output correlation matrix:\n* var buffer = new Float64Array( 4 );\n* var shape = [ 2, 2 ];\n* var strides = [ 2, 1 ];\n* var offset = 0;\n* var order = 'row-major';\n*\n* var corr = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Create a correlation matrix accumulator:\n* var accumulator = incrpcorrmat( corr );\n*\n* var out = accumulator();\n* // returns null\n*\n* // Create a data vector:\n* buffer = new Float64Array( 2 );\n* shape = [ 2 ];\n* strides = [ 1 ];\n*\n* var vec = ndarray( 'float64', buffer, shape, strides, offset, order );\n*\n* // Provide data to the accumulator:\n* vec.set( 0, 2.0 );\n* vec.set( 1, 1.0 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* var bool = ( out === corr );\n* // returns true\n*\n* vec.set( 0, -5.0 );\n* vec.set( 1, 3.14 );\n*\n* out = accumulator( vec );\n* // returns <ndarray>\n*\n* // Retrieve the correlation matrix:\n* out = accumulator();\n* // returns <ndarray>\n*/\n\n// MODULES //\n\nvar incrpcorrmat = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrpcorrmat;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar frexp = require( '@stdlib/math/base/special/frexp' );\nvar ldexp = require( '@stdlib/math/base/special/ldexp' );\n\n\n// VARIABLES //\n\n// `frexp` workspace:\nvar PARTS = [ 0.0, 0 ]; // WARNING: not thread safe\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a product.\n*\n* ## Method\n*\n* To avoid overflow/underflow, we store the fractional and exponent parts of intermediate results separately. By keeping a normalized fraction, we prevent underflow/overflow of the fraction. Underflow of the exponent is impossible, as IEEE 754 floating-point exponents are integer values. Overflow of the exponent is possible, but highly unlikely. In the worst case, an intermediate exponent is greater than the minimum safe integer, and adding the exponent of an incoming value does not change the intermediate result. While incorrect, such behavior does not lead to exponent overflow.\n*\n* While intermediate results are largely immune to overflow and not subject to underflow, this does not mean that returned results will never be zero or infinite. In fact, zero (underflow) and infinite (overflow) results may be transient (i.e., infinity followed by a finite number).\n*\n*\n* ## References\n*\n* -   Ueberhuber, Christoph W. 1997. _Numerical Computation 1: Methods, Software, and Analysis_. Springer-Verlag Berlin Heidelberg. doi:[10.1007/978-3-642-59118-1](https://doi.org/10.1007/978-3-642-59118-1).\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrprod();\n*\n* var prod = accumulator();\n* // returns null\n*\n* prod = accumulator( 2.0 );\n* // returns 2.0\n*\n* prod = accumulator( -5.0 );\n* // returns -10.0\n*\n* prod = accumulator();\n* // returns -10.0\n*/\nfunction incrprod() {\n\tvar frac;\n\tvar prod;\n\tvar exp;\n\n\t// Initial product is 1.0, which may be split into its fractional and exponent parts (0.5 x 2.0**1 = 1.0):\n\tfrac = 0.5;\n\texp = 1.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated product. If not provided a value, the accumulator function returns the current product.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} product or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( prod === void 0 ) ? null : prod;\n\t\t}\n\t\t// Split the incoming value into a normalized fraction and exponent:\n\t\tfrexp( PARTS, x );\n\n\t\t// Update the accumulated fraction:\n\t\tfrac *= PARTS[ 0 ];\n\n\t\t// Update the accumulated exponent:\n\t\texp += PARTS[ 1 ];\n\n\t\t// Ensure fraction remains normalized to avoid overflow/underflow...\n\t\tif ( frac > -0.5 && frac < 0.5 ) {\n\t\t\tfrexp( PARTS, frac );\n\t\t\tfrac = PARTS[ 0 ];\n\t\t\texp += PARTS[ 1 ];\n\t\t}\n\t\tprod = ldexp( frac, exp );\n\t\treturn prod;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a product incrementally.\n*\n* @module @stdlib/stats/incr/prod\n*\n* @example\n* var incrprod = require( '@stdlib/stats/incr/prod' );\n*\n* var accumulator = incrprod();\n*\n* var prod = accumulator();\n* // returns null\n*\n* prod = accumulator( 2.0 );\n* // returns 2.0\n*\n* prod = accumulator( -5.0 );\n* // returns -10.0\n*\n* prod = accumulator();\n* // returns -10.0\n*/\n\n// MODULES //\n\nvar incrprod = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a range.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\nfunction incrrange() {\n\tvar range;\n\tvar max = NINF;\n\tvar min = PINF;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated range. If not provided a value, the accumulator function returns the current range.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} range or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn ( range === void 0 ) ? null : range;\n\t\t}\n\t\tif ( isnan( x ) ) {\n\t\t\tmin = x;\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t\tif ( x < min ) {\n\t\t\tmin = x;\n\t\t}\n\t\trange = max - min;\n\t\treturn range;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a range incrementally.\n*\n* @module @stdlib/stats/incr/range\n*\n* @example\n* var incrrange = require( '@stdlib/stats/incr/range' );\n*\n* var accumulator = incrrange();\n*\n* var range = accumulator();\n* // returns null\n*\n* range = accumulator( 3.14 );\n* // returns 0.0\n*\n* range = accumulator( -5.0 );\n* // returns 8.14\n*\n* range = accumulator( 10.1 );\n* // returns 15.1\n*\n* range = accumulator();\n* // returns 15.1\n*/\n\n// MODULES //\n\nvar incrrange = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar incrmean = require( './../../../incr/mean' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the root mean squared error.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrrmse();\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 5.0\n*\n* r = accumulator();\n* // returns 5.0\n*/\nfunction incrrmse() {\n\tvar mean = incrmean();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated root mean squared error. If not provided input values, the accumulator function returns the current root mean squared error.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} root mean squared error or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\tr = mean();\n\t\t\tif ( r === null ) {\n\t\t\t\treturn r;\n\t\t\t}\n\t\t\treturn sqrt( r );\n\t\t}\n\t\tr = y - x;\n\t\treturn sqrt( mean( r*r ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrrmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the root mean squared error (RMSE) incrementally.\n*\n* @module @stdlib/stats/incr/rmse\n*\n* @example\n* var incrrmse = require( '@stdlib/stats/incr/rmse' );\n*\n* var accumulator = incrrmse();\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 5.0\n*\n* r = accumulator();\n* // returns 5.0\n*/\n\n// MODULES //\n\nvar incrrmse = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrrmse;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrsum = require( './../../../incr/sum' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes the residual sum of squares.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrrss();\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 50.0\n*\n* r = accumulator();\n* // returns 50.0\n*/\nfunction incrrss() {\n\tvar sum = incrsum();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated residual sum of squares. If not provided input values, the accumulator function returns the current residual sum of squares.\n\t*\n\t* @private\n\t* @param {number} [x] - input value\n\t* @param {number} [y] - input value\n\t* @returns {(number|null)} residual sum of squares or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tvar r;\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\tr = y - x;\n\t\treturn sum( r*r );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrrss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the residual sum of squares incrementally.\n*\n* @module @stdlib/stats/incr/rss\n*\n* @example\n* var incrrss = require( '@stdlib/stats/incr/rss' );\n*\n* var accumulator = incrrss();\n*\n* var r = accumulator();\n* // returns null\n*\n* r = accumulator( 2.0, 3.0 );\n* // returns 1.0\n*\n* r = accumulator( -5.0, 2.0 );\n* // returns 50.0\n*\n* r = accumulator();\n* // returns 50.0\n*/\n\n// MODULES //\n\nvar incrrss = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrrss;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a corrected sample skewness.\n*\n* ## Method\n*\n* The algorithm computes the corrected sample skewness using the formula for `G_1` in [Joanes and Gill 1998][@joanes:1998].\n*\n* ## References\n*\n* -   Joanes, D. N., and C. A. Gill. 1998. \"Comparing measures of sample skewness and kurtosis.\" _Journal of the Royal Statistical Society: Series D (The Statistician)_ 47 (1). Blackwell Publishers Ltd: 183–89. doi:[10.1111/1467-9884.00122][@joanes:1998].\n*\n* [@joanes:1998]: http://dx.doi.org/10.1111/1467-9884.00122\n*\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrskewness();\n*\n* var skewness = accumulator();\n* // returns null\n*\n* skewness = accumulator( 2.0 );\n* // returns null\n*\n* skewness = accumulator( -5.0 );\n* // returns null\n*\n* skewness = accumulator( -10.0 );\n* // returns ~0.492\n*\n* skewness = accumulator();\n* // returns ~0.492\n*/\nfunction incrskewness() {\n\tvar deltaN;\n\tvar delta;\n\tvar term1;\n\tvar mean;\n\tvar tmp;\n\tvar g1;\n\tvar M2;\n\tvar M3;\n\tvar N;\n\n\tdeltaN = 0.0;\n\tdelta = 0.0;\n\tterm1 = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\tM3 = 0.0;\n\tN = 0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated corrected sample skewness. If not provided a value, the accumulator function returns the current corrected sample skewness.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} corrected sample skewness or null\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N < 3 ) {\n\t\t\t\treturn ( isnan( M3 ) ) ? NaN : null;\n\t\t\t}\n\t\t\t// Calculate the population skewness:\n\t\t\tg1 = sqrt( N )*M3 / pow( M2, 1.5 );\n\n\t\t\t// Return the corrected sample skewness:\n\t\t\treturn sqrt( N*(N-1) )*g1 / (N-2);\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mean;\n\t\tdeltaN = delta / N;\n\t\tterm1 = delta * deltaN * (N-1);\n\n\t\ttmp = term1 * deltaN * (N-2);\n\t\ttmp -= 3.0 * deltaN * M2;\n\t\tM3 += tmp;\n\n\t\tM2 += term1;\n\t\tmean += deltaN;\n\t\tif ( N < 3 ) {\n\t\t\treturn ( isnan( M3 ) ) ? NaN : null;\n\t\t}\n\t\t// Calculate the population skewness:\n\t\tg1 = sqrt( N )*M3 / pow( M2, 1.5 );\n\n\t\t// Return the corrected sample skewness:\n\t\treturn sqrt( N*(N-1) )*g1 / (N-2);\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrskewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a corrected sample skewness incrementally.\n*\n* @module @stdlib/stats/incr/skewness\n*\n* @example\n* var incrskewness = require( '@stdlib/stats/incr/skewness' );\n*\n* var accumulator = incrskewness();\n*\n* var skewness = accumulator();\n* // returns null\n*\n* skewness = accumulator( 2.0 );\n* // returns null\n*\n* skewness = accumulator( -5.0 );\n* // returns null\n*\n* skewness = accumulator( -10.0 );\n* // returns ~0.492\n*\n* skewness = accumulator();\n* // returns ~0.492\n*/\n\n// MODULES //\n\nvar incrskewness = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrskewness;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes an unbiased sample variance.\n*\n* ## Method\n*\n* -   This implementation uses Welford's algorithm for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* ## References\n*\n* -   Welford, B. P. 1962. \"Note on a Method for Calculating Corrected Sums of Squares and Products.\" _Technometrics_ 4 (3). Taylor & Francis: 419–20. doi:[10.1080/00401706.1962.10490022](https://doi.org/10.1080/00401706.1962.10490022).\n* -   van Reeken, A. J. 1968. \"Letters to the Editor: Dealing with Neely's Algorithms.\" _Communications of the ACM_ 11 (3): 149–50. doi:[10.1145/362929.362961](https://doi.org/10.1145/362929.362961).\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrvariance();\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator();\n* // returns 24.5\n*\n* @example\n* var accumulator = incrvariance( 3.14 );\n*/\nfunction incrvariance( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t\t}\n\t\t\treturn M2 / (N-1);\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0;\n\t\t}\n\t\treturn M2 / (N-1);\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated unbiased sample variance. If not provided a value, the accumulator function returns the current unbiased sample variance.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} unbiased sample variance or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn M2 / N;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn M2 / N;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute an unbiased sample variance incrementally.\n*\n* @module @stdlib/stats/incr/variance\n*\n* @example\n* var incrvariance = require( '@stdlib/stats/incr/variance' );\n*\n* var accumulator = incrvariance();\n*\n* var s2 = accumulator();\n* // returns null\n*\n* s2 = accumulator( 2.0 );\n* // returns 0.0\n*\n* s2 = accumulator( -5.0 );\n* // returns 24.5\n*\n* s2 = accumulator();\n* // returns 24.5\n*/\n\n// MODULES //\n\nvar incrvariance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrvariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrcount = require( './../../../incr/count' );\nvar incrmax = require( './../../../incr/max' );\nvar incrmin = require( './../../../incr/min' );\nvar incrrange = require( './../../../incr/range' );\nvar incrmidrange = require( './../../../incr/midrange' );\nvar incrsum = require( './../../../incr/sum' );\nvar incrmean = require( './../../../incr/mean' );\nvar incrvariance = require( './../../../incr/variance' );\nvar incrstdev = require( './../../../incr/stdev' );\nvar incrskewness = require( './../../../incr/skewness' );\nvar incrkurtosis = require( './../../../incr/kurtosis' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a statistical summary.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsummary();\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\nfunction incrsummary() {\n\tvar midrange;\n\tvar variance;\n\tvar skewness;\n\tvar kurtosis;\n\tvar summary;\n\tvar count;\n\tvar range;\n\tvar stdev;\n\tvar mean;\n\tvar max;\n\tvar min;\n\tvar sum;\n\n\t// Incremental count:\n\tcount = incrcount();\n\n\t// Sum:\n\tsum = incrsum();\n\n\t// Sample mean:\n\tmean = incrmean();\n\n\t// Unbiased sample variance:\n\tvariance = incrvariance();\n\n\t// Corrected sample standard deviation:\n\tstdev = incrstdev();\n\n\t// Corrected sample skewness:\n\tskewness = incrskewness();\n\n\t// Corrected excess sample kurtosis:\n\tkurtosis = incrkurtosis();\n\n\t// Maximum value:\n\tmax = incrmax();\n\n\t// Minimum value:\n\tmin = incrmin();\n\n\t// Range (i.e., max-min):\n\trange = incrrange();\n\n\t// Mid-range:\n\tmidrange = incrmidrange();\n\n\t// Initial an object for tracking state:\n\tsummary = {};\n\n\treturn accumulator;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated summary. If not provided a value, the accumulator function returns the current summary.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {Object} summary\n\t*/\n\tfunction accumulator( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn summary;\n\t\t}\n\t\tsummary.count = count( x );\n\t\tsummary.max = max( x );\n\t\tsummary.min = min( x );\n\t\tsummary.range = range( x );\n\t\tsummary.midrange = midrange( x );\n\t\tsummary.sum = sum( x );\n\t\tsummary.mean = mean( x );\n\t\tsummary.variance = variance( x );\n\t\tsummary.stdev = stdev( x );\n\t\tsummary.skewness = skewness( x );\n\t\tsummary.kurtosis = kurtosis( x );\n\t\treturn summary;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsummary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a statistical summary incrementally.\n*\n* @module @stdlib/stats/incr/summary\n*\n* @example\n* var incrsummary = require( '@stdlib/stats/incr/summary' );\n*\n* var accumulator = incrsummary();\n*\n* var summary = accumulator();\n* // returns {}\n*\n* summary = accumulator( 2.0 );\n* // returns {...}\n*\n* summary = accumulator( -5.0 );\n* // returns {...}\n*\n* summary = accumulator();\n* // returns {...}\n*/\n\n// MODULES //\n\nvar incrsummary = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsummary;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrsum = require( './../../../incr/sum' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a sum of products.\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrsumprod();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0, 3.0 );\n* // returns 6.0\n*\n* sum = accumulator( -5.0, 2.0 );\n* // returns -4.0\n*\n* sum = accumulator();\n* // returns -4.0\n*/\nfunction incrsumprod() {\n\tvar sum = incrsum();\n\treturn accumulator;\n\n\t/**\n\t* If provided input values, the accumulator function returns an updated sum. If not provided input values, the accumulator function returns the current sum.\n\t*\n\t* @private\n\t* @param {number} [x] - first value\n\t* @param {number} [y] - second value\n\t* @returns {(number|null)} sum-product or null\n\t*/\n\tfunction accumulator( x, y ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\treturn sum();\n\t\t}\n\t\treturn sum( x*y );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrsumprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a sum of products incrementally.\n*\n* @module @stdlib/stats/incr/sumprod\n*\n* @example\n* var incrsumprod = require( '@stdlib/stats/incr/sumprod' );\n*\n* var accumulator = incrsumprod();\n*\n* var sum = accumulator();\n* // returns null\n*\n* sum = accumulator( 2.0, 3.0 );\n* // returns 6.0\n*\n* sum = accumulator( -5.0, 2.0 );\n* // returns -4.0\n*\n* sum = accumulator();\n* // returns -4.0\n*/\n\n// MODULES //\n\nvar incrsumprod = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrsumprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an accumulator function which incrementally computes a variance-to-mean ratio (VMR).\n*\n* ## Method\n*\n* -   This implementation uses [Welford's method][algorithms-variance] for efficient computation, which can be derived as follows. Let\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n &= n \\sigma_n^2 \\\\\n*         &= \\sum_{i=1}^{n} (x_i - \\mu_n)^2 \\\\\n*         &= \\biggl(\\sum_{i=1}^{n} x_i^2 \\biggr) - n\\mu_n^2\n*     \\end{align*}\n*     ```\n*\n*     Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     S_n - S_{n-1} &= \\sum_{i=1}^{n} x_i^2 - n\\mu_n^2 - \\sum_{i=1}^{n-1} x_i^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - n\\mu_n^2 + (n-1)\\mu_{n-1}^2 \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1}^2 - \\mu_n^2) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + n(\\mu_{n-1} - \\mu_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + (\\mu_{n-1} - x_n)(\\mu_{n-1} + \\mu_n) \\\\\n*                   &= x_n^2 - \\mu_{n-1}^2 + \\mu_{n-1}^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= x_n^2 - x_n\\mu_n - x_n\\mu_{n-1} + \\mu_n\\mu_{n-1} \\\\\n*                   &= (x_n - \\mu_{n-1})(x_n - \\mu_n) \\\\\n*                   &= S_{n-1} + (x_n - \\mu_{n-1})(x_n - \\mu_n)\n*     \\end{align*}\n*     ```\n*\n*     where we use the identity\n*\n*     ```tex\n*     x_n - \\mu_{n-1} = n (\\mu_n - \\mu_{n-1})\n*     ```\n*\n* [algorithms-variance]: https://en.wikipedia.org/wiki/Algorithms_for_calculating_variance\n*\n* @param {number} [mean] - mean value\n* @throws {TypeError} must provide a number primitive\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrvmr();\n*\n* var D = accumulator();\n* // returns null\n*\n* D = accumulator( 2.0 );\n* // returns 0.0\n*\n* D = accumulator( 1.0 );\n* // returns ~0.33\n*\n* D = accumulator();\n* // returns ~0.33\n*\n* @example\n* var accumulator = incrvmr( 3.14 );\n*/\nfunction incrvmr( mean ) {\n\tvar delta;\n\tvar mu;\n\tvar M2;\n\tvar N;\n\n\tM2 = 0.0;\n\tN = 0;\n\tif ( arguments.length ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Must provide a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tmu = mean;\n\t\treturn accumulator2;\n\t}\n\tmu = 0.0;\n\treturn accumulator1;\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator1( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\tif ( N === 1 ) {\n\t\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t\t}\n\t\t\treturn ( M2/(N-1) ) / mu;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tmu += delta / N;\n\t\tM2 += delta * ( x - mu );\n\t\tif ( N < 2 ) {\n\t\t\treturn ( isnan( M2 ) ) ? NaN : 0.0/mu;\n\t\t}\n\t\treturn ( M2/(N-1) ) / mu;\n\t}\n\n\t/**\n\t* If provided a value, the accumulator function returns an updated accumulated value. If not provided a value, the accumulator function returns the current accumulated value.\n\t*\n\t* @private\n\t* @param {number} [x] - new value\n\t* @returns {(number|null)} accumulated value or null\n\t*/\n\tfunction accumulator2( x ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( N === 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn ( M2/N ) / mu;\n\t\t}\n\t\tN += 1;\n\t\tdelta = x - mu;\n\t\tM2 += delta * delta;\n\t\treturn ( M2/N ) / mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrvmr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a variance-to-mean ratio (VMR) incrementally.\n*\n* @module @stdlib/stats/incr/vmr\n*\n* @example\n* var incrvmr = require( '@stdlib/stats/incr/vmr' );\n*\n* var accumulator = incrvmr();\n*\n* var D = accumulator();\n* // returns null\n*\n* D = accumulator( 2.0 );\n* // returns 0.0\n*\n* D = accumulator( 1.0 );\n* // returns ~0.33\n*\n* D = accumulator();\n* // returns ~0.33\n*/\n\n// MODULES //\n\nvar incrvmr = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrvmr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Returns an accumulator function which incrementally computes a weighted arithmetic mean.\n*\n* ## Method\n*\n* -   The weighted arithmetic mean is defined as\n*\n*     ```tex\n*     \\mu = \\frac{\\sum_{i=0}^{n-1} w_i x_i}{\\sum_{i=0}^{n-1} w_i}\n*     ```\n*\n*     where \\\\( w_i \\\\) are the weights.\n*\n* -   The weighted arithmetic mean is equivalent to the simple arithmetic mean when all weights are equal.\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu &= \\frac{\\sum_{i=0}^{n-1} w x_i}{\\sum_{i=0}^{n-1} w} \\\\\n*         &= \\frac{w\\sum_{i=0}^{n-1} x_i}{nw} \\\\\n*         &= \\frac{1}{n} \\sum_{i=0}^{n-1}\n*     \\end{align*}\n*     ```\n*\n* -   If the weights are different, then one can view weights either as sample frequencies or as a means to calculate probabilities where \\\\( p_i = w_i / \\sum w_i \\\\).\n*\n* -   To derive an incremental formula for computing a weighted arithmetic mean, let\n*\n*     ```tex\n*     W_n = \\sum_{i=1}^{n} w_i\n*     ```\n*\n* -   Accordingly,\n*\n*     ```tex\n*     \\begin{align*}\n*     \\mu_n &= \\frac{1}{W_n} \\sum_{i=1}^{n} w_i x_i \\\\\n*         &= \\frac{1}{W_n} \\biggl(w_n x_n + \\sum_{i=1}^{n-1} w_i x_i \\biggr) \\\\\n*         &= \\frac{1}{W_n} (w_n x_n + W_{n-1} \\mu_{n-1}) \\\\\n*         &= \\frac{1}{W_n} (w_n x_n + (W_n - w_n) \\mu_{n-1}) \\\\\n*         &= \\frac{1}{W_n} (W_n \\mu_{n-1} + w_n x_n - w_n\\mu_{n-1}) \\\\\n*         &= \\mu_{n-1} + \\frac{w_n}{W_n} (x_n - \\mu_{n-1})\n*     \\end{align*}\n*     ```\n*\n* @returns {Function} accumulator function\n*\n* @example\n* var accumulator = incrwmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0, 1.0 );\n* // returns 2.0\n*\n* mu = accumulator( 2.0, 0.5 );\n* // returns 2.0\n*\n* mu = accumulator( 3.0, 1.5 );\n* // returns 2.5\n*\n* mu = accumulator();\n* // returns 2.5\n*/\nfunction incrwmean() {\n\tvar wsum;\n\tvar FLG;\n\tvar mu;\n\n\twsum = 0.0;\n\tmu = 0.0;\n\n\treturn accumulator;\n\n\t/**\n\t* If provided arguments, the accumulator function returns an updated weighted mean. If not provided arguments, the accumulator function returns the current weighted mean.\n\t*\n\t* @private\n\t* @param {number} [x] - value\n\t* @param {number} [w] - weight\n\t* @returns {(number|null)} weighted mean or null\n\t*/\n\tfunction accumulator( x, w ) {\n\t\tif ( arguments.length === 0 ) {\n\t\t\tif ( FLG === void 0 ) {\n\t\t\t\treturn null;\n\t\t\t}\n\t\t\treturn mu;\n\t\t}\n\t\tFLG = true;\n\t\twsum += w;\n\t\tmu += ( w/wsum ) * ( x-mu );\n\t\treturn mu;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = incrwmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a weighted arithmetic mean incrementally.\n*\n* @module @stdlib/stats/incr/wmean\n*\n* @example\n* var incrwmean = require( '@stdlib/stats/incr/wmean' );\n*\n* var accumulator = incrwmean();\n*\n* var mu = accumulator();\n* // returns null\n*\n* mu = accumulator( 2.0, 1.0 );\n* // returns 2.0\n*\n* mu = accumulator( 2.0, 0.5 );\n* // returns 2.0\n*\n* mu = accumulator( 3.0, 1.5 );\n* // returns 2.5\n*\n* mu = accumulator();\n* // returns 2.5\n*/\n\n// MODULES //\n\nvar incrwmean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = incrwmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name incrapcorr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/apcorr}\n*/\nsetReadOnly( ns, 'incrapcorr', require( './../../incr/apcorr' ) );\n\n/**\n* @name incrcount\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/count}\n*/\nsetReadOnly( ns, 'incrcount', require( './../../incr/count' ) );\n\n/**\n* @name incrcovariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/covariance}\n*/\nsetReadOnly( ns, 'incrcovariance', require( './../../incr/covariance' ) );\n\n/**\n* @name incrcovmat\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/covmat}\n*/\nsetReadOnly( ns, 'incrcovmat', require( './../../incr/covmat' ) );\n\n/**\n* @name incrcv\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/cv}\n*/\nsetReadOnly( ns, 'incrcv', require( './../../incr/cv' ) );\n\n/**\n* @name increwmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/ewmean}\n*/\nsetReadOnly( ns, 'increwmean', require( './../../incr/ewmean' ) );\n\n/**\n* @name increwstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/ewstdev}\n*/\nsetReadOnly( ns, 'increwstdev', require( './../../incr/ewstdev' ) );\n\n/**\n* @name increwvariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/ewvariance}\n*/\nsetReadOnly( ns, 'increwvariance', require( './../../incr/ewvariance' ) );\n\n/**\n* @name incrgmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/gmean}\n*/\nsetReadOnly( ns, 'incrgmean', require( './../../incr/gmean' ) );\n\n/**\n* @name incrgrubbs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/grubbs}\n*/\nsetReadOnly( ns, 'incrgrubbs', require( './../../incr/grubbs' ) );\n\n/**\n* @name incrhmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/hmean}\n*/\nsetReadOnly( ns, 'incrhmean', require( './../../incr/hmean' ) );\n\n/**\n* @name incrkurtosis\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/kurtosis}\n*/\nsetReadOnly( ns, 'incrkurtosis', require( './../../incr/kurtosis' ) );\n\n/**\n* @name incrmaape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/maape}\n*/\nsetReadOnly( ns, 'incrmaape', require( './../../incr/maape' ) );\n\n/**\n* @name incrmae\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mae}\n*/\nsetReadOnly( ns, 'incrmae', require( './../../incr/mae' ) );\n\n/**\n* @name incrmapcorr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mapcorr}\n*/\nsetReadOnly( ns, 'incrmapcorr', require( './../../incr/mapcorr' ) );\n\n/**\n* @name incrmape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mape}\n*/\nsetReadOnly( ns, 'incrmape', require( './../../incr/mape' ) );\n\n/**\n* @name incrmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/max}\n*/\nsetReadOnly( ns, 'incrmax', require( './../../incr/max' ) );\n\n/**\n* @name incrmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/maxabs}\n*/\nsetReadOnly( ns, 'incrmaxabs', require( './../../incr/maxabs' ) );\n\n/**\n* @name incrmcovariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mcovariance}\n*/\nsetReadOnly( ns, 'incrmcovariance', require( './../../incr/mcovariance' ) );\n\n/**\n* @name incrmcv\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mcv}\n*/\nsetReadOnly( ns, 'incrmcv', require( './../../incr/mcv' ) );\n\n/**\n* @name incrmda\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mda}\n*/\nsetReadOnly( ns, 'incrmda', require( './../../incr/mda' ) );\n\n/**\n* @name incrme\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/me}\n*/\nsetReadOnly( ns, 'incrme', require( './../../incr/me' ) );\n\n/**\n* @name incrmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mean}\n*/\nsetReadOnly( ns, 'incrmean', require( './../../incr/mean' ) );\n\n/**\n* @name incrmeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/meanabs}\n*/\nsetReadOnly( ns, 'incrmeanabs', require( './../../incr/meanabs' ) );\n\n/**\n* @name incrmeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/meanabs2}\n*/\nsetReadOnly( ns, 'incrmeanabs2', require( './../../incr/meanabs2' ) );\n\n/**\n* @name incrmeanstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/meanstdev}\n*/\nsetReadOnly( ns, 'incrmeanstdev', require( './../../incr/meanstdev' ) );\n\n/**\n* @name incrmeanvar\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/meanvar}\n*/\nsetReadOnly( ns, 'incrmeanvar', require( './../../incr/meanvar' ) );\n\n/**\n* @name incrmgmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mgmean}\n*/\nsetReadOnly( ns, 'incrmgmean', require( './../../incr/mgmean' ) );\n\n/**\n* @name incrmgrubbs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mgrubbs}\n*/\nsetReadOnly( ns, 'incrmgrubbs', require( './../../incr/mgrubbs' ) );\n\n/**\n* @name incrmhmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mhmean}\n*/\nsetReadOnly( ns, 'incrmhmean', require( './../../incr/mhmean' ) );\n\n/**\n* @name incrmidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/midrange}\n*/\nsetReadOnly( ns, 'incrmidrange', require( './../../incr/midrange' ) );\n\n/**\n* @name incrmin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/min}\n*/\nsetReadOnly( ns, 'incrmin', require( './../../incr/min' ) );\n\n/**\n* @name incrminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/minabs}\n*/\nsetReadOnly( ns, 'incrminabs', require( './../../incr/minabs' ) );\n\n/**\n* @name incrminmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/minmax}\n*/\nsetReadOnly( ns, 'incrminmax', require( './../../incr/minmax' ) );\n\n/**\n* @name incrminmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/minmaxabs}\n*/\nsetReadOnly( ns, 'incrminmaxabs', require( './../../incr/minmaxabs' ) );\n\n/**\n* @name incrmmaape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmaape}\n*/\nsetReadOnly( ns, 'incrmmaape', require( './../../incr/mmaape' ) );\n\n/**\n* @name incrmmae\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmae}\n*/\nsetReadOnly( ns, 'incrmmae', require( './../../incr/mmae' ) );\n\n/**\n* @name incrmmape\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmape}\n*/\nsetReadOnly( ns, 'incrmmape', require( './../../incr/mmape' ) );\n\n/**\n* @name incrmmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmax}\n*/\nsetReadOnly( ns, 'incrmmax', require( './../../incr/mmax' ) );\n\n/**\n* @name incrmmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmaxabs}\n*/\nsetReadOnly( ns, 'incrmmaxabs', require( './../../incr/mmaxabs' ) );\n\n/**\n* @name incrmmda\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmda}\n*/\nsetReadOnly( ns, 'incrmmda', require( './../../incr/mmda' ) );\n\n/**\n* @name incrmme\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mme}\n*/\nsetReadOnly( ns, 'incrmme', require( './../../incr/mme' ) );\n\n/**\n* @name incrmmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmean}\n*/\nsetReadOnly( ns, 'incrmmean', require( './../../incr/mmean' ) );\n\n/**\n* @name incrmmeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmeanabs}\n*/\nsetReadOnly( ns, 'incrmmeanabs', require( './../../incr/mmeanabs' ) );\n\n/**\n* @name incrmmeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmeanabs2}\n*/\nsetReadOnly( ns, 'incrmmeanabs2', require( './../../incr/mmeanabs2' ) );\n\n/**\n* @name incrmmeanstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmeanstdev}\n*/\nsetReadOnly( ns, 'incrmmeanstdev', require( './../../incr/mmeanstdev' ) );\n\n/**\n* @name incrmmeanvar\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmeanvar}\n*/\nsetReadOnly( ns, 'incrmmeanvar', require( './../../incr/mmeanvar' ) );\n\n/**\n* @name incrmmidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmidrange}\n*/\nsetReadOnly( ns, 'incrmmidrange', require( './../../incr/mmidrange' ) );\n\n/**\n* @name incrmmin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmin}\n*/\nsetReadOnly( ns, 'incrmmin', require( './../../incr/mmin' ) );\n\n/**\n* @name incrmminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mminabs}\n*/\nsetReadOnly( ns, 'incrmminabs', require( './../../incr/mminabs' ) );\n\n/**\n* @name incrmminmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mminmax}\n*/\nsetReadOnly( ns, 'incrmminmax', require( './../../incr/mminmax' ) );\n\n/**\n* @name incrmminmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mminmaxabs}\n*/\nsetReadOnly( ns, 'incrmminmaxabs', require( './../../incr/mminmaxabs' ) );\n\n/**\n* @name incrmmpe\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmpe}\n*/\nsetReadOnly( ns, 'incrmmpe', require( './../../incr/mmpe' ) );\n\n/**\n* @name incrmmse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mmse}\n*/\nsetReadOnly( ns, 'incrmmse', require( './../../incr/mmse' ) );\n\n/**\n* @name incrmpcorr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mpcorr}\n*/\nsetReadOnly( ns, 'incrmpcorr', require( './../../incr/mpcorr' ) );\n\n/**\n* @name incrmpcorr2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mpcorr2}\n*/\nsetReadOnly( ns, 'incrmpcorr2', require( './../../incr/mpcorr2' ) );\n\n/**\n* @name incrmpcorrdist\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mpcorrdist}\n*/\nsetReadOnly( ns, 'incrmpcorrdist', require( './../../incr/mpcorrdist' ) );\n\n/**\n* @name incrmpe\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mpe}\n*/\nsetReadOnly( ns, 'incrmpe', require( './../../incr/mpe' ) );\n\n/**\n* @name incrmprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mprod}\n*/\nsetReadOnly( ns, 'incrmprod', require( './../../incr/mprod' ) );\n\n/**\n* @name incrmrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mrange}\n*/\nsetReadOnly( ns, 'incrmrange', require( './../../incr/mrange' ) );\n\n/**\n* @name incrmrmse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mrmse}\n*/\nsetReadOnly( ns, 'incrmrmse', require( './../../incr/mrmse' ) );\n\n/**\n* @name incrmrss\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mrss}\n*/\nsetReadOnly( ns, 'incrmrss', require( './../../incr/mrss' ) );\n\n/**\n* @name incrmse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mse}\n*/\nsetReadOnly( ns, 'incrmse', require( './../../incr/mse' ) );\n\n/**\n* @name incrmstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mstdev}\n*/\nsetReadOnly( ns, 'incrmstdev', require( './../../incr/mstdev' ) );\n\n/**\n* @name incrmsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/msum}\n*/\nsetReadOnly( ns, 'incrmsum', require( './../../incr/msum' ) );\n\n/**\n* @name incrmsumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/msumabs}\n*/\nsetReadOnly( ns, 'incrmsumabs', require( './../../incr/msumabs' ) );\n\n/**\n* @name incrmsumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/msumabs2}\n*/\nsetReadOnly( ns, 'incrmsumabs2', require( './../../incr/msumabs2' ) );\n\n/**\n* @name incrmsummary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/msummary}\n*/\nsetReadOnly( ns, 'incrmsummary', require( './../../incr/msummary' ) );\n\n/**\n* @name incrmsumprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/msumprod}\n*/\nsetReadOnly( ns, 'incrmsumprod', require( './../../incr/msumprod' ) );\n\n/**\n* @name incrmvariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mvariance}\n*/\nsetReadOnly( ns, 'incrmvariance', require( './../../incr/mvariance' ) );\n\n/**\n* @name incrmvmr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/mvmr}\n*/\nsetReadOnly( ns, 'incrmvmr', require( './../../incr/mvmr' ) );\n\n/**\n* @name incrnancount\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/nancount}\n*/\nsetReadOnly( ns, 'incrnancount', require( './../../incr/nancount' ) );\n\n/**\n* @name incrnansum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/nansum}\n*/\nsetReadOnly( ns, 'incrnansum', require( './../../incr/nansum' ) );\n\n/**\n* @name incrnansumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/nansumabs}\n*/\nsetReadOnly( ns, 'incrnansumabs', require( './../../incr/nansumabs' ) );\n\n/**\n* @name incrnansumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/nansumabs2}\n*/\nsetReadOnly( ns, 'incrnansumabs2', require( './../../incr/nansumabs2' ) );\n\n/**\n* @name incrpcorr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/pcorr}\n*/\nsetReadOnly( ns, 'incrpcorr', require( './../../incr/pcorr' ) );\n\n/**\n* @name incrpcorr2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/pcorr2}\n*/\nsetReadOnly( ns, 'incrpcorr2', require( './../../incr/pcorr2' ) );\n\n/**\n* @name incrpcorrdist\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/pcorrdist}\n*/\nsetReadOnly( ns, 'incrpcorrdist', require( './../../incr/pcorrdist' ) );\n\n/**\n* @name incrpcorrdistmat\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/pcorrdistmat}\n*/\nsetReadOnly( ns, 'incrpcorrdistmat', require( './../../incr/pcorrdistmat' ) );\n\n/**\n* @name incrpcorrmat\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/pcorrmat}\n*/\nsetReadOnly( ns, 'incrpcorrmat', require( './../../incr/pcorrmat' ) );\n\n/**\n* @name incrprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/prod}\n*/\nsetReadOnly( ns, 'incrprod', require( './../../incr/prod' ) );\n\n/**\n* @name incrrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/range}\n*/\nsetReadOnly( ns, 'incrrange', require( './../../incr/range' ) );\n\n/**\n* @name incrrmse\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/rmse}\n*/\nsetReadOnly( ns, 'incrrmse', require( './../../incr/rmse' ) );\n\n/**\n* @name incrrss\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/rss}\n*/\nsetReadOnly( ns, 'incrrss', require( './../../incr/rss' ) );\n\n/**\n* @name incrskewness\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/skewness}\n*/\nsetReadOnly( ns, 'incrskewness', require( './../../incr/skewness' ) );\n\n/**\n* @name incrstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/stdev}\n*/\nsetReadOnly( ns, 'incrstdev', require( './../../incr/stdev' ) );\n\n/**\n* @name incrsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/sum}\n*/\nsetReadOnly( ns, 'incrsum', require( './../../incr/sum' ) );\n\n/**\n* @name incrsumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/sumabs}\n*/\nsetReadOnly( ns, 'incrsumabs', require( './../../incr/sumabs' ) );\n\n/**\n* @name incrsumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/sumabs2}\n*/\nsetReadOnly( ns, 'incrsumabs2', require( './../../incr/sumabs2' ) );\n\n/**\n* @name incrsummary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/summary}\n*/\nsetReadOnly( ns, 'incrsummary', require( './../../incr/summary' ) );\n\n/**\n* @name incrsumprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/sumprod}\n*/\nsetReadOnly( ns, 'incrsumprod', require( './../../incr/sumprod' ) );\n\n/**\n* @name incrvariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/variance}\n*/\nsetReadOnly( ns, 'incrvariance', require( './../../incr/variance' ) );\n\n/**\n* @name incrvmr\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/vmr}\n*/\nsetReadOnly( ns, 'incrvmr', require( './../../incr/vmr' ) );\n\n/**\n* @name incrwmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/incr/wmean}\n*/\nsetReadOnly( ns, 'incrwmean', require( './../../incr/wmean' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrgmean = require( './../../../incr/gmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercugmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercugmean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrgmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercugmean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercugmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative geometric mean.\n*\n* @module @stdlib/stats/iter/cugmean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercugmean = require( '@stdlib/stats/iter/cugmean' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercugmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrhmean = require( './../../../incr/hmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic geometric mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuhmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuhmean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrhmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuhmean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercuhmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative harmonic mean.\n*\n* @module @stdlib/stats/iter/cuhmean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercuhmean = require( '@stdlib/stats/iter/cuhmean' );\n*\n* var rand = runif( 0.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuhmean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmax = require( './../../../incr/max' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative maximum value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumax( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumax( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmax();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumax( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative maximum value.\n*\n* @module @stdlib/stats/iter/cumax\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumax = require( '@stdlib/stats/iter/cumax' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumax( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmaxabs = require( './../../../incr/maxabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative maximum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumaxabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumaxabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmaxabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumaxabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative maximum absolute value.\n*\n* @module @stdlib/stats/iter/cumaxabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumaxabs = require( '@stdlib/stats/iter/cumaxabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumaxabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmean = require( './../../../incr/mean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumean( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmean();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumean( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative arithmetic mean.\n*\n* @module @stdlib/stats/iter/cumean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumean = require( '@stdlib/stats/iter/cumean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumean( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmeanabs = require( './../../../incr/meanabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumeanabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmeanabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumeanabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative arithmetic mean of absolute values.\n*\n* @module @stdlib/stats/iter/cumeanabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumeanabs = require( '@stdlib/stats/iter/cumeanabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmeanabs2 = require( './../../../incr/meanabs2' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumeanabs2( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmeanabs2();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumeanabs2( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative arithmetic mean of squared absolute values.\n*\n* @module @stdlib/stats/iter/cumeanabs2\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumeanabs2 = require( '@stdlib/stats/iter/cumeanabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumeanabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmidrange = require( './../../../incr/midrange' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative mid-range.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumidrange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumidrange( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmidrange();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumidrange( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative mid-range.\n*\n* @module @stdlib/stats/iter/cumidrange\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumidrange = require( '@stdlib/stats/iter/cumidrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumidrange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmin = require( './../../../incr/min' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative minimum value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumin( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercumin( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmin();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercumin( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative minimum value.\n*\n* @module @stdlib/stats/iter/cumin\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercumin = require( '@stdlib/stats/iter/cumin' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercumin( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrminabs = require( './../../../incr/minabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative minimum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuminabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuminabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrminabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuminabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercuminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative minimum absolute value.\n*\n* @module @stdlib/stats/iter/cuminabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercuminabs = require( '@stdlib/stats/iter/cuminabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuminabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrprod = require( './../../../incr/prod' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative product.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuprod( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercuprod( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrprod();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercuprod( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercuprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative product.\n*\n* @module @stdlib/stats/iter/cuprod\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercuprod = require( '@stdlib/stats/iter/cuprod' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercuprod( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrrange = require( './../../../incr/range' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative range.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercurange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercurange( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrrange();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercurange( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercurange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative range.\n*\n* @module @stdlib/stats/iter/curange\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercurange = require( '@stdlib/stats/iter/curange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercurange( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrsum = require( './../../../incr/sum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusum( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusum( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrsum();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusum( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercusum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative sum.\n*\n* @module @stdlib/stats/iter/cusum\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercusum = require( '@stdlib/stats/iter/cusum' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusum( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrsumabs = require( './../../../incr/sumabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusumabs( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrsumabs();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusumabs( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercusumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative sum of absolute values.\n*\n* @module @stdlib/stats/iter/cusumabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercusumabs = require( '@stdlib/stats/iter/cusumabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrsumabs2 = require( './../../../incr/sumabs2' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a cumulative sum of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itercusumabs2( iterator ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrsumabs2();\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tv = iterator.next();\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\treturn v;\n\t\t}\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tv = acc( v.value );\n\t\t} else {\n\t\t\tv = acc( NaN );\n\t\t}\n\t\treturn {\n\t\t\t'value': v,\n\t\t\t'done': false\n\t\t};\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itercusumabs2( iterator[ iteratorSymbol ]() );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itercusumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a cumulative sum of squared absolute values.\n*\n* @module @stdlib/stats/iter/cusumabs2\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itercusumabs2 = require( '@stdlib/stats/iter/cusumabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itercusumabs2( rand );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmax = require( './../../../incr/max' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} maximum value\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermax( rand );\n* // returns <number>\n*/\nfunction itermax( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmax();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of all iterated values.\n*\n* @module @stdlib/stats/iter/max\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermax = require( '@stdlib/stats/iter/max' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermax( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmaxabs = require( './../../../incr/maxabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum absolute value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} maximum absolute value\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermaxabs( rand );\n* // returns <number>\n*/\nfunction itermaxabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmaxabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum absolute value of all iterated values.\n*\n* @module @stdlib/stats/iter/maxabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermaxabs = require( '@stdlib/stats/iter/maxabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermaxabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmean = require( './../../../incr/mean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\nfunction itermean( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmean();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean over all iterated values.\n*\n* @module @stdlib/stats/iter/mean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermean = require( '@stdlib/stats/iter/mean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermean( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmeanabs = require( './../../../incr/meanabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean of absolute values\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs( rand );\n* // returns <number>\n*/\nfunction itermeanabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmeanabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of absolute values for all iterated values.\n*\n* @module @stdlib/stats/iter/meanabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermeanabs = require( '@stdlib/stats/iter/meanabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmeanabs2 = require( './../../../incr/meanabs2' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of squared absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} arithmetic mean of squared absolute values\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs2( rand );\n* // returns <number>\n*/\nfunction itermeanabs2( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmeanabs2();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of squared absolute values for all iterated values.\n*\n* @module @stdlib/stats/iter/meanabs2\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermeanabs2 = require( '@stdlib/stats/iter/meanabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermeanabs2( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmidrange = require( './../../../incr/midrange' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the mid-range of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} mid-range\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = itermidrange( rand );\n* // returns <number>\n*/\nfunction itermidrange( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmidrange();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the mid-range of all iterated values.\n*\n* @module @stdlib/stats/iter/midrange\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermidrange = require( '@stdlib/stats/iter/midrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = itermidrange( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrmin = require( './../../../incr/min' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} minimum value\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermin( rand );\n* // returns <number>\n*/\nfunction itermin( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrmin();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum value of all iterated values.\n*\n* @module @stdlib/stats/iter/min\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermin = require( '@stdlib/stats/iter/min' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = itermin( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrminabs = require( './../../../incr/minabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the minimum absolute value of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} minimum absolute value\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = iterminabs( rand );\n* // returns <number>\n*/\nfunction iterminabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrminabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the minimum absolute value of all iterated values.\n*\n* @module @stdlib/stats/iter/minabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var iterminabs = require( '@stdlib/stats/iter/minabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var m = iterminabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmax = require( './../../../incr/mmax' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving maximum value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmax( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmax( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmax( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmax( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving maximum value.\n*\n* @module @stdlib/stats/iter/mmax\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmax = require( '@stdlib/stats/iter/mmax' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmax( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmaxabs = require( './../../../incr/mmaxabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving maximum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmaxabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmaxabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmaxabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmaxabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmaxabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving maximum absolute value.\n*\n* @module @stdlib/stats/iter/mmaxabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmaxabs = require( '@stdlib/stats/iter/mmaxabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmaxabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmean = require( './../../../incr/mmean' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmean( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmean( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmean( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmean( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving arithmetic mean.\n*\n* @module @stdlib/stats/iter/mmean\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmean = require( '@stdlib/stats/iter/mmean' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmean( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmeanabs = require( './../../../incr/mmeanabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmeanabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmeanabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmeanabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmeanabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving arithmetic mean of absolute values.\n*\n* @module @stdlib/stats/iter/mmeanabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmeanabs = require( '@stdlib/stats/iter/mmeanabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmeanabs2 = require( './../../../incr/mmeanabs2' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving arithmetic mean of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmeanabs2( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmeanabs2( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmeanabs2( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmeanabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving arithmetic mean of squared absolute values.\n*\n* @module @stdlib/stats/iter/mmeanabs2\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmeanabs2 = require( '@stdlib/stats/iter/mmeanabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmeanabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmidrange = require( './../../../incr/mmidrange' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving mid-range.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmidrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmidrange( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmidrange( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmidrange( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmidrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving mid-range.\n*\n* @module @stdlib/stats/iter/mmidrange\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmidrange = require( '@stdlib/stats/iter/mmidrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmidrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmmin = require( './../../../incr/mmin' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving minimum value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmin( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermmin( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmmin( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermmin( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermmin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving minimum value.\n*\n* @module @stdlib/stats/iter/mmin\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermmin = require( '@stdlib/stats/iter/mmin' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermmin( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmminabs = require( './../../../incr/mminabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving minimum absolute value.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermminabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermminabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmminabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermminabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermminabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving minimum absolute value.\n*\n* @module @stdlib/stats/iter/mminabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermminabs = require( '@stdlib/stats/iter/mminabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermminabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmprod = require( './../../../incr/mprod' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving product.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermprod( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermprod( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmprod( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermprod( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving product.\n*\n* @module @stdlib/stats/iter/mprod\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermprod = require( '@stdlib/stats/iter/mprod' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermprod( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmrange = require( './../../../incr/mrange' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving range.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermrange( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmrange( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermrange( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving range.\n*\n* @module @stdlib/stats/iter/mrange\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermrange = require( '@stdlib/stats/iter/mrange' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermrange( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmsum = require( './../../../incr/msum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsum( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsum( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmsum( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator` and the provided iterator is iterable, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsum( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermsum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving sum.\n*\n* @module @stdlib/stats/iter/msum\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermsum = require( '@stdlib/stats/iter/msum' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsum( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmsumabs = require( './../../../incr/msumabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum of absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsumabs( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmsumabs( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsumabs( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermsumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving sum of absolute values.\n*\n* @module @stdlib/stats/iter/msumabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermsumabs = require( '@stdlib/stats/iter/msumabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' ).isPrimitive;\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar iteratorSymbol = require( '@stdlib/symbol/iterator' );\nvar incrmsumabs2 = require( './../../../incr/msumabs2' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Returns an iterator which iteratively computes a moving sum of squared absolute values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {PositiveInteger} W - window size\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a positive integer\n* @returns {Iterator} iterator\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\nfunction itermsumabs2( iterator, W ) {\n\tvar iter;\n\tvar FLG;\n\tvar acc;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( !isPositiveInteger( W ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a positive integer. Value: `%s`.', W ) );\n\t}\n\tacc = incrmsumabs2( W );\n\n\t// Create an iterator protocol-compliant object:\n\titer = {};\n\tsetReadOnly( iter, 'next', next );\n\tsetReadOnly( iter, 'return', end );\n\n\t// If an environment supports `Symbol.iterator`, make the iterator iterable:\n\tif ( iteratorSymbol && isFunction( iterator[ iteratorSymbol ] ) ) {\n\t\tsetReadOnly( iter, iteratorSymbol, factory );\n\t}\n\treturn iter;\n\n\t/**\n\t* Returns an iterator protocol-compliant object containing the next iterated value.\n\t*\n\t* @private\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction next() {\n\t\tvar out;\n\t\tvar v;\n\t\tif ( FLG ) {\n\t\t\treturn {\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\tout = {};\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tout.value = acc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tout.value = acc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tFLG = true;\n\t\t\tout.done = true;\n\t\t} else {\n\t\t\tout.done = false;\n\t\t}\n\t\treturn out;\n\t}\n\n\t/**\n\t* Finishes an iterator.\n\t*\n\t* @private\n\t* @param {*} [value] - value to return\n\t* @returns {Object} iterator protocol-compliant object\n\t*/\n\tfunction end( value ) {\n\t\tFLG = true;\n\t\tif ( arguments.length ) {\n\t\t\treturn {\n\t\t\t\t'value': value,\n\t\t\t\t'done': true\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\t'done': true\n\t\t};\n\t}\n\n\t/**\n\t* Returns a new iterator.\n\t*\n\t* @private\n\t* @returns {Iterator} iterator\n\t*/\n\tfunction factory() {\n\t\treturn itermsumabs2( iterator[ iteratorSymbol ](), W );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = itermsumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Create an iterator which iteratively computes a moving sum of squared absolute values.\n*\n* @module @stdlib/stats/iter/msumabs2\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itermsumabs2 = require( '@stdlib/stats/iter/msumabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var it = itermsumabs2( rand, 3 );\n*\n* var v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* v = it.next().value;\n* // returns <number>\n*\n* // ...\n*/\n\n// MODULES //\n\nvar iterator = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = iterator;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrprod = require( './../../../incr/prod' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the product of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} product\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var p = iterprod( rand );\n* // returns <number>\n*/\nfunction iterprod( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrprod();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterprod;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the product of all iterated values.\n*\n* @module @stdlib/stats/iter/prod\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var iterprod = require( '@stdlib/stats/iter/prod' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var p = iterprod( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrrange = require( './../../../incr/range' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the range of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} range\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = iterrange( rand );\n* // returns <number>\n*/\nfunction iterrange( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrrange();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterrange;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of all iterated values.\n*\n* @module @stdlib/stats/iter/range\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var iterrange = require( '@stdlib/stats/iter/range' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var v = iterrange( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrstdev = require( './../../../incr/stdev' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the corrected sample standard deviation over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} corrected sample standard deviation\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\nfunction iterstdev( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tacc = incrstdev( mean );\n\t} else {\n\t\tacc = incrstdev();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = iterstdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the corrected sample standard deviation over all iterated values.\n*\n* @module @stdlib/stats/iter/stdev\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var iterstdev = require( '@stdlib/stats/iter/stdev' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = iterstdev( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrsum = require( './../../../incr/sum' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersum( rand );\n* // returns <number>\n*/\nfunction itersum( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrsum();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itersum;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of all iterated values.\n*\n* @module @stdlib/stats/iter/sum\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itersum = require( '@stdlib/stats/iter/sum' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersum( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrsumabs = require( './../../../incr/sumabs' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum of absolute values\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs( rand );\n* // returns <number>\n*/\nfunction itersumabs( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrsumabs();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itersumabs;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of absolute values for all iterated values.\n*\n* @module @stdlib/stats/iter/sumabs\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itersumabs = require( '@stdlib/stats/iter/sumabs' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar incrsumabs2 = require( './../../../incr/sumabs2' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the sum of squared absolute values for all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @throws {TypeError} must provide an iterator\n* @returns {(number|null)} sum of squared absolute values\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs2( rand );\n* // returns <number>\n*/\nfunction itersumabs2( iterator ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Must provide an iterator. Value: `%s`.', iterator ) );\n\t}\n\tacc = incrsumabs2();\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itersumabs2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the sum of squared absolute values for all iterated values.\n*\n* @module @stdlib/stats/iter/sumabs2\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itersumabs2 = require( '@stdlib/stats/iter/sumabs2' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s = itersumabs2( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isIteratorLike = require( '@stdlib/assert/is-iterator-like' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar incrvariance = require( './../../../incr/variance' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Computes the unbiased sample variance over all iterated values.\n*\n* @param {Iterator} iterator - input iterator\n* @param {number} [mean] - mean value\n* @throws {TypeError} first argument must be an iterator\n* @throws {TypeError} second argument must be a number\n* @returns {(number|null)} unbiased sample variance\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s2 = itervariance( rand );\n* // returns <number>\n*/\nfunction itervariance( iterator, mean ) {\n\tvar acc;\n\tvar v;\n\tif ( !isIteratorLike( iterator ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an iterator. Value: `%s`.', iterator ) );\n\t}\n\tif ( arguments.length > 1 ) {\n\t\tif ( !isNumber( mean ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a number. Value: `%s`.', mean ) );\n\t\t}\n\t\tacc = incrvariance( mean );\n\t} else {\n\t\tacc = incrvariance();\n\t}\n\twhile ( true ) {\n\t\tv = iterator.next();\n\t\tif ( typeof v.value === 'number' ) {\n\t\t\tacc( v.value );\n\t\t} else if ( hasOwnProp( v, 'value' ) ) {\n\t\t\tacc( NaN );\n\t\t}\n\t\tif ( v.done ) {\n\t\t\tbreak;\n\t\t}\n\t}\n\treturn acc();\n}\n\n\n// EXPORTS //\n\nmodule.exports = itervariance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2019 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the unbiased sample variance over all iterated values.\n*\n* @module @stdlib/stats/iter/variance\n*\n* @example\n* var runif = require( '@stdlib/random/iter/uniform' );\n* var itervariance = require( '@stdlib/stats/iter/variance' );\n*\n* var rand = runif( -10.0, 10.0, {\n*     'iter': 100\n* });\n*\n* var s2 = itervariance( rand );\n* // returns <number>\n*/\n\n// MODULES //\n\nvar main = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name itercugmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cugmean}\n*/\nsetReadOnly( ns, 'itercugmean', require( './../../iter/cugmean' ) );\n\n/**\n* @name itercuhmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuhmean}\n*/\nsetReadOnly( ns, 'itercuhmean', require( './../../iter/cuhmean' ) );\n\n/**\n* @name itercumax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumax}\n*/\nsetReadOnly( ns, 'itercumax', require( './../../iter/cumax' ) );\n\n/**\n* @name itercumaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumaxabs}\n*/\nsetReadOnly( ns, 'itercumaxabs', require( './../../iter/cumaxabs' ) );\n\n/**\n* @name itercumean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumean}\n*/\nsetReadOnly( ns, 'itercumean', require( './../../iter/cumean' ) );\n\n/**\n* @name itercumeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumeanabs}\n*/\nsetReadOnly( ns, 'itercumeanabs', require( './../../iter/cumeanabs' ) );\n\n/**\n* @name itercumeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumeanabs2}\n*/\nsetReadOnly( ns, 'itercumeanabs2', require( './../../iter/cumeanabs2' ) );\n\n/**\n* @name itercumidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumidrange}\n*/\nsetReadOnly( ns, 'itercumidrange', require( './../../iter/cumidrange' ) );\n\n/**\n* @name itercumin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cumin}\n*/\nsetReadOnly( ns, 'itercumin', require( './../../iter/cumin' ) );\n\n/**\n* @name itercuminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuminabs}\n*/\nsetReadOnly( ns, 'itercuminabs', require( './../../iter/cuminabs' ) );\n\n/**\n* @name itercuprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cuprod}\n*/\nsetReadOnly( ns, 'itercuprod', require( './../../iter/cuprod' ) );\n\n/**\n* @name itercurange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/curange}\n*/\nsetReadOnly( ns, 'itercurange', require( './../../iter/curange' ) );\n\n/**\n* @name itercusum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusum}\n*/\nsetReadOnly( ns, 'itercusum', require( './../../iter/cusum' ) );\n\n/**\n* @name itercusumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusumabs}\n*/\nsetReadOnly( ns, 'itercusumabs', require( './../../iter/cusumabs' ) );\n\n/**\n* @name itercusumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/cusumabs2}\n*/\nsetReadOnly( ns, 'itercusumabs2', require( './../../iter/cusumabs2' ) );\n\n/**\n* @name itermax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/max}\n*/\nsetReadOnly( ns, 'itermax', require( './../../iter/max' ) );\n\n/**\n* @name itermaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/maxabs}\n*/\nsetReadOnly( ns, 'itermaxabs', require( './../../iter/maxabs' ) );\n\n/**\n* @name itermean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mean}\n*/\nsetReadOnly( ns, 'itermean', require( './../../iter/mean' ) );\n\n/**\n* @name itermeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/meanabs}\n*/\nsetReadOnly( ns, 'itermeanabs', require( './../../iter/meanabs' ) );\n\n/**\n* @name itermeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/meanabs2}\n*/\nsetReadOnly( ns, 'itermeanabs2', require( './../../iter/meanabs2' ) );\n\n/**\n* @name itermidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/midrange}\n*/\nsetReadOnly( ns, 'itermidrange', require( './../../iter/midrange' ) );\n\n/**\n* @name itermin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/min}\n*/\nsetReadOnly( ns, 'itermin', require( './../../iter/min' ) );\n\n/**\n* @name iterminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/minabs}\n*/\nsetReadOnly( ns, 'iterminabs', require( './../../iter/minabs' ) );\n\n/**\n* @name itermmax\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmax}\n*/\nsetReadOnly( ns, 'itermmax', require( './../../iter/mmax' ) );\n\n/**\n* @name itermmaxabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmaxabs}\n*/\nsetReadOnly( ns, 'itermmaxabs', require( './../../iter/mmaxabs' ) );\n\n/**\n* @name itermmean\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmean}\n*/\nsetReadOnly( ns, 'itermmean', require( './../../iter/mmean' ) );\n\n/**\n* @name itermmeanabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmeanabs}\n*/\nsetReadOnly( ns, 'itermmeanabs', require( './../../iter/mmeanabs' ) );\n\n/**\n* @name itermmeanabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmeanabs2}\n*/\nsetReadOnly( ns, 'itermmeanabs2', require( './../../iter/mmeanabs2' ) );\n\n/**\n* @name itermmidrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmidrange}\n*/\nsetReadOnly( ns, 'itermmidrange', require( './../../iter/mmidrange' ) );\n\n/**\n* @name itermmin\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mmin}\n*/\nsetReadOnly( ns, 'itermmin', require( './../../iter/mmin' ) );\n\n/**\n* @name itermminabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mminabs}\n*/\nsetReadOnly( ns, 'itermminabs', require( './../../iter/mminabs' ) );\n\n/**\n* @name itermprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mprod}\n*/\nsetReadOnly( ns, 'itermprod', require( './../../iter/mprod' ) );\n\n/**\n* @name itermrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/mrange}\n*/\nsetReadOnly( ns, 'itermrange', require( './../../iter/mrange' ) );\n\n/**\n* @name itermsum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msum}\n*/\nsetReadOnly( ns, 'itermsum', require( './../../iter/msum' ) );\n\n/**\n* @name itermsumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msumabs}\n*/\nsetReadOnly( ns, 'itermsumabs', require( './../../iter/msumabs' ) );\n\n/**\n* @name itermsumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/msumabs2}\n*/\nsetReadOnly( ns, 'itermsumabs2', require( './../../iter/msumabs2' ) );\n\n/**\n* @name iterprod\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/prod}\n*/\nsetReadOnly( ns, 'iterprod', require( './../../iter/prod' ) );\n\n/**\n* @name iterrange\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/range}\n*/\nsetReadOnly( ns, 'iterrange', require( './../../iter/range' ) );\n\n/**\n* @name iterstdev\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/stdev}\n*/\nsetReadOnly( ns, 'iterstdev', require( './../../iter/stdev' ) );\n\n/**\n* @name itersum\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sum}\n*/\nsetReadOnly( ns, 'itersum', require( './../../iter/sum' ) );\n\n/**\n* @name itersumabs\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sumabs}\n*/\nsetReadOnly( ns, 'itersumabs', require( './../../iter/sumabs' ) );\n\n/**\n* @name itersumabs2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/sumabs2}\n*/\nsetReadOnly( ns, 'itersumabs2', require( './../../iter/sumabs2' ) );\n\n/**\n* @name itervariance\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/iter/variance}\n*/\nsetReadOnly( ns, 'itervariance', require( './../../iter/variance' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Computes the unbiased standard deviation.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column for which to calculate the standard deviation\n* @returns {number} standard deviation\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = stdev( arr, 1 );\n* // returns ~2.568\n*/\nfunction stdev( arr, j ) {\n\tvar delta;\n\tvar mean;\n\tvar M2;\n\tvar i;\n\tvar x;\n\tdelta = 0.0;\n\tmean = 0.0;\n\tM2 = 0.0;\n\n\tfor ( i = 0; i < arr.shape[0]; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tdelta = x - mean;\n\t\tmean += delta / ( i+1 );\n\t\tM2 += delta * ( x - mean );\n\t}\n\treturn sqrt( M2 / ( i - 1 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = stdev;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n/**\n* Computes a quantile of the values in a numeric array.\n*\n* @private\n* @param {NumericArray} arr - sorted 1d array\n* @param {Probability} p - quantile prob [0,1]\n* @returns {number} quantile\n*/\nfunction quantile( arr, p ) {\n\tvar len = arr.length;\n\tvar id;\n\tvar h;\n\th = ( ( len - 1.0 ) * p ) + 1.0;\n\tid = floor( h ) - 1.0;\n\treturn arr[ id ] + ( ( h - floor( h ) ) * ( arr[ id + 1 ] - arr[ id ] ) );\n}\n\n\n// MAIN //\n\n/**\n* Computes the inter-quartile range for a numeric array.\n*\n* @private\n* @param {NumericArray} data - ndarray like data\n* @param {number} j - column index for which to get the IQR\n* @returns {number} inter-quartile range\n*/\nfunction iqr( data, j ) {\n\t// Copy and sort data --> build X\n\tvar arr;\n\tvar i;\n\tarr = new Array( data.shape[0] );\n\tfor ( i = 0; i < data.shape[0]; i++ ) {\n\t\tarr[ i ] = data.get( i, j );\n\t}\n\tarr.sort( ascending );\n\treturn quantile( arr, 0.75 ) - quantile( arr, 0.25 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = iqr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar EPSILON = require( '@stdlib/constants/float64/eps' );\nvar stdev = require( './stdev.js' );\nvar iqr = require( './iqr.js' );\n\n\n// MAIN //\n\n/**\n* Computes the rule-of-thumb bandwidth for the values in a column of `x`.\n*\n* @private\n* @param {ndarrayLike} arr - input ndarray\n* @param {number} j - index of the column from which to obtain the values\n* @returns {NumericArray} array with bandwidth values\n*\n* @example\n* var ndarrayLike = require( './ndarray_like.js' );\n*\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var arr = ndarrayLike( x, y );\n* var out = pickBandwidth( arr, 1 );\n* // returns ~1.717\n*/\nfunction pickBandwidth( arr, j ) {\n\tvar minElement;\n\tvar sigmaHat;\n\tvar powTerm;\n\tvar iqrVal;\n\tvar out;\n\n\tiqrVal = iqr( arr, j ) / 1.34;\n\tsigmaHat = stdev( arr, j );\n\tminElement = min( iqrVal, sigmaHat );\n\tpowTerm = pow( arr.shape[ 0 ], -1/5 );\n\tout = 1.06 * powTerm * minElement;\n\tif ( out === 0 ) {\n\t\tout = EPSILON;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pickBandwidth;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar SQRT_TWO_PI = require( '@stdlib/constants/float64/sqrt-two-pi' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// VARIABLES //\n\nvar INV_SQRT_TWO_PI = 1.0 / SQRT_TWO_PI;\n\n\n// MAIN //\n\n/**\n* Computes the Gaussian kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} the value for the Gaussian kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = gaussian( u );\n* // returns ~0.0\n*/\nfunction gaussian( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\treturn INV_SQRT_TWO_PI * exp( -0.5 * pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = gaussian;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the Epanechnikov kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Epanechnikov kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5.0;\n* var out = epanechnikov( u );\n* // returns 0.0\n*/\nfunction epanechnikov(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.75 * ( 1.0 - pow( u, 2.0 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = epanechnikov;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar FOURTH_PI = require( '@stdlib/constants/float64/fourth-pi' );\nvar HALF_PI = require( '@stdlib/constants/float64/half-pi' );\nvar cos = require( '@stdlib/math/base/special/cos' );\n\n\n// MAIN //\n\n/**\n* Computes the cosine kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the cosine kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* var out = cosine( u );\n* // returns 0\n*/\nfunction cosine(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn FOURTH_PI * cos( HALF_PI * u );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cosine;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the quartic kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 5;\n* var out = quartic(u);\n* // returns 0\n*/\nfunction quartic( u ) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( abs( u ) > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn ( 15.0 / 16.0 ) * pow( 1.0 - pow( u, 2.0 ), 2.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quartic;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the triangular kernel for a value.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = triangular( u );\n* // returns 0.8\n*/\nfunction triangular( u ) {\n\tvar absU;\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - absU;\n}\n\n\n// EXPORTS //\n\nmodule.exports = triangular;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// VARIABLES //\n\nvar LEADING_TERM = ( 70.0 / 81.0 );\n\n\n// MAIN //\n\n/**\n* Computes the tricube kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the tricube kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = tricube(u);\n* // returns 0\n*/\nfunction tricube(u) {\n\tvar absU;\n\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tabsU = abs( u );\n\tif ( absU > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn LEADING_TERM * pow( 1.0 - pow( absU, 3.0 ), 3.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = tricube;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Computes the Triweight kernel for a value.\n*\n* @private\n* @param {number} u - value for which we wish to calculate the Triweight kernel\n* @returns {number} the value for the kernel at u\n*\n* @example\n* var u = 5;\n* out = triweight(u); // returns 0\n*/\nfunction triweight(u) {\n\tvar absU;\n\n\tif (isnan(u)) {\n\t\treturn NaN;\n\t}\n\n\tabsU = abs(u);\n\tif (absU > 1) {\n\t\treturn 0;\n\t}\n\treturn (35 / 32) * pow(1.0 - pow(u, 2.0), 3.0);\n}\n\n\n// EXPORTS //\n\nmodule.exports = triweight;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the uniform kernel.\n*\n* @private\n* @param {number} u - input value\n* @returns {number} kernel value at u\n*\n* @example\n* var u = 0.2;\n* var out = uniform( u );\n* // returns 0.5\n*/\nfunction uniform(u) {\n\tif ( isnan( u ) ) {\n\t\treturn NaN;\n\t}\n\tif ( u < 0.0 || u > 1.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 0.5;\n}\n\n\n// EXPORTS //\n\nmodule.exports = uniform;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MAIN //\n\nvar kernels = {};\n\n// Make a stdlib/stats/base/kernels package\nkernels[ 'gaussian' ] = require( './gaussian.js' );\nkernels[ 'epanechnikov' ] = require( './epanechnikov.js' );\nkernels[ 'cosine' ] = require( './cosine.js' );\nkernels[ 'quartic' ] = require( './quartic.js' );\nkernels[ 'triangular' ] = require( './triangular.js' );\nkernels[ 'tricube' ] = require( './tricube.js' );\nkernels[ 'triweight' ] = require( './triweight.js' );\nkernels[ 'uniform' ] = require( './uniform.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kernels;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar kernels = require( './kernels.js' );\n\n\n// MAIN //\n\n/**\n* Returns the specified kernel function.\n*\n* @private\n* @param {string} name - kernel name\n* @returns {(Function|Error)} kernel function or corresponding error\n*/\nfunction getKernel( name ) {\n\tvar kernel = kernels[ name ];\n\tif ( kernel === void 0 ) {\n\t\treturn new Error( format( 'invalid argument. Unsupported/unrecognized kernel. Value: `%s`.', name ) );\n\t}\n\treturn kernel;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getKernel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isString = require( '@stdlib/assert/is-string' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isPositiveNumberArray = require( '@stdlib/assert/is-positive-number-array' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isError = require( '@stdlib/assert/is-error' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar getKernel = require( './get_kernel.js' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.n] - number of splits in the generated grid\n* @param {NumericArray} [options.h] - array of length two indicating the x and y bandwidth values\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.xMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel] - a string or function to specifying the used kernel function\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'xMin': 3.14,\n*     'kernel': 'gaussian'\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'h' ) ) {\n\t\topts.h = options.h;\n\t\tif ( !isPositiveNumberArray( opts.h) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be an array of positive values. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t\tif ( opts.h.length !== 2 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be an array of length two. Option: `%s`.', 'h', opts.h ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'n' ) ) {\n\t\topts.n = options.n;\n\t\tif ( !isPositiveInteger( opts.n ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'n', opts.n ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMax' ) ) {\n\t\topts.xMax = options.xMax;\n\t\tif ( !isNumber( opts.xMax ) || isnan( opts.xMax ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'xMax', opts.xMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'xMin' ) ) {\n\t\topts.xMin = options.xMin;\n\t\tif ( !isNumber( opts.xMin ) || isnan( opts.xMin ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'xMin', opts.xMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMax' ) ) {\n\t\topts.yMax = options.yMax;\n\t\tif ( !isNumber( opts.yMax ) || isnan( opts.yMax ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'yMax', opts.yMax ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'yMin' ) ) {\n\t\topts.yMin = options.yMin;\n\t\tif ( !isNumber( opts.yMin ) || isnan( opts.yMin ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a number. Option: `%s`.', 'yMin', opts.yMin ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'kernel' ) ) {\n\t\topts.kernel = options.kernel;\n\t\tif ( isString( opts.kernel ) ) {\n\t\t\topts.kernel = getKernel( opts.kernel );\n\t\t\tif ( isError( opts.kernel ) ) {\n\t\t\t\treturn opts.kernel;\n\t\t\t}\n\t\t} else if ( !isFunction( opts.kernel ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` must be a string denoting a known kernel function or a custom function. Option: `%s`.', 'kernel', opts.kernel ) );\n\t\t}\n\t}\n\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumericArray = require( '@stdlib/assert/is-numeric-array' );\n\n\n// MAIN //\n\n/**\n* Converts two arrays .\n*\n* @private\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {Error} first and second arguments must be of the same length\n* @returns {Object} object that mirrors an `ndarray`\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = ndarrayLike( x, y );\n*/\nfunction ndarrayLike( x, y ) {\n\tif ( !isNumericArray(x) ) {\n\t\tthrow new TypeError( 'First argument must be a numeric array' );\n\t}\n\n\tif ( !isNumericArray(y) ) {\n\t\tthrow new TypeError( 'Second argument must be a numeric array' );\n\t}\n\n\tif ( x.length !== y.length ) {\n\t\tthrow new Error( 'First and second argument must be of same length' );\n\t}\n\n\treturn {\n\t\t'get': get,\n\t\t'shape': [ x.length, 2 ]\n\t};\n\n\t/**\n\t* Gets an element of an nd-array-like object .\n\t*\n\t* @private\n\t* @param {number} i - row index\n\t* @param {number} j - column index\n\t* @returns {number} number stored in row i and column j\n\t*/\n\tfunction get( i, j ) {\n\t\tif ( j === 0 ) {\n\t\t\treturn x[ i ];\n\t\t}\n\t\treturn y[ i ];\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = ndarrayLike;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the maximum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the maximum\n* @param {number} len - number of rows in arr\n* @returns {number} maximum value\n*/\nfunction max( arr, j, len ) {\n\tvar max;\n\tvar x;\n\tvar i;\n\n\tmax = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x > max ) {\n\t\t\tmax = x;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar ndarray = require( '@stdlib/ndarray/array' );\nvar linspace = require( '@stdlib/array/base/linspace' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar isNumericArray = require( '@stdlib/assert/is-numeric-array' );\nvar isMatrixLike = require( '@stdlib/assert/is-matrix-like' );\nvar format = require( '@stdlib/string/format' );\nvar pickBandwidth = require( './pick_bandwidth.js' );\nvar validate = require( './validate.js' );\nvar ndarrayLike = require( './ndarray_like.js' );\nvar min = require( './min.js' );\nvar max = require( './max.js' );\nvar gaussian = require( './gaussian.js' );\n\n\n// MAIN //\n\n/**\n* Computes two-dimensional kernel density estimates.\n*\n* @param {NumericArray} x - array of x values\n* @param {NumericArray} y - array of y values\n* @param {Options} [options] - function options\n* @param {NumericArray} [options.h] - array of length two containing the bandwidth values for x and y\n* @param {number} [options.n=25] - number of partitions on the x- and y-axes\n* @param {number} [options.xMin] - lower limit of x\n* @param {number} [options.xMax] - upper limit of x\n* @param {number} [options.yMin] - lower limit of y\n* @param {number} [options.yMax] - upper limit of y\n* @param {(string|Function)} [options.kernel='gaussian'] - a string or function to specifying the used kernel function\n* @throws {TypeError} first argument must be an array or matrix-like\n* @throws {TypeError} second argument must be an array\n* @throws {Error} first and second arguments must be of the same length\n* @throws {RangeError} `xMin` must be less than `xMax`\n* @throws {RangeError} `yMin` must be less than `yMax`\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} object containing the density estimates (`z`) along grid points (`x` and `y` values)\n*\n* @example\n* var x = [ 0.6333, 0.8643, 1.0952, 1.3262, 1.5571, 1.7881, 2.019, 2.25, 2.481, 2.7119 ];\n* var y = [ -0.0468, 0.8012, 1.6492, 2.4973, 3.3454, 4.1934, 5.0415, 5.8896, 6.7376, 7.5857 ];\n* var out = kde2d( x, y );\n*/\nfunction kde2d() {\n\tvar kernelFunction;\n\tvar maxArgs;\n\tvar zScoreX;\n\tvar zScoreY;\n\tvar gridX;\n\tvar gridY;\n\tvar xMin;\n\tvar xMax;\n\tvar yMin;\n\tvar yMax;\n\tvar xVal; // For gridspace loop\n\tvar yVal; // For gridspace loop\n\tvar subX;\n\tvar subY;\n\tvar opts;\n\tvar arr;\n\tvar err;\n\tvar ans;\n\tvar out;\n\tvar gx;\n\tvar gy;\n\tvar hX;\n\tvar hY;\n\tvar ix;\n\tvar iy;\n\tvar x;\n\tvar y;\n\tvar i;\n\tvar n;\n\tvar z;\n\n\topts = {};\n\n\tif ( isMatrixLike( arguments[0] ) ) {\n\t\t// Case of ndarray, opts\n\t\tarr = arguments[ 0 ];\n\t\tmaxArgs = 1;\n\t} else {\n\t\tx = arguments[ 0 ];\n\t\ty = arguments[ 1 ];\n\t\tif ( !isNumericArray( x ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t\t}\n\t\tif ( !isNumericArray( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t\t}\n\t\tif ( x.length !== y.length ) {\n\t\t\tthrow new Error( 'invalid arguments. Arguments `x` and `y` must be arrays of the same length' );\n\t\t}\n\t\tarr = ndarrayLike( x, y );\n\t\tmaxArgs = 2;\n\t}\n\tif ( arguments.length > maxArgs ) {\n\t\terr = validate( opts, arguments[ maxArgs ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.h ) {\n\t\thX = opts.h[0];\n\t\thY = opts.h[1];\n\t} else {\n\t\thX = pickBandwidth( arr, 0 );\n\t\thY = pickBandwidth( arr, 1 );\n\t}\n\tn = opts.n || 25;\n\txMin = opts.xMin || min( arr, 0, arr.shape[0] );\n\txMax = opts.xMax || max( arr, 0, arr.shape[0] );\n\tyMin = opts.yMin || min( arr, 1, arr.shape[0] );\n\tyMax = opts.yMax || max( arr, 1, arr.shape[0] );\n\n\tif ( xMin >= xMax ) {\n\t\tthrow new RangeError( '`x` min must be strictly less than max' );\n\t}\n\tif ( yMin >= yMax ) {\n\t\tthrow new RangeError( '`y` min must be strictly less than max' );\n\t}\n\n\tkernelFunction = opts.kernel || gaussian;\n\n\t// Create the `ndarray` to hold the density values:\n\tz = ndarray({\n\t\t'shape': [ n, n ]\n\t} );\n\n\t// Make the grid:\n\tgridX = linspace( xMin, xMax, n );\n\tgridY = linspace( yMin, yMax, n );\n\n\t// Loop through x and y indices:\n\tfor ( ix = 0; ix < gridX.length; ix++ ) {\n\t\tgx = gridX[ ix ];\n\t\tfor ( iy = 0; iy < gridY.length; iy++ ) {\n\t\t\tgy = gridY[ iy ];\n\t\t\tans = 0.0;\n\t\t\tfor ( i = 0; i < arr.shape[ 0 ]; i++ ) {\n\t\t\t\txVal = arr.get( i, 0 );\n\t\t\t\tyVal = arr.get( i, 1 );\n\n\t\t\t\tzScoreX = ( (xVal - gx) / hX );\n\t\t\t\tzScoreY = ( (yVal - gy) / hY );\n\n\t\t\t\tsubX = ( 1.0 / hX ) * kernelFunction( zScoreX );\n\t\t\t\tsubY = ( 1.0 / hY ) * kernelFunction( zScoreY );\n\t\t\t\tans += ( subX * subY );\n\t\t\t}\n\t\t\tz.set( ix, iy, ans / arr.shape[0] );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'x', gridX );\n\tsetReadOnly( out, 'y', gridY );\n\tsetReadOnly( out, 'z', z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kde2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Returns the minimum value.\n*\n* @private\n* @param {ndarrayLike} arr - input array\n* @param {number} j - column index for which to get the range\n* @param {number} len - number of rows in arr\n* @returns {number} minimum value\n*/\nfunction min( arr, j, len ) {\n\tvar minObs;\n\tvar x;\n\tvar i;\n\n\tminObs = arr.get( 0, j );\n\tfor ( i = 1; i < len; i++ ) {\n\t\tx = arr.get( i, j );\n\t\tif ( x < minObs ) {\n\t\t\tminObs = x;\n\t\t}\n\t}\n\treturn minObs;\n}\n\n\n// EXPORTS //\n\nmodule.exports = min;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Two-dimensional kernel density estimation.\n*\n* @module @stdlib/stats/kde2d\n*\n* @example\n* var kde2d = require( '@stdlib/stats/kde2d' );\n* var x = [ 1, 3, 5, 6, 21, 23, 16, 17, 20, 10 ];\n* var y = [ 0.40, 0.20, 0.20, 0.15, 0.05, 0.55, 0.6, 0.33, 0.8, 0.41 ];\n*\n* var out = kde2d( x, y );\n* // returns { 'x': [1, 1.91, ... ], 'y': [0.05, 0.08125, ...], 'z': ndarray {Float64Array[ 0.031, ...] }\n*/\n\n// MODULES //\n\nvar kde2d = require( './kde2d.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kde2d;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert/is-array' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the medians of all groups are the same';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '    df: ' + this.df;\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isCollection = require( '@stdlib/assert/is-collection' );\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar countBy = require( '@stdlib/utils/count-by' );\nvar objectKeys = require( '@stdlib/utils/keys' );\nvar rank = require( './../../ranks' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar chisqCDF = require( './../../base/dists/chisquare/cdf' );\nvar identity = require( '@stdlib/utils/identity-function' );\nvar incrspace = require( '@stdlib/array/base/incrspace' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes the Kruskal-Wallis test for equality of medians.\n*\n* @param {...NumberArray} arguments - either two or more number arrays or a single numeric array if an array of group indicators is supplied as an option\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {Error} must provide at least two array-like arguments if `groups` is not set\n* @throws {TypeError} must provide array-like arguments\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskal( x, y, z );\n* // returns {...}\n*/\nfunction kruskal() {\n\tvar groupsIndicators;\n\tvar groupRankSums;\n\tvar tieSumTerm;\n\tvar ngroups;\n\tvar options;\n\tvar levels;\n\tvar alpha;\n\tvar param;\n\tvar ranks;\n\tvar vals;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar ties;\n\tvar arg;\n\tvar err;\n\tvar key;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar n;\n\tvar N;\n\tvar x;\n\tvar v;\n\n\tngroups = arguments.length;\n\topts = {};\n\tif ( isPlainObject( arguments[ ngroups - 1 ] ) ) {\n\t\toptions = arguments[ ngroups - 1 ];\n\t\tngroups -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tgroupRankSums = {};\n\tn = {};\n\tif ( opts.groups ) {\n\t\tx = arguments[ 0 ];\n\t\tif ( x.length !== opts.groups.length ) {\n\t\t\tthrow new RangeError( format( 'invalid arguments. First argument and `%s` must be arrays of the same length.', 'opts.groups' ) );\n\t\t}\n\t\tn = countBy( opts.groups, identity );\n\t\tlevels = objectKeys( n );\n\t\tngroups = levels.length;\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\tkey = levels[ i ];\n\t\t\tgroupRankSums[ key ] = 0;\n\t\t}\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of groups. `%s` array must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t\tgroupsIndicators = opts.groups;\n\t} else {\n\t\tx = [];\n\t\tgroupsIndicators = [];\n\t\tif ( ngroups < 2 ) {\n\t\t\tthrow new Error( format( 'invalid number of input arguments. Must provide at least two array-like arguments. Value: `%s`.', arg ) );\n\t\t}\n\t\tfor ( i = 0; i < ngroups; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( !isCollection( arg ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Must provide array-like arguments. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Supplied arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t\t} else {\n\t\t\t\tn[ i ] = arg.length;\n\t\t\t}\n\t\t\tgroupRankSums[ i ] = 0;\n\t\t\tfor ( j = 0; j < n[ i ]; j++ ) {\n\t\t\t\tgroupsIndicators.push( i );\n\t\t\t\tx.push( arg[ j ] );\n\t\t\t}\n\t\t}\n\t\tlevels = incrspace( 0, ngroups, 1 );\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid option. `%s` must be a number in the range 0 to 1. Value: `%f`.', 'alpha', alpha ) );\n\t}\n\n\tN = x.length;\n\tranks = rank( x );\n\n\t// Calculate # ties for each value & rank sums per group:\n\tties = {};\n\tfor ( i = 0; i < N; i++ ) {\n\t\tgroupRankSums[ groupsIndicators[ i ] ] += ranks[ i ];\n\t\tif ( x[ i ] in ties ) {\n\t\t\tties[ x[ i ] ] += 1;\n\t\t} else {\n\t\t\tties[ x[ i ] ] = 1;\n\t\t}\n\t}\n\n\t// Calculate test statistic using short-cut formula:\n\tstat = 0.0;\n\tfor ( i = 0; i < ngroups; i++ ) {\n\t\tkey = levels[ i ];\n\t\tstat += pow( groupRankSums[ key ], 2.0 ) / n[ key ];\n\t}\n\tstat = ( ( 12.0 / ( N * (N+1) ) ) * stat ) - ( 3.0 * (N+1) );\n\n\t// Correction for ties:\n\ttieSumTerm = 0;\n\tvals = objectKeys( ties );\n\tfor ( i = 0; i < vals.length; i++ ) {\n\t\tv = ties[ vals[ i ] ];\n\t\ttieSumTerm += pow( v, 3.0 ) - v;\n\t}\n\n\tstat /= 1.0 - ( ( tieSumTerm ) / ( pow( N, 3 ) - N ) );\n\tparam = ngroups - 1;\n\tpval = 1.0 - chisqCDF( stat, param );\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'df', param );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kruskal-Wallis Test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kruskal;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the Kruskal-Wallis test for equal medians.\n*\n* @module @stdlib/stats/kruskal-test\n*\n* @example\n* var kruskalTest = require( '@stdlib/stats/kruskal-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = kruskalTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar kruskalTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kruskalTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} maximum value\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = max( N, x, 1 );\n* // returns 2.0\n*/\nfunction max( N, x, stride ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the maximum value of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} maximum value\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = max( N, x, 2, 1 );\n* // returns 4.0\n*/\nfunction max( N, x, stride, offset ) {\n\tvar max;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\tix = offset;\n\tmax = x[ ix ];\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max;\n}\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar max = require( './max.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( max, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the maximum value of a strided array.\n*\n* @module @stdlib/stats/base/max\n*\n* @example\n* var max = require( '@stdlib/stats/base/max' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = max( N, x, 1 );\n* // returns 2.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var max = require( '@stdlib/stats/base/max' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = max.ndarray( N, x, 2, 1 );\n* // returns 4.0\n*/\n\n// MODULES //\n\nvar max = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = max;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar binomcoefln = require( '@stdlib/math/base/special/binomcoefln' );\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Evaluates the CDF for the one-sided test statistics, i.e., the maximum by which the empirical CDF exceeds / is less than the hypothesized CDF.\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n^+ / D_n^-\n* @param {PositiveInteger} n - number of variates\n* @returns {number} evaluated CDF, i.e., P( D_n^+ < d )\n*/\nfunction pKolmogorov1( d, n ) {\n\tvar len;\n\tvar out;\n\tvar tmp;\n\tvar i;\n\n\tif ( d <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( d >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\tlen = floor( n * (1.0-d) ) + 1;\n\tout = 0.0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\ttmp = binomcoefln( n, i );\n\t\ttmp += ( n - i ) * ln( 1.0 - d - (i/n) );\n\t\ttmp += ( i - 1.0 ) * ln( d + (i/n) );\n\t\tout += exp( tmp );\n\t}\n\treturn 1.0 - (d * out);\n}\n\n\n// EXPORTS //\n\nmodule.exports = pKolmogorov1;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar Float64Array = require( '@stdlib/array/float64' );\n\n\n// MAIN //\n\n/**\n* Evaluates the Kolmogorov distribution. This function is a JavaScript implementation of a procedure developed by Marsaglia & Tsang.\n*\n* ## References\n*\n* -   Marsaglia, George, Wai Wan Tsang, and Jingbo Wang. 2003. \"Evaluating Kolmogorov's Distribution.\" _Journal of Statistical Software_ 8 (18): 1–4. doi:[10.18637/jss.v008.i18](https://doi.org/10.18637/jss.v008.i18).\n*\n* @private\n* @param {number} d - the argument of the CDF of D_n\n* @param {number} n - number of variates\n* @returns {number} evaluated CDF, i.e. P( D_n < d )\n*/\nfunction pKolmogorov( d, n ) {\n\tvar eH;\n\tvar eQ;\n\tvar h;\n\tvar H;\n\tvar Q;\n\tvar g;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar m;\n\tvar s;\n\n\ts = d * d * n;\n\tif ( s > 7.24 || ( s > 3.76 && n > 99 ) ) {\n\t\treturn 1 - (2 * exp( -( 2.000071 + (0.331/sqrt(n)) + (1.409/n) ) * s ));\n\t}\n\tk = floor( n * d ) + 1;\n\tm = (2*k) - 1;\n\th = k - (n*d);\n\tH = new Float64Array( m * m );\n\tQ = new Float64Array( m * m );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 < 0 ) {\n\t\t\t\tH[ (i*m) + j ] = 0;\n\t\t\t} else {\n\t\t\t\tH[ (i*m) + j ] = 1;\n\t\t\t}\n\t\t}\n\t}\n\tfor ( i = 0; i < m; i++ ) {\n\t\tH[ i * m ] -= pow( h, i+1 );\n\t\tH[ ((m-1) * m) + i ] -= pow( h, (m-i) );\n\t}\n\tH[ (m-1) * m ] += ( ( (2*h)-1 > 0 ) ? pow( (2*h)-1, m ) : 0 );\n\tfor ( i = 0; i < m; i++ ) {\n\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\tif ( i - j + 1 > 0 ) {\n\t\t\t\tfor ( g = 1; g <= i - j + 1; g++ ) {\n\t\t\t\t\tH[ (i*m) + j ] /= g;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\teH = 0;\n\tmpow( H, eH, n );\n\ts = Q[ ((k-1) * m) + k - 1 ];\n\tfor ( i = 1; i <= n; i++ ) {\n\t\ts = s * i / n;\n\t\tif ( s < 1e-140 ) {\n\t\t\ts *= 1e140;\n\t\t\teQ -= 140;\n\t\t}\n\t}\n\ts *= pow( 10, eQ );\n\treturn s;\n\n\t/**\n\t* Matrix exponentiation. Mutates Q matrix.\n\t*\n\t* @private\n\t* @param {Float64Array} A - input matrix\n\t* @param {number} eA - matrix power\n\t* @param {number} n - number of variates\n\t*/\n\tfunction mpow( A, eA, n ) {\n\t\tvar eB;\n\t\tvar B;\n\t\tvar i;\n\n\t\tif ( n === 1 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = A[ i ];\n\t\t\t\teQ = eA;\n\t\t\t}\n\t\t\treturn;\n\t\t}\n\t\tmpow( A, eA, floor( n/2 ) );\n\t\tB = mmult( Q, Q );\n\t\teB = 2 * eQ;\n\t\tif ( n % 2 === 0 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] = B[ i ];\n\t\t\t}\n\t\t\teQ = eB;\n\t\t} else {\n\t\t\tQ = mmult( A, B );\n\t\t\teQ = eA + eB;\n\t\t}\n\t\tif ( Q[ (floor(m/2) * m) + floor(m/2) ] > 1e140 ) {\n\t\t\tfor ( i = 0; i < m*m; i++ ) {\n\t\t\t\tQ[ i ] *= 1e-140;\n\t\t\t}\n\t\t\teQ += 140;\n\t\t}\n\t}\n\n\t/**\n\t* Multiply matrices x and y.\n\t*\n\t* @private\n\t* @param {Float64Array} x - first input matrix\n\t* @param {Float64Array} y - second input matrix\n\t* @returns {Float64Array} matrix product\n\t*/\n\tfunction mmult( x, y ) {\n\t\tvar i;\n\t\tvar j;\n\t\tvar k;\n\t\tvar s;\n\t\tvar z;\n\n\t\tz = new Float64Array( m * m );\n\t\tfor ( i = 0; i < m; i++) {\n\t\t\tfor ( j = 0; j < m; j++ ) {\n\t\t\t\ts = 0;\n\t\t\t\tfor ( k = 0; k < m; k++ ) {\n\t\t\t\t\ts += x[ (i*m) + k ] * y[ (k*m) + j ];\n\t\t\t\t\tz[ (i*m) + j ] = s;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn z;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = pKolmogorov;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ascending;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Computes an element-wise subtraction.\n*\n* @private\n* @param {number} x - scalar minuend (implicitly broadcasted to full length array)\n* @param {NumericArray} arr - array of subtrahends\n* @returns {NumericArray} output array\n*\n* @example\n* var x = 3;\n* var arr = [ 1, 2, 2, 3 ];\n*\n* var y = subtract( x, arr );\n* // returns [ 2, 1, 1, 0 ]\n*/\nfunction subtract( x, arr ) {\n\tvar len;\n\tvar res;\n\tvar i;\n\n\tlen = arr.length;\n\tres = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tres[ i ] = x - arr[ i ];\n\t}\n\n\treturn res;\n}\n\n\n// EXPORTS //\n\nmodule.exports = subtract;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {boolean} [options.sorted] - boolean indicating if the input data is already sorted in ascending order\n* @param {string} [options.alternative] - alternative hypothesis\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sorted' ) ) {\n\t\topts.sorted = options.sorted;\n\t\tif ( !isBoolean( opts.sorted ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'sorted', opts.sorted ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar asin = require( '@stdlib/math/base/special/asin' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar PI = require( '@stdlib/constants/float64/pi' );\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI; // TODO: consider moving to pkg\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns ~0.795\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar asin = require( '@stdlib/math/base/special/asin' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar PI = require( '@stdlib/constants/float64/pi' );\n\n\n// VARIABLES //\n\nvar TWO_OVER_PI = 2.0 / PI;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an arcsine distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns ~0.144\n*\n* y = cdf( 8.0 );\n* // returns ~0.705\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an arcsine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn TWO_OVER_PI * asin( sqrt( ( x-a ) / ( b-a ) ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Arcsine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/arcsine/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/arcsine/cdf' );\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns ~0.144\n*\n* y = mycdf( 8.0 );\n* // returns ~0.705\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './main.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.813\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.104\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.967\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 1.5, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn betainc( x, alpha, beta );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a beta distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.705\n*\n* y = cdf( 0.3 );\n* // returns ~0.369\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a beta distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn betainc( x, alpha, beta );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a beta distribution.\n*\n* @module @stdlib/stats/base/dists/beta/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/beta/cdf' );\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.813\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/beta/cdf' ).factory;\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.705\n*\n* y = cdf( 0.3 );\n* // returns ~0.369\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar betaCDF = require( './../../../../../base/dists/beta/cdf' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.333\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.539\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.074\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.38\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x === PINF ) {\n\t\treturn 1.0;\n\t}\n\treturn betaCDF( x / ( 1.0 + x ), alpha, beta );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar betaFactory = require( './../../../../../base/dists/beta/cdf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a beta prime distribution with first shape parameter `alpha` and second shape parameter `beta`.\n*\n* @param {PositiveNumber} alpha - first shape parameter\n* @param {PositiveNumber} beta - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.465\n*\n* y = cdf( 0.3 );\n* // returns ~0.319\n*/\nfunction factory( alpha, beta ) {\n\tvar betaCDF;\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tbetaCDF = betaFactory( alpha, beta );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a beta prime distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x === PINF ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn betaCDF( x / ( 1.0 + x ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a beta prime distribution.\n*\n* @module @stdlib/stats/base/dists/betaprime/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/betaprime/cdf' );\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.333\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.539\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/betaprime/cdf' ).factory;\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.465\n*\n* y = cdf( 0.3 );\n* // returns ~0.319\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar atan2 = require( '@stdlib/math/base/special/atan2' );\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 4.0, 0.0, 2.0 );\n* // returns ~0.852\n*\n* @example\n* var y = cdf( 1.0, 0.0, 2.0 );\n* // returns ~0.648\n*\n* @example\n* var y = cdf( 1.0, 3.0, 2.0 );\n* // returns 0.25\n*\n* @example\n* var y = cdf( NaN, 0.0, 2.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 1.0, 2.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 1.0, NaN, 3.0 );\n* // returns NaN\n*/\nfunction cdf( x, x0, gamma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\treturn ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar atan2 = require( '@stdlib/math/base/special/atan2' );\n\n\n// VARIABLES //\n\nvar ONE_OVER_PI = 0.3183098861837907;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Cauchy distribution with location parameter `x0` and scale parameter `gamma`.\n*\n* @param {number} x0 - location parameter\n* @param {PositiveNumber} gamma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n*\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns 0.75\n*/\nfunction factory( x0, gamma ) {\n\tif (\n\t\tisnan( gamma ) ||\n\t\tisnan( x0 ) ||\n\t\tgamma <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Cauchy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn ( ONE_OVER_PI * atan2( x-x0, gamma ) ) + 0.5;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Cauchy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/cauchy/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/cauchy/cdf' );\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.852\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/cauchy/cdf' ).factory;\n*\n* var cdf = factory( 1.5, 3.0 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.447\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammaCDF = require( './../../../../../base/dists/gamma/cdf' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.739\n*\n* @example\n* var y = cdf( 1.0, 0.5 );\n* // returns ~0.846\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative degrees of freedom:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tk < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( k === 0.0 ) {\n\t\treturn ( x < 0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn gammaCDF( x*x, k/2.0, 0.5 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar degenerate = require( './../../../../../base/dists/degenerate/cdf' ).factory;\nvar gammaFactory = require( './../../../../../base/dists/gamma/cdf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.\n*\n* @param {NonNegativeNumber} k - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0 );\n*\n* var y = cdf( 6.0 );\n* // returns ~1.0\n*\n* y = cdf( 1.5 );\n* // returns ~0.478\n*/\nfunction factory( k ) {\n\tvar gamma;\n\tif ( k === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\tgamma = gammaFactory( k/2.0, 0.5 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a chi distribution with degrees of freedom `k`.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn gamma( x*x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Chi distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/chi/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/chi/cdf' );\n*\n* var y = cdf( 2.0, 8.0 );\n* // returns ~0.143\n*\n* y = cdf( 0.0, 1.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/chi/cdf' ).factory;\n*\n* var cdf = factory( 1.0 );\n*\n* var y = cdf( 2.0 );\n* // returns ~0.954\n*\n* y = cdf( 1.2 );\n* // returns ~0.77\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sinpi = require( '@stdlib/math/base/special/sinpi' );\nvar PI = require( '@stdlib/constants/float64/pi' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 0.0, 1.0 );\n* // returns ~0.909\n*\n* @example\n* var y = cdf( 1.2, 0.0, 1.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -0.9, 0.0, 1.0);\n* // returns ~0.0\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? 0.0 : 1.0;\n\t}\n\tif ( x < mu - s ) {\n\t\treturn 0.0;\n\t}\n\tif ( x > mu + s ) {\n\t\treturn 1.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar degenerate = require( './../../../../../base/dists/degenerate/cdf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sinpi = require( '@stdlib/math/base/special/sinpi' );\nvar PI = require( '@stdlib/constants/float64/pi' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a raised cosine distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.9 );\n* // returns ~0.015\n*\n* y = cdf( 4.0 );\n* // returns ~0.971\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a raised cosine distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu - s ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x > mu + s ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn ( 1.0 + z + ( sinpi( z ) / PI ) ) / 2.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Raised cosine distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/cosine/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/cosine/cdf' );\n*\n* var y = cdf( 0.5, 0.0, 1.0 );\n* // returns ~0.909\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 4.0 );\n* // returns ~0.971\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar gammaCDF = require( './../../../../../base/dists/gamma/cdf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( 2.0, 3, 1.0 );\n* // returns ~0.323\n*\n* @example\n* var y = cdf( 2.0, 2.5, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( -1.0, 2, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn NaN;\n\t}\n\treturn gammaCDF( x, k, lambda );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNonNegativeInteger = require( '@stdlib/math/base/assert/is-nonnegative-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar factoryGamma = require( './../../../../../base/dists/gamma/cdf' ).factory;\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an Erlang distribution with shape parameter `k` and rate parameter `lambda`.\n*\n* @param {NonNegativeInteger} k - shape parameter\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2, 0.1 );\n* var y = cdf( 12.0 );\n* // returns ~0.337\n*\n* y = cdf( 8.0 );\n* // returns ~0.191\n*/\nfunction factory( k, lambda ) {\n\tif ( !isNonNegativeInteger( k ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn factoryGamma( k, lambda );\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Erlang distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/erlang/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/erlang/cdf' );\n*\n* var y = cdf( 2.0, 8, 3.0 );\n* // returns ~0.256\n*\n* y = cdf( 0.0, 1, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2, 0.5 );\n* y = mycdf( 6.0 );\n* // returns ~0.801\n*\n* y = mycdf( 2.0 );\n* // returns ~0.264\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.181\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative rate parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - exp( -lambda * x );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an exponential distribution with rate parameter `lambda`.\n*\n* @param {PositiveNumber} lambda - rate parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.777\n*\n* y = cdf( 1.0 );\n* // returns ~0.393\n*/\nfunction factory( lambda ) {\n\tif (\n\t\tisnan( lambda ) ||\n\t\tlambda < 0.0 ||\n\t\tlambda === PINF\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an exponential distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -lambda * x );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Exponential distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/exponential/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/exponential/cdf' );\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.181\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 3.0 );\n* // returns ~0.777\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 10.0, 2.0, 3.0, 2.0 );\n* // returns ~0.869\n*\n* @example\n* var y = cdf( -0.2, 1.0, 3.0, -1.0 );\n* // returns ~0.024\n*\n* @example\n* var y = cdf( 1.5, 2.0, 1.0, 1.0 );\n* // returns ~0.018\n*\n* @example\n* var y = cdf( NaN, 2.0, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 2.0, NaN, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 2.0, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, -1.0, 1.0, 0.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, -1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, s, m ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= m ) {\n\t\treturn 0.0;\n\t}\n\tz = ( x - m ) / s;\n\treturn exp( -pow( z, -alpha ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Fréchet distribution with shape `alpha`, scale `s`, and location `m`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} s - scale parameter\n* @param {number} m - location parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 3.0, 5.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.806\n*\n* y = cdf( 7.0 );\n* // returns ~0.034\n*/\nfunction factory( alpha, s, m ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( s ) ||\n\t\tisnan( m ) ||\n\t\talpha <= 0.0 ||\n\t\ts <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Fréchet distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= m ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = ( x - m ) / s;\n\t\treturn exp( -pow( z, -alpha ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Fréchet distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/frechet/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/frechet/cdf' );\n*\n* var y = cdf( 10.0, 2.0, 3.0, 5.0 );\n* // returns ~0.698\n*\n* y = cdf( 0.0, 2.0, 3.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/frechet/cdf' ).factory;\n* var cdf = factory( 3.0, 3.0, 5.0 );\n* var y = cdf( 10.0 );\n* // returns ~0.806\n*\n* y = cdf( 7.0 );\n* // returns ~0.034\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.965\n*\n* @example\n* var y = cdf( -2.0, 0.0, 3.0 );\n* // returns ~0.143\n*\n* @example\n* var y = cdf( 0.0, 0.0, 1.0 );\n* // returns ~0.368\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 0.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, beta ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / beta;\n\treturn exp( -exp( -z ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Gumbel distribution with location parameter `mu` and scale parameter `beta`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 3.0 );\n*\n* var y = cdf( 10.0 );\n* // returns ~0.965\n*\n* y = cdf( -2.0 );\n* // returns ~0.143\n*/\nfunction factory( mu, beta ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( beta ) ||\n\t\tbeta <= 0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Gumbel distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( -2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / beta;\n\t\treturn exp( -exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Gumbel distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/gumbel/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/gumbel/cdf' );\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.965\n*\n* y = cdf( 0.0, 0.0, 3.0 );\n* // returns ~0.368\n*\n* var myCDF = cdf.factory( 2.0, 3.0 );\n* y = myCDF( 10.0 );\n* // returns ~0.933\n*\n* y = myCDF( 2.0 );\n* // returns ~0.368\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gammainc = require( '@stdlib/math/base/special/gammainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.607\n*\n* @example\n* var y = cdf( 2.0, 3.0, 1.0 );\n* // returns ~0.986\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn gammainc( beta / x, alpha, true, true );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar gammainc = require( '@stdlib/math/base/special/gammainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for an inverse gamma distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.809\n*\n* y = cdf( 2.0 );\n* // returns ~0.96\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for an inverse gamma distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0 ) {\n\t\t\treturn 0;\n\t\t}\n\t\treturn gammainc( beta / x, alpha, true, true );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Inverse gamma distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/invgamma/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/invgamma/cdf' );\n*\n* var y = cdf( 1.0, 8.0, 3.0 );\n* // returns ~0.988\n*\n* y = cdf( 0.0, 1.0, 1.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 2.0, 0.5 );\n* y = mycdf( 0.5 );\n* // returns ~0.736\n*\n* y = mycdf( 2.0 );\n* // returns ~0.973\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns ~0.5\n*\n* @example\n* var y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.684\n*\n* @example\n* var y = cdf( 0.2, 2.0, 2.0 );\n* // returns ~0.078\n*\n* @example\n* var y = cdf( 0.8, 4.0, 4.0 );\n* // returns ~0.878\n*\n* @example\n* var y = cdf( -0.5, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( 1.5, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= 1.0 ) {\n\t\treturn 1.0;\n\t}\n\treturn 1.0 - pow( 1.0 - pow( x, a ), b );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution with first shape parameter `a` and second shape parameter `b`.\n*\n* @param {PositiveNumber} a - first shape parameter\n* @param {PositiveNumber} b - second shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.675\n*\n* y = cdf( 0.3 );\n* // returns ~0.327\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta <= 0.0 ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= 1.0 ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn 1.0 - pow( 1.0 - pow( x, a ), b );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the cumulative distribution function (CDF) for a Kumaraswamy's double bounded distribution.\n*\n* @module @stdlib/stats/base/dists/kumaraswamy/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/kumaraswamy/cdf' );\n*\n* var y = cdf( 0.5, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 0.5, 2.0, 4.0 );\n* // returns ~0.684\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/kumaraswamy/cdf' ).factory;\n*\n* var cdf = factory( 0.5, 0.5 );\n*\n* var y = cdf( 0.8 );\n* // returns ~0.675\n*\n* y = cdf( 0.3 );\n* // returns ~0.327\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.932\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.094\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, b ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tz = ( x - mu ) / b;\n\tif ( x < mu ) {\n\t\treturn 0.5 * exp( z );\n\t}\n\treturn 1.0 - ( 0.5 * exp( -z ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Laplace distribution with location parameter `mu` and scale parameter `b`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} b - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.132\n*\n* y = cdf( 4.0 );\n* // returns ~0.743\n*/\nfunction factory( mu, b ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( b ) ||\n\t\tb <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Laplace distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / b;\n\t\tif ( x < mu ) {\n\t\t\treturn 0.5 * exp( z );\n\t\t}\n\t\treturn 1.0 - (0.5 * exp( -z ));\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Laplace distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/laplace/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/laplace/cdf' );\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.982\n*\n* y = cdf( 0.0, 0.0, 3.0 );\n* // returns 0.5\n*\n* var myCDF = cdf.factory( 2.0, 3.0 );\n* y = myCDF( 10.0 );\n* // returns ~0.965\n*\n* y = myCDF( 2.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar erfc = require( '@stdlib/math/base/special/erfc' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c` at value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.48\n*\n* @example\n* var y = cdf( 12.0, 10.0, 3.0 );\n* // returns ~0.221\n*\n* @example\n* var y = cdf( 9.0, 10.0, 3.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, c ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < mu ) {\n\t\treturn 0.0;\n\t}\n\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\treturn erfc( z );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar erfc = require( '@stdlib/math/base/special/erfc' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Lévy distribution with location parameter `mu` and scale parameter `c`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} c - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 4.0 );\n* // returns ~0.22\n*\n* y = cdf( 2.0 );\n* // returns 0.0\n*/\nfunction factory( mu, c ) {\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( c ) ||\n\t\tc <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Lévy distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < mu ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tz = sqrt( c / ( 2.0 * ( x-mu ) ) );\n\t\treturn erfc( z );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Lévy distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/levy/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/levy/cdf' );\n*\n* var y = cdf( 10.0, 0.0, 3.0 );\n* // returns ~0.584\n*\n* y = cdf( 0.3, 0.0, 3.0 );\n* // returns ~0.002\n*\n* @example\n* var factory = require( '@stdlib/stats/base/dists/levy/cdf' ).factory;\n*\n* var myCDF = factory( 2.0, 3.0 );\n* var y = myCDF( 100.0 );\n* // returns ~0.861\n*\n* y = myCDF( 10.0 );\n* // returns ~0.54\n*\n* y = myCDF( 2.0 );\n* // returns 0.0\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.881\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.159\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, s ) {\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( s ) ||\n\t\ts < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn ( x < mu ) ? 0.0 : 1.0;\n\t}\n\tz = ( x - mu ) / s;\n\treturn 1.0 / ( 1.0 + exp( -z ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar degenerate = require( './../../../../../base/dists/degenerate/cdf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a logistic distribution with location parameter `mu` and scale parameter `s`.\n*\n* @param {number} mu - location parameter\n* @param {NonNegativeNumber} s - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.209\n*\n* y = cdf( 4.0 );\n* // returns ~0.661\n*/\nfunction factory( mu, s ) {\n\tif ( isnan( mu ) || isnan( s ) || s < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( s === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a logistic distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tz = ( x - mu ) / s;\n\t\treturn 1.0 / ( 1.0 + exp( -z ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Logistic distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/logistic/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/logistic/cdf' );\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.881\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 1.0 );\n* // returns ~0.209\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar erfc = require( '@stdlib/math/base/special/erfc' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Normal distribution with mean `mu` and standard deviation `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Probability} evaluated cumulative distribution function\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* @example\n* var y = cdf( -1.0, -1.0, 2.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( -1.0, 4.0, 2.0 );\n* // returns ~0.006\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative standard deviation:\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tvar denom;\n\tvar xc;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn (x < mu) ? 0.0 : 1.0;\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\txc = x - mu;\n\treturn 0.5 * erfc( -xc/denom );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar degenerate = require( './../../../../../base/dists/degenerate/cdf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar erfc = require( '@stdlib/math/base/special/erfc' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Normal distribution.\n*\n* @param {number} mu - mean\n* @param {NonNegativeNumber} sigma - standard deviation\n* @returns {Function} function to evaluate the cumulative distribution function\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 10.0 );\n* // returns 0.5\n*\n* y = cdf( 12.0 );\n* // returns ~0.841\n*/\nfunction factory( mu, sigma ) {\n\tvar denom;\n\tif (\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( mu );\n\t}\n\tdenom = sigma * sqrt( 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Normal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar xc;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\txc = x - mu;\n\t\treturn 0.5 * erfc( -xc / denom );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Normal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/normal/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/normal/cdf' );\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.977\n*\n* var myCDF = cdf.factory( 10.0, 2.0 );\n* y = myCDF( 10.0 );\n* // returns 0.5\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar normalCDF = require( './../../../../../base/dists/normal/cdf' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.756\n*\n* @example\n* var y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.003\n*\n* @example\n* var y = cdf( 2.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*/\nfunction cdf( x, mu, sigma ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( mu ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn normalCDF( ln(x), mu, sigma );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar normalCDF = require( './../../../../../base/dists/normal/cdf' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar ln = require( '@stdlib/math/base/special/ln' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a lognormal distribution with location parameter `mu` and scale parameter `sigma`.\n*\n* @param {number} mu - location parameter\n* @param {PositiveNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 3.0, 1.5 );\n*\n* var y = cdf( 1.0 );\n* // returns ~0.023\n*\n* y = cdf( 4.0 );\n* // returns ~0.141\n*/\nfunction factory( mu, sigma ) {\n\tif ( isnan( mu ) || isnan( sigma ) || sigma <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a lognormal distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn normalCDF( ln(x), mu, sigma );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the lognormal distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/lognormal/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/lognormal/cdf' );\n*\n* var y = cdf( 2.0, 0.0, 1.0 );\n* // returns ~0.756\n*\n* y = cdf( 5.0, 10.0, 3.0 );\n* // returns ~0.003\n*\n* var mycdf = cdf.factory( 3.0, 1.5 );\n*\n* y = mycdf( 1.0 );\n* // returns ~0.023\n*\n* y = mycdf( 4.0 );\n* // returns ~0.141\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns 0.5\n*\n* @example\n* var y = cdf( 5.0, 2.0, 4.0 );\n* // returns ~0.36\n*\n* @example\n* var y = cdf( 4.0, 2.0, 2.0 );\n* // returns 0.75\n*\n* @example\n* var y = cdf( 1.9, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( 2.0, -1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.5, -1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 1.0, NaN );\n* // returns NaN\n*/\nfunction cdf( x, alpha, beta ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < beta ) {\n\t\treturn 0.0;\n\t}\n\treturn 1.0 - pow( beta / x, alpha );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Pareto (Type I) distribution with shape parameter `alpha` and scale parameter `beta`.\n*\n* @param {PositiveNumber} alpha - shape parameter\n* @param {PositiveNumber} beta - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 10.0, 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.983\n*\n* y = cdf( 2.5 );\n* // returns ~0.893\n*/\nfunction factory( alpha, beta ) {\n\tif (\n\t\tisnan( alpha ) ||\n\t\tisnan( beta ) ||\n\t\talpha <= 0.0 ||\n\t\tbeta <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Pareto (Type I) distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < beta ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - pow( beta / x, alpha );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Pareto (Type I) distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/pareto-type1/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/pareto-type1/cdf' );\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns 0.5\n*\n* y = cdf( 5.0, 2.0, 4.0 );\n* // returns ~0.36\n*\n* y = cdf( 4.0, 2.0, 2.0 );\n* // returns 0.75\n*\n* y = cdf( 1.9, 2.0, 2.0 );\n* // returns 0.0\n*\n* y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 10.0, 2.0 );\n* y = mycdf( 3.0 );\n* // returns ~0.983\n*\n* y = mycdf( 2.5 );\n* // returns ~0.893\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma` at a value `x`.\n*\n* @param {number} x - input value\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 3.0 );\n* // returns ~0.199\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.118\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* // Negative scale parameter:\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, sigma ) {\n\tvar s2;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( sigma ) ||\n\t\tsigma < 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn ( x < 0.0 ) ? 0.0 : 1.0;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar degenerate = require( './../../../../../base/dists/degenerate/cdf' ).factory;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Rayleigh distribution with scale parameter `sigma`.\n*\n* @param {NonNegativeNumber} sigma - scale parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0 );\n* var y = cdf( 3.0 );\n* // returns ~0.675\n*\n* y = cdf( 1.0 );\n* // returns ~0.118\n*/\nfunction factory( sigma ) {\n\tvar s2;\n\tif ( isnan( sigma ) || sigma < 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( sigma === 0.0 ) {\n\t\treturn degenerate( 0.0 );\n\t}\n\ts2 = pow( sigma, 2.0 );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Rayleigh distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn 1.0 - exp( -pow( x, 2.0 ) / ( 2.0 * s2 ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Rayleigh distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/rayleigh/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/rayleigh/cdf' );\n*\n* var y = cdf( 2.0, 5.0 );\n* // returns ~0.077\n*\n* var myCDF = cdf.factory( 0.5 );\n* y = myCDF( 1.0 );\n* // returns ~0.865\n*\n* y = myCDF( 0.5 );\n* // returns ~0.393\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* @example\n* var y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* @example\n* var y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* @example\n* var y = cdf( NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, v ) {\n\tvar x2;\n\tvar p;\n\tvar z;\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( v ) ||\n\t\tv <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x === 0.0 ) {\n\t\treturn 0.5;\n\t}\n\tx2 = pow( x, 2.0 );\n\tif ( v > 2.0*x2 ) {\n\t\tz = x2 / ( v + x2 );\n\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t} else {\n\t\tz = v / ( v + x2 );\n\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t}\n\treturn ( x > 0.0 ) ? 1.0 - p : p;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar betainc = require( '@stdlib/math/base/special/betainc' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Student's t distribution with degrees of freedom `v`.\n*\n* @param {PositiveNumber} v - degrees of freedom\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.5 );\n* var y = cdf( 3.0 );\n* // returns ~0.816\n*\n* y = cdf( 1.0 );\n* // returns ~0.699\n*/\nfunction factory( v ) {\n\tif ( isnan( v ) || v <= 0.0 ) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Student's t distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar x2;\n\t\tvar p;\n\t\tvar z;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x === 0.0 ) {\n\t\t\treturn 0.5;\n\t\t}\n\t\tx2 = pow( x, 2.0 );\n\t\tif ( v > 2.0*x2 ) {\n\t\t\tz = x2 / ( v + x2 );\n\t\t\tp = betainc( z, 0.5, v/2.0, true, true ) / 2.0;\n\t\t} else {\n\t\t\tz = v / ( v + x2 );\n\t\t\tp = betainc( z, v/2.0, 0.5, true, false ) / 2.0;\n\t\t}\n\t\treturn ( x > 0.0 ) ? 1.0 - p : p;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Student's t distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/t/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/t/cdf' );\n*\n* var y = cdf( 2.0, 0.1 );\n* // returns ~0.611\n*\n* y = cdf( 1.0, 2.0 );\n* // returns ~0.789\n*\n* y = cdf( -1.0, 4.0 );\n* // returns ~0.187\n*\n* var mycdf = cdf.factory( 0.5 );\n* y = mycdf( 3.0 );\n* // returns ~0.816\n*\n* y = mycdf( 1.0 );\n* // returns ~0.699\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.875\n*\n* @example\n* var y = cdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.75\n*\n* @example\n* var y = cdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.278\n*\n* @example\n* var y = cdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN, 0.5 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0, 1.5 );\n* // returns NaN\n*/\nfunction cdf( x, a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c ) ||\n\t\ta > c ||\n\t\tc > b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x <= a ) {\n\t\treturn 0.0;\n\t}\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\n\t// Case: x > a\n\tif ( x <= c ) {\n\t\treturn pow( x - a, 2.0 ) / denom1;\n\t}\n\t// Case: x > c\n\tif ( x < b ) {\n\t\treturn 1.0 - ( pow( b - x, 2.0 ) / denom2 );\n\t}\n\t// Case: x >= b\n\treturn 1.0;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a triangular distribution with lower limit `a` and upper limit `b` and mode `c`.\n*\n* @param {number} a - lower limit\n* @param {number} b - upper limit\n* @param {number} c - mode\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0, 2.0 );\n* var y = cdf( 0.5 );\n* // returns 0.0125\n*\n* y = cdf( 8.0 );\n* // returns 0.95\n*/\nfunction factory( a, b, c ) {\n\tvar denom1;\n\tvar denom2;\n\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\tisnan( c )\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\tif ( !( a <= c && c <= b ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\n\tdenom1 = ( b - a ) * ( c - a );\n\tdenom2 = ( b - a ) * ( b - c );\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a triangular distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x <= a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\t// Case: x > a\n\t\tif ( x <= c ) {\n\t\t\treturn pow( x - a, 2.0 ) / denom1;\n\t\t}\n\t\t// Case: x > c\n\t\tif ( x < b ) {\n\t\t\treturn 1 - ( pow( b - x, 2.0 ) / denom2 );\n\t\t}\n\t\t// Case: x >= b\n\t\treturn 1.0;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Triangular distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/triangular/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/triangular/cdf' );\n*\n* var y = cdf( 0.5, -1.0, 1.0, 0.0 );\n* // returns 0.875\n*\n* y = cdf( 0.5, -1.0, 1.0, 0.5 );\n* // returns 0.75\n*\n* y = cdf( -10.0, -20.0, 0.0, -2.0 );\n* // returns ~0.278\n*\n* y = cdf( -2.0, -1.0, 1.0, 0.0 );\n* // returns 0.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0, 2.0 );\n* y = mycdf( 0.5 );\n* // returns 0.0125\n*\n* y = mycdf( 8.0 );\n* // returns 0.95\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b` at a value `x`.\n*\n* @param {number} x - input value\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 9.0, 0.0, 10.0 );\n* // returns 0.9\n*\n* @example\n* var y = cdf( 0.5, 0.0, 2.0 );\n* // returns 0.25\n*\n* @example\n* var y = cdf( +Infinity, 2.0, 4.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 2.0, 4.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.0, 0.0 );\n* // returns NaN\n*/\nfunction cdf( x, a, b ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < a ) {\n\t\treturn 0.0;\n\t}\n\tif ( x >= b ) {\n\t\treturn 1.0;\n\t}\n\treturn ( x - a ) / ( b - a );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a uniform distribution with minimum support `a` and maximum support `b`.\n*\n* @param {number} a - minimum support\n* @param {number} b - maximum support\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 0.0, 10.0 );\n* var y = cdf( 0.5 );\n* // returns 0.05\n*\n* y = cdf( 8.0 );\n* // returns 0.8\n*/\nfunction factory( a, b ) {\n\tif (\n\t\tisnan( a ) ||\n\t\tisnan( b ) ||\n\t\ta >= b\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a uniform distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < a ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tif ( x >= b ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\treturn ( x - a ) / ( b - a );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Uniform distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/uniform/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/uniform/cdf' );\n*\n* var y = cdf( 5.0, 0.0, 4.0 );\n* // returns 1.0\n*\n* var mycdf = cdf.factory( 0.0, 10.0 );\n* y = mycdf( 0.5 );\n* // returns 0.05\n*\n* y = mycdf( 8.0 );\n* // returns 0.8\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar expm1 = require( '@stdlib/math/base/special/expm1' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) for a Weibull distribution with scale parameter `k` and shape parameter `lambda` at a value `x`.\n*\n* @param {number} x - input value\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* @example\n* var y = cdf( -1.0, 2.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( +Infinity, 4.0, 2.0 );\n* // returns 1.0\n*\n* @example\n* var y = cdf( -Infinity, 4.0, 2.0 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 0.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 0.0, -1.0 );\n* // returns NaN\n*/\nfunction cdf( x, k, lambda ) {\n\tif (\n\t\tisnan( x ) ||\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\treturn -expm1( -pow( x / lambda, k ) );\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar expm1 = require( '@stdlib/math/base/special/expm1' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for a Weibull distribution.\n*\n* @param {PositiveNumber} k - scale parameter\n* @param {PositiveNumber} lambda - shape parameter\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 2.0, 10.0 );\n* var y = cdf( 12.0 );\n* // returns ~0.763\n*\n* y = cdf( 8.0 );\n* // returns ~0.473\n*/\nfunction factory( k, lambda ) {\n\tif (\n\t\tisnan( k ) ||\n\t\tisnan( lambda ) ||\n\t\tk <= 0.0 ||\n\t\tlambda <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for a Weibull distribution.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2.0 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\treturn -expm1( -pow( x / lambda, k ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Weibull distribution cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/weibull/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/weibull/cdf' );\n*\n* var y = cdf( 2.0, 1.0, 1.0 );\n* // returns ~0.865\n*\n* var myCDF = cdf.factory( 2.0, 10.0 );\n* y = myCDF( 12.0 );\n* // returns ~0.763\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MAIN //\n\nvar CDF = {};\n\nCDF[ 'arcsine' ] = require( './../../base/dists/arcsine/cdf' );\nCDF[ 'beta' ] = require( './../../base/dists/beta/cdf' );\nCDF[ 'betaprime' ] = require( './../../base/dists/betaprime/cdf' );\nCDF[ 'cauchy' ] = require( './../../base/dists/cauchy/cdf' );\nCDF[ 'chi' ] = require( './../../base/dists/chi/cdf' );\nCDF[ 'chisquare' ] = require( './../../base/dists/chisquare/cdf' );\nCDF[ 'cosine' ] = require( './../../base/dists/cosine/cdf' );\nCDF[ 'erlang' ] = require( './../../base/dists/erlang/cdf' );\nCDF[ 'exponential' ] = require( './../../base/dists/exponential/cdf' );\nCDF[ 'f' ] = require( './../../base/dists/f/cdf' );\nCDF[ 'frechet' ] = require( './../../base/dists/frechet/cdf' );\nCDF[ 'gamma' ] = require( './../../base/dists/gamma/cdf' );\nCDF[ 'gumbel' ] = require( './../../base/dists/gumbel/cdf' );\nCDF[ 'invgamma' ] = require( './../../base/dists/invgamma/cdf' );\nCDF[ 'kumaraswamy' ] = require( './../../base/dists/kumaraswamy/cdf' );\nCDF[ 'laplace' ] = require( './../../base/dists/laplace/cdf' );\nCDF[ 'levy' ] = require( './../../base/dists/levy/cdf' );\nCDF[ 'logistic' ] = require( './../../base/dists/logistic/cdf' );\nCDF[ 'lognormal' ] = require( './../../base/dists/lognormal/cdf' );\nCDF[ 'normal' ] = require( './../../base/dists/normal/cdf' );\nCDF[ 'pareto-type1' ] = require( './../../base/dists/pareto-type1/cdf' );\nCDF[ 'rayleigh' ] = require( './../../base/dists/rayleigh/cdf' );\nCDF[ 't' ] = require( './../../base/dists/t/cdf' );\nCDF[ 'triangular' ] = require( './../../base/dists/triangular/cdf' );\nCDF[ 'uniform' ] = require( './../../base/dists/uniform/cdf' );\nCDF[ 'weibull' ] = require( './../../base/dists/weibull/cdf' );\n\n\n// EXPORTS //\n\nmodule.exports = CDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar format = require( '@stdlib/string/format' );\nvar CDF = require( './cdf.js' );\n\n\n// MAIN //\n\n/**\n* Returns the cumulative distribution function (CDF) corresponding to a provided distribution name.\n*\n* @private\n* @param {string} name - distribution name\n* @throws {Error} unsupported/unrecognized distribution name\n* @returns {Function} cumulative distribution function (CDF)\n*/\nfunction getCDF( name ) {\n\tvar cdf = CDF[ name ];\n\tif ( cdf === void 0 ) {\n\t\tthrow new Error( format( 'invalid argument. Unsupported/unrecognized distribution name. Value: `%s`.', name ) );\n\t}\n\treturn cdf;\n}\n\n\n// EXPORTS //\n\nmodule.exports = getCDF;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: the CDF of `x` is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'greater than or equal to ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'less than or equal to ';\n\t\tbreak;\n\t}\n\tstr += 'the reference CDF';\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts );\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isNumber = require( '@stdlib/assert/is-number' );\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar isFunction = require( '@stdlib/assert/is-function' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar max = require( './../../base/max' );\nvar pKolmogorov1 = require( './smirnov.js' );\nvar pKolmogorov = require( './marsaglia.js' );\nvar ascending = require( './ascending.js' );\nvar subtract = require( './subtract.js' );\nvar validate = require( './validate.js' );\nvar getCDF = require( './get_cdf.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// FUNCTIONS //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Computes a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @param {NumericArray} x - input array holding numeric values\n* @param {(Function|string)} y - either a CDF function or a string denoting the name of a distribution\n* @param {...number} [params] - distribution parameters passed to reference CDF\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {boolean} [options.sorted=false] - boolean indicating if the input array is already in sorted order\n* @param {string} [options.alternative=\"two-sided\"] - string indicating whether to conduct two-sided or one-sided hypothesis test (other options: `less`, `greater`)\n* @throws {TypeError} argument x has to be a typed array or array of numbers\n* @throws {TypeError} argument y has to be a CDF function or string\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} sorted option has to be a boolean\n* @returns {Object} test result object\n*\n* @example\n* var out = kstest( [ 2.0, 1.0, 5.0, -5.0, 3.0, 0.5, 6.0 ], 'normal', 0.0, 1.0 );\n* // returns { 'pValue': ~0.015, 'statistic': ~0.556, ... }\n*/\nfunction kstest() {\n\tvar nDistParams;\n\tvar distParams;\n\tvar distArgs;\n\tvar options;\n\tvar alpha;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar yVal;\n\tvar alt;\n\tvar err;\n\tvar idx;\n\tvar out;\n\tvar val;\n\tvar i;\n\tvar n;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\ty = arguments[ 1 ];\n\tif ( !isNumberArray( x ) && !isTypedArrayLike( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a typed array or number array. Value: `%s`.', x ) );\n\t}\n\tif ( !isFunction( y ) && !isString( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a CDF function or a string. Value: `%s`.', y ) );\n\t}\n\tif ( isString( y ) ) {\n\t\ty = getCDF( y );\n\t}\n\tnDistParams = y.length - 1.0;\n\tn = x.length;\n\n\tdistParams = new Array( nDistParams );\n\tfor ( i = 0; i < nDistParams; i++ ) {\n\t\tidx = i + 2;\n\t\tval = arguments[ idx ];\n\t\tif ( !isNumber( val ) || isnan( val ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Distribution parameter must be a number. Value: `%s`.', val ) );\n\t\t}\n\t\tdistParams[ i ] = arguments[ idx ];\n\t}\n\topts = {};\n\tif ( arguments.length > 2 + nDistParams ) {\n\t\toptions = arguments[ 2 + nDistParams ];\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Make a copy to prevent mutation of x:\n\tx = slice.call( x );\n\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\n\t// Input data has to be sorted:\n\tif ( opts.sorted !== true ) {\n\t\tx.sort( ascending );\n\t}\n\tdistArgs = [ null ].concat( distParams );\n\tfor ( i = 0; i < n; i++ ) {\n\t\tdistArgs[ 0 ] = x[ i ];\n\t\tyVal = y.apply( null, distArgs );\n\t\tx[ i ] = yVal - ( i / n );\n\t}\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tstat = max( n, [ max( n, x, 1 ), max( n, subtract( 1/n, x ), 1 ) ], 1 );\n\t\tbreak;\n\tcase 'greater':\n\t\tstat = max( n, subtract( 1/n, x ), 1 );\n\t\tbreak;\n\tcase 'less':\n\t\tstat = max( n, x, 1 );\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tif ( alt === 'two-sided' ) {\n\t\tpval = 1.0 - pKolmogorov( stat, n );\n\t} else {\n\t\tpval = 1.0 - pKolmogorov1( stat, n );\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'method', 'Kolmogorov-Smirnov goodness-of-fit test' );\n\tsetReadOnly( out, 'print', print );\n\tsetReadOnly( out, 'alternative', alt );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = kstest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Kolmogorov-Smirnov goodness-of-fit test.\n*\n* @module @stdlib/stats/kstest\n*\n* @example\n* var generator = require( '@stdlib/random/base/normal' ).factory;\n* var kstest = require( '@stdlib/stats/kstest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n*\n* // Values drawn from a Normal(3,1) distribution\n* rnorm = generator( 3.0, 1.0, {\n*     'seed': 293\n* });\n* x = new Array( 100 );\n* for ( i = 0; i < 100; i++ ) {\n*     x[ i ] = rnorm();\n* }\n*\n* // Test against N(0,1)\n* out = kstest( x, 'normal', 0.0, 1.0 );\n* // returns { pValue: 0, statistic: ~0.901, ... }\n*\n* // Test against N(3,1)\n* out = kstest( x, 'normal', 3.0, 1.0 );\n* // returns { pValue: ~0.234, statistic: ~0.102, ... }\n*/\n\n// MODULES //\n\nvar kstest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = kstest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar incrmean = require( './../../incr/mean' );\nvar abs = require( '@stdlib/math/base/special/abs' );\n\n\n// MAIN //\n\n/**\n* Calculates the absolute difference of the values and the respective group means for the elements of a numeric array.\n*\n* @private\n* @param {Array} x - input array\n* @param {Array} groups - array of group labels\n* @param {Array} levels - array of distinct group levels\n* @returns {Array} array of absolute centered values\n*\n* @example\n* var x = [ 1, 2, 3, 4, 5, 6, 7, 8, 9, 10 ];\n* var groups = [ 'a', 'b', 'a', 'a', 'b', 'b', 'a', 'a', 'b', 'b' ];\n* var levels = [ 'a', 'b' ];\n* var out = absMeanDiff( x, groups, levels );\n* // returns [ ~3.6, 4.4, ..., ~3.6 ]\n*/\nfunction absMeanDiff( x, groups, levels ) {\n\tvar accumulators = {};\n\tvar means = {};\n\tvar len = x.length;\n\tvar out = [];\n\tvar i;\n\tfor ( i = 0; i < levels.length; i++ ) {\n\t\taccumulators[ levels[ i ] ] = incrmean();\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\taccumulators[ groups[ i ] ]( x[ i ] );\n\t}\n\tfor ( i = 0; i < levels.length; i++ ) {\n\t\tmeans[ levels[ i ] ] = accumulators[ levels[ i ] ]();\n\t}\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout.push( abs( x[ i ] - means[ groups[ i ] ] ) );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = absMeanDiff;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isArray = require( '@stdlib/assert/is-array' );\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'groups' ) ) {\n\t\topts.groups = options.groups;\n\t\tif ( !isArray( opts.groups ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be an array. Option: `%s`.', 'groups', opts.groups ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-prints test output.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} Options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. `options` argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Null hypothesis: The variances in all groups are the same.';\n\tstr += '\\n\\n';\n\tstr += '    df 1: ' + roundn( this.df[ 0 ], -dgts ) + '\\n';\n\tstr += '    df 2: ' + roundn( this.df[ 1 ], -dgts ) + '\\n';\n\tstr += '    F score: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    P Value: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPlainObject = require( '@stdlib/assert/is-plain-object' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar format = require( '@stdlib/string/format' );\nvar anova1 = require( './../../anova1' );\nvar absMeanDiff = require( './absdiff.js' );\nvar validate = require( './validate.js' );\nvar unique = require( './unique.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes Levene's test for equal variances.\n*\n* @param {...NumericArray} arguments - either two or more number arrays or a single numeric array if provided an array of group indicators\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {Array} [options.groups] - array of group indicators\n* @throws {TypeError} must provide array-like arguments\n* @throws {RangeError} alpha option must be a number on the interval `[0,1]`\n* @throws {Error} must provide at least two array-like arguments if `groups` is not provided\n* @throws {TypeError} Options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test results\n*\n* @example\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = levene( x, y, z );\n* // returns {...}\n*/\nfunction levene() {\n\tvar options;\n\tvar result;\n\tvar groups;\n\tvar levels;\n\tvar args;\n\tvar opts;\n\tvar arg;\n\tvar err;\n\tvar out;\n\tvar i;\n\tvar j;\n\tvar k;\n\n\tk = arguments.length;\n\targs = [];\n\topts = {};\n\tif ( isPlainObject( arguments[ k-1 ] ) ) {\n\t\toptions = arguments[ k-1 ];\n\t\tk -= 1;\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t} else {\n\t\toptions = {};\n\t}\n\tif ( opts.groups ) {\n\t\targs = arguments[ 0 ];\n\t\tgroups = opts.groups;\n\t\tlevels = unique( groups );\n\t\tk = levels.length;\n\t\tif ( k < 2 ) {\n\t\t\tthrow new Error( format( 'invalid option. `%s` option must contain at least two unique elements. Value: `%s`.', 'groups', levels ) );\n\t\t}\n\t} else {\n\t\tgroups = [];\n\t\targs = [];\n\t\tlevels = [];\n\t\tfor ( i = 0; i < k; i++ ) {\n\t\t\targ = arguments[ i ];\n\t\t\tif ( arg.length === 0 ) {\n\t\t\t\tthrow new Error( format( 'invalid argument. Provided arrays cannot be empty. Value: `%s`.', arg ) );\n\t\t\t}\n\t\t\targs = args.concat( arg );\n\t\t\tfor ( j = 0; j < arg.length; j++ ) {\n\t\t\t\tgroups.push( i );\n\t\t\t}\n\t\t\tlevels.push( i );\n\t\t}\n\t}\n\targs = absMeanDiff( args, groups, levels );\n\tresult = anova1( args, groups, options );\n\tout = {};\n\tsetReadOnly( out, 'rejected', result.rejected );\n\tsetReadOnly( out, 'alpha', result.alpha );\n\tsetReadOnly( out, 'pValue', result.pValue );\n\tsetReadOnly( out, 'statistic', result.statistic );\n\tsetReadOnly( out, 'df', [ result.treatment.df, result.error.df ] );\n\tsetReadOnly( out, 'method', 'Levene\\'s test for Homogeneity of Variance' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = levene;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2021 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute Levene's test for equal variances.\n*\n* @module @stdlib/stats/levene-test\n*\n* @example\n* var leveneTest = require( '@stdlib/stats/levene-test' );\n*\n* // Data from Hollander & Wolfe (1973), p. 116:\n* var x = [ 2.9, 3.0, 2.5, 2.6, 3.2 ];\n* var y = [ 3.8, 2.7, 4.0, 2.4 ];\n* var z = [ 2.8, 3.4, 3.7, 2.2, 2.0 ];\n*\n* var out = leveneTest( x, y, z );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar leveneTest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = leveneTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} range\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = range( N, x, 1 );\n* // returns 4.0\n*/\nfunction range( N, x, stride ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ 0 ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Computes the range of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} range\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = range( N, x, 2, 1 );\n* // returns 6.0\n*/\nfunction range( N, x, stride, offset ) {\n\tvar max;\n\tvar min;\n\tvar ix;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\tif ( isnan( x[ offset ] ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\treturn 0.0;\n\t}\n\tix = offset;\n\tmin = x[ ix ];\n\tmax = min;\n\tfor ( i = 1; i < N; i++ ) {\n\t\tix += stride;\n\t\tv = x[ ix ];\n\t\tif ( isnan( v ) ) {\n\t\t\treturn v;\n\t\t}\n\t\tif ( v < min ) {\n\t\t\tmin = v;\n\t\t} else if ( v > max ) {\n\t\t\tmax = v;\n\t\t}\n\t}\n\treturn max - min;\n}\n\n\n// EXPORTS //\n\nmodule.exports = range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar range = require( './range.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( range, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the range of a strided array.\n*\n* @module @stdlib/stats/base/range\n*\n* @example\n* var range = require( '@stdlib/stats/base/range' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = range( N, x, 1 );\n* // returns 4.0\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var range = require( '@stdlib/stats/base/range' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = range.ndarray( N, x, 2, 1 );\n* // returns 6.0\n*/\n\n// MODULES //\n\nvar range = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = range;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar pow = require( '@stdlib/math/base/special/pow' );\n\n\n// MAIN //\n\n/**\n* Calculates the fitted value `ys` for a value `xs` on the horizontal axis.\n*\n* ## Method\n*\n* -   The smoothed value for the x-axis value at the current index is computed using a (robust) locally weighted regression of degree one.  The tricube weight function is used with `h` equal to the maximum of `xs - x[ nleft ]` and `x[ nright ] - xs`.\n*\n* ## References\n*\n* -   Cleveland, William S. 1979. \"Robust Locally and Smoothing Weighted Regression Scatterplots.\" _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).\n* -   Cleveland, William S. 1981. \"Lowess: A program for smoothing scatterplots by robust locally weighted regression.\" _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).\n*\n* @private\n* @param {NumericArray} x - ordered x-axis values (abscissa values)\n* @param {NumericArray} y - corresponding y-axis values (ordinate values)\n* @param {PositiveInteger} n - number of observations\n* @param {NonNegativeInteger} i - current index\n* @param {NonNegativeInteger} nleft - index of the first point used in computing the fitted value\n* @param {NonNegativeInteger} nright - index of the last point used in computing the fitted value\n* @param {ProbabilityArray} w - weights at indices from `nleft` to `nright` to be used in the calculation of the fitted value\n* @param {boolean} userw - boolean indicating whether a robust fit is carried out using the weights in `rw`\n* @param {ProbabilityArray} rw - robustness weights\n* @returns {number} fitted value\n*/\nfunction lowest( x, y, n, i, nleft, nright, w, userw, rw ) {\n\tvar range;\n\tvar nrt;\n\tvar h1;\n\tvar h9;\n\tvar xs;\n\tvar ys;\n\tvar h;\n\tvar a;\n\tvar b;\n\tvar c;\n\tvar r;\n\tvar j;\n\n\txs = x[ i ];\n\trange = x[ n - 1 ] - x[ 0 ];\n\th = max( xs - x[ nleft ], x[ nright ] - xs );\n\th9 = 0.999 * h;\n\th1 = 0.001 * h;\n\n\t// Compute weights (pick up all ties on right):\n\ta = 0.0; // sum of weights\n\tfor ( j = nleft; j < n; j++ ) {\n\t\tw[ j ] = 0.0;\n\t\tr = abs( x[ j ] - xs );\n\t\tif ( r <= h9 ) { // small enough for non-zero weight\n\t\t\tif ( r > h1 ) {\n\t\t\t\tw[ j ] = pow( 1.0-pow( r/h, 3.0 ), 3.0 );\n\t\t\t} else {\n\t\t\t\tw[ j ] = 1.0;\n\t\t\t}\n\t\t\tif ( userw ) {\n\t\t\t\tw[ j ] *= rw[ j ];\n\t\t\t}\n\t\t\ta += w[ j ];\n\t\t}\n\t\telse if ( x[ j ] > xs ) {\n\t\t\tbreak; // get out at first zero weight on right\n\t\t}\n\t}\n\tnrt = j - 1; // rightmost point (may be greater than `nright` because of ties)\n\tif ( a <= 0.0 ) {\n\t\treturn y[ i ];\n\t}\n\n\t// Make sum of weights equal to one:\n\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\tw[ j ] /= a;\n\t}\n\n\tif ( h > 0.0 ) { // use linear fit\n\t\t// Find weighted center of x values:\n\t\ta = 0.0;\n\t\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\t\ta += w[ j ] * x[ j ];\n\t\t}\n\t\tb = xs - a;\n\t\tc = 0.0;\n\t\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\t\tc += w[ j ] * pow( x[ j ] - a, 2.0 );\n\t\t}\n\t\tif ( sqrt( c ) > 0.001 * range ) {\n\t\t\t// Points are spread out enough to compute slope:\n\t\t\tb /= c;\n\t\t\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\t\t\tw[ j ] *= ( 1.0 + ( b*(x[j]-a) ) );\n\t\t\t}\n\t\t}\n\t}\n\tys = 0.0;\n\tfor ( j = nleft; j <= nrt; j++ ) {\n\t\tys += w[ j ] * y[ j ];\n\t}\n\treturn ys;\n}\n\n\n// EXPORTS //\n\nmodule.exports = lowest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar floor = require( '@stdlib/math/base/special/floor' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar lowest = require( './lowest.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Locally-weighted polynomial regression via the LOWESS algorithm.\n*\n* ## Method\n*\n* -   Calculates fitted values using a nearest neighbor function and robust locally weighted regression of degree one with the tricube weight function.\n*\n* ## References\n*\n* -   Cleveland, William S. 1979. \"Robust Locally and Smoothing Weighted Regression Scatterplots.\" _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).\n* -   Cleveland, William S. 1981. \"Lowess: A program for smoothing scatterplots by robust locally weighted regression.\" _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).\n*\n* @private\n* @param {NumericArray} x - ordered x-axis values (abscissa values)\n* @param {NumericArray} y - corresponding y-axis values (ordinate values)\n* @param {PositiveInteger} n - number of observations\n* @param {PositiveNumber} f - smoother span (proportion of points which influence smoothing at each value)\n* @param {NonNegativeInteger} nsteps - number of iterations in the robust fit\n* @param {PositiveNumber} delta - nonnegative parameter which may be used to reduce the number of computations\n* @returns {Object} sorted x-values and fitted values\n*/\nfunction lowess( x, y, n, f, nsteps, delta ) {\n\tvar nright;\n\tvar denom;\n\tvar nleft;\n\tvar alpha;\n\tvar cmad;\n\tvar iter;\n\tvar last;\n\tvar cut;\n\tvar res;\n\tvar m1;\n\tvar m2;\n\tvar ns;\n\tvar c1;\n\tvar c9;\n\tvar d1;\n\tvar d2;\n\tvar rw;\n\tvar ys;\n\tvar i;\n\tvar j;\n\tvar r;\n\n\tif ( n < 2 ) {\n\t\treturn y;\n\t}\n\tys = new Array( n );\n\tres = new Array( n );\n\trw = new Array( n );\n\n\t// Use at least two and at most n points:\n\tns = max( min( floor( f * n ), n ), 2 );\n\n\t// Robustness iterations:\n\tfor ( iter = 1; iter <= nsteps + 1; iter++ ) {\n\t\tnleft = 0;\n\t\tnright = ns - 1;\n\t\tlast = -1; // index of previously estimated point\n\t\ti = 0; // index of current point\n\t\tdo {\n\t\t\twhile ( nright < n - 1 ) {\n\t\t\t\t// Move nleft, nright to the right if radius decreases:\n\t\t\t\td1 = x[ i ] - x[ nleft ];\n\t\t\t\td2 = x[ nright + 1 ] - x[ i ];\n\n\t\t\t\t// If d1 <= d2 with x[nright+1] == x[nright], lowest fixes:\n\t\t\t\tif ( d1 <= d2 ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t// Radius will not decrease by a move to the right...\n\t\t\t\tnleft += 1;\n\t\t\t\tnright += 1;\n\t\t\t}\n\t\t\t// Fitted value at x[ i ]:\n\t\t\tys[ i ] = lowest( x, y, n, i, nleft, nright, res, (iter > 1), rw );\n\n\t\t\tif ( last < i - 1 ) {\n\t\t\t\tdenom = x[ i ] - x[ last ];\n\t\t\t\tfor ( j = last + 1; j < i; j++ ) {\n\t\t\t\t\talpha = ( x[ j ] - x[ last ] ) / denom;\n\t\t\t\t\tys[ j ] = ( alpha*ys[ i ] ) + ( (1.0-alpha) * ys[ last ] );\n\t\t\t\t}\n\t\t\t}\n\t\t\tlast = i;\n\t\t\tcut = x[ last ] + delta;\n\t\t\tfor ( i = last + 1; i < n; i++ ) {\n\t\t\t\tif ( x[ i ] > cut ) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif ( x[ i ] === x[ last ] ) {\n\t\t\t\t\tys[ i ] = ys[ last ];\n\t\t\t\t\tlast = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti = max( last + 1, i - 1 );\n\t\t} while ( last < n - 1 );\n\n\t\t// Calculate Residuals:\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tres[ i ] = y[ i ] - ys[ i ];\n\t\t}\n\t\tif ( iter > nsteps ) {\n\t\t\tbreak; // Compute robustness weights except last time...\n\t\t}\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\trw[i] = abs( res[i] );\n\t\t}\n\t\trw.sort( ascending );\n\t\tm1 = floor( n / 2.0 );\n\t\tm2 = n - m1 - 1.0;\n\t\tcmad = 3.0 * ( rw[m1] + rw[m2] );\n\t\tc9 = 0.999 * cmad;\n\t\tc1 = 0.001 * cmad;\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tr = abs( res[i] );\n\t\t\tif ( r <= c1 ) {\n\t\t\t\trw[ i ] = 1.0; // near 0, avoid underflow\n\t\t\t}\n\t\t\telse if ( r > c9 ) {\n\t\t\t\trw[ i ] = 0.0;  // near 1, avoid underflow\n\t\t\t}\n\t\t\telse {\n\t\t\t\trw[ i ] = pow( 1.0 - pow( r / cmad, 2.0 ), 2.0 );\n\t\t\t}\n\t\t}\n\t}\n\treturn {\n\t\t'x': x,\n\t\t'y': ys\n\t};\n}\n\n\n// EXPORTS //\n\nmodule.exports = lowess;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' );\nvar isNonNegativeInteger = require( '@stdlib/assert/is-nonnegative-integer' ).isPrimitive;\nvar isNonNegativeNumber = require( '@stdlib/assert/is-nonnegative-number' ).isPrimitive;\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {Probability} [options.f] - smoother span (proportion of points which influence smoothing at each value)\n* @param {NonNegativeInteger} [options.nsteps] - number of iterations in the robust fit\n* @param {NonNegativeNumber} [options.delta] - nonnegative parameter which may be used to save computations\n* @param {boolean} [options.sorted] - boolean indicating if the input array is in sorted order\n* @returns {(Error|null)} null or an error object\n*\n* @example\n* var opts = {};\n* var options = {\n*     'f': 0.75,\n*     'nsteps': 6,\n*     'delta': 0.03,\n*     'sorted': true\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'f' ) ) {\n\t\topts.f = options.f;\n\t\tif ( !isPositiveNumber( opts.f ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'f', opts.f ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'nsteps' ) ) {\n\t\topts.nsteps = options.nsteps;\n\t\tif ( !isNonNegativeInteger( opts.nsteps ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative integer. Option: `%s`.', 'nsteps', opts.nsteps ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'delta' ) ) {\n\t\topts.delta = options.delta;\n\t\tif ( !isNonNegativeNumber( opts.delta ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a nonnegative number. Option: `%s`.', 'delta', opts.delta ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'sorted' ) ) {\n\t\topts.sorted = options.sorted;\n\t\tif ( !isBoolean( opts.sorted ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'sorted', opts.sorted ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar range = require( './../../base/range' );\nvar format = require( '@stdlib/string/format' );\nvar lowess = require( './lowess.js' );\nvar validate = require( './validate.js' );\n\n\n// FUNCTIONS //\n\n/**\n* Comparator function used to sort (x,y)-pairs in ascending order by the first coordinate.\n*\n* @private\n* @param {Array} a - first pair\n* @param {Array} b - second pair\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a[ 0 ] - b[ 0 ];\n}\n\n\n// MAIN //\n\n/**\n* Locally-weighted polynomial regression via the LOWESS algorithm.\n*\n* ## References\n*\n* -   Cleveland, William S. 1979. \"Robust Locally and Smoothing Weighted Regression Scatterplots.\" _Journal of the American Statistical Association_ 74 (368): 829–36. doi:[10.1080/01621459.1979.10481038](https://doi.org/10.1080/01621459.1979.10481038).\n* -   Cleveland, William S. 1981. \"Lowess: A program for smoothing scatterplots by robust locally weighted regression.\" _American Statistician_ 35 (1): 54–55. doi:[10.2307/2683591](https://doi.org/10.2307/2683591).\n*\n* @param {NumericArray} x - ordered x-axis values (abscissa values)\n* @param {NumericArray} y - corresponding y-axis values (ordinate values)\n* @param {Options} options - function options\n* @param {PositiveNumber} [options.f=2/3] - smoother span (proportion of points which influence smoothing at each value)\n* @param {integer} [options.nsteps=3] - number of iterations in the robust fit (fewer iterations translates to faster function execution)\n* @param {NonNegativeNumber} [options.delta] - nonnegative parameter which may be used to reduce the number of computations\n* @param {boolean} [options.sorted=false] - boolean indicating if the input array `x` is already in sorted order\n* @throws {TypeError} first argument must be a numeric array\n* @throws {TypeError} second argument must be a numeric array\n* @throws {Error} first and second arguments must have the same length\n* @returns {Object} ordered x-values and fitted values\n*/\nfunction main( x, y, options ) {\n\tvar nsteps;\n\tvar delta;\n\tvar opts;\n\tvar err;\n\tvar xy;\n\tvar f;\n\tvar i;\n\tvar n;\n\tvar r;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t}\n\tn = x.length;\n\tif ( y.length !== n ) {\n\t\tthrow new Error( 'invalid arguments. First and second arguments must have the same length.' );\n\t}\n\topts = {};\n\tif ( arguments.length > 2 ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\t// Input data has to be sorted:\n\tif ( opts.sorted !== true ) {\n\t\t// Copy to prevent mutation and sort by x:\n\t\txy = new Array( n );\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\txy[ i ] = [ x[ i ], y[ i ] ];\n\t\t}\n\t\txy.sort( ascending ); // TODO: Revisit once we have function for sorting multiple arrays by the elements of one of the arrays\n\t\tx = new Array( n );\n\t\ty = new Array( n );\n\t\tfor ( i = 0; i < n; i++ ) {\n\t\t\tx[ i ] = xy[ i ][ 0 ];\n\t\t\ty[ i ] = xy[ i ][ 1 ];\n\t\t}\n\t}\n\tif ( opts.nsteps === void 0 ) {\n\t\tnsteps = 3;\n\t} else {\n\t\tnsteps = opts.nsteps;\n\t}\n\tif ( opts.f === void 0 ) {\n\t\tf = 2.0/3.0;\n\t} else {\n\t\tf = opts.f;\n\t}\n\tif ( opts.delta === void 0 ) {\n\t\tr = range( n, x, 1 );\n\t\tdelta = 0.01 * r;\n\t} else {\n\t\tdelta = opts.delta;\n\t}\n\treturn lowess( x, y, n, f, nsteps, delta );\n}\n\n\n// EXPORTS //\n\nmodule.exports = main;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Locally-weighted polynomial regression via the LOWESS algorithm.\n*\n* @module @stdlib/stats/lowess\n*\n* @example\n* var lowess = require( '@stdlib/stats/lowess' );\n*\n* var x = [\n*     4, 4, 7, 7, 8, 9, 10, 10, 10, 11, 11, 12, 12, 12, 12, 13, 13, 13, 13, 14,\n*     14, 14, 14, 15, 15, 15, 16, 16, 17, 17, 17, 18, 18, 18, 18, 19, 19, 19, 20,\n*     20, 20, 20, 20, 22, 23, 24, 24, 24, 24, 25\n* ];\n* var y = [\n*     2, 10, 4, 22, 16, 10, 18, 26, 34, 17, 28, 14, 20, 24, 28, 26, 34, 34, 46,\n*     26, 36, 60, 80, 20, 26, 54, 32, 40, 32, 40, 50, 42, 56, 76, 84, 36, 46, 68,\n*     32, 48, 52, 56, 64, 66, 54, 70, 92, 93, 120, 85\n* ];\n*\n* var out = lowess( x, y );\n* /* returns\n*     {\n*         'x': [\n*             4,\n*             4,\n*             7,\n*             7,\n*             ...,\n*             24,\n*             24,\n*             24,\n*             25\n*         ],\n*         'y': [\n*             ~4.857,\n*             ~4.857,\n*             ~13.1037,\n*             ~13.1037,\n*             ...,\n*             ~79.102,\n*             ~79.102,\n*             ~79.102,\n*             ~84.825\n*         ]\n*     }\n* *\\/\n*/\n\n// MODULES //\n\nvar lowess = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = lowess;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Bonferroni method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction bonferroni( pvalues, comparisons ) {\n\tvar pval;\n\tvar i;\n\tfor ( i = 0; i < pvalues.length; i++ ) {\n\t\tpval = pvalues[ i ];\n\t\tpvalues[ i ] = ( comparisons * pval > 1 ) ? 1 : comparisons * pval;\n\t}\n\treturn pvalues;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bonferroni;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar Int32Array = require( '@stdlib/array/int32' );\n\n\n// FUNCTIONS //\n\n/**\n* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {boolean} comparison result\n*/\nfunction ascending( a, b ) {\n\tif ( a < b ) {\n\t\treturn -1;\n\t}\n\tif ( a > b ) {\n\t\treturn 1;\n\t}\n\treturn 0;\n}\n\n/**\n* Returns a comparison result. If `-1`, `a` comes before `b`. If `1`, `b` comes before `a`. If `0`, the order stays the same.\n*\n* @private\n* @param {number} a - first number\n* @param {number} b - second number\n* @returns {boolean} comparison result\n*/\nfunction descending( a, b ) {\n\tif ( a < b ) {\n\t\treturn 1;\n\t}\n\tif ( a > b ) {\n\t\treturn -1;\n\t}\n\treturn 0;\n}\n\n\n// MAIN //\n\n/**\n* Returns a permutation which rearranges input array.\n*\n* @private\n* @param {ArrayLike} x - input array-like object\n* @param {boolean} invert - controls whether to permutation that sorts input array in descending order\n* @returns {Array} permutation array\n*/\nfunction order( x, invert ) {\n\tvar comparator;\n\tvar arr;\n\tvar i;\n\n\tcomparator = ( invert ) ? descending : ascending;\n\tarr = new Int32Array( x.length );\n\tfor ( i = 0; i < x.length; i++ ) {\n\t\tarr[ i ] = i;\n\t}\n\treturn arr.sort( compare );\n\n\t/**\n\t* Compare the elements of the input array.\n\t*\n\t* @private\n\t* @param {number} a - first number\n\t* @param {number} b - second number\n\t* @returns {boolean} comparison result\n\t*/\n\tfunction compare( a, b ) {\n\t\treturn comparator( x[a], x[b] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = order;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar min = require( '@stdlib/math/base/special/min' );\nvar max = require( '@stdlib/math/base/special/max' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar order = require( './order.js' );\n\n\n// VARIABLES //\n\nvar slice = Array.prototype.slice;\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via Hommel's method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction hommel( pvalues, comparisons ) {\n\tvar indices;\n\tvar diff;\n\tvar adj;\n\tvar idx;\n\tvar len;\n\tvar out;\n\tvar mq;\n\tvar m;\n\tvar i;\n\tvar j;\n\tvar k;\n\tvar q;\n\tvar v;\n\n\tlen = pvalues.length;\n\tdiff = comparisons - len;\n\tif ( diff > 0 ) {\n\t\tpvalues = slice.call( pvalues );\n\t\twhile ( diff > 0 ) {\n\t\t\tpvalues.push( 1.0 );\n\t\t\tdiff -= 1;\n\t\t}\n\t}\n\tindices = order( pvalues );\n\tm = PINF;\n\tfor ( i = 0; i < comparisons; i++ ) {\n\t\tv = comparisons * pvalues[ i ] / ( i+1 );\n\t\tif ( v < m ) {\n\t\t\tm = v;\n\t\t}\n\t}\n\tq = new Float64Array( comparisons );\n\tadj = new Float64Array( comparisons );\n\tfor ( i = comparisons - 1; i > 1; i-- ) {\n\t\tmq = PINF;\n\t\tfor ( k = comparisons - i + 1; k <= comparisons; k++ ) {\n\t\t\tv = i * pvalues[ indices[ k ] ] / ( 2 + k - comparisons + i - 1 );\n\t\t\tif ( v < mq ) {\n\t\t\t\tmq = v;\n\t\t\t}\n\t\t}\n\t\tfor ( j = 0; j < comparisons - i + 1; j++ ) {\n\t\t\tq[ j ] = min( i * pvalues[ indices[ j ] ], mq );\n\t\t}\n\t\tfor ( k = comparisons - i + 1; k <= comparisons; k++ ) {\n\t\t\tq[ k ] = q[ comparisons - i ];\n\t\t}\n\t\tfor ( j = 0; j < adj.length; j++ ) {\n\t\t\tadj[ j ] = max( q[ j ], adj[ j ] );\n\t\t}\n\t}\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tidx = indices[ i ];\n\t\tv = max( adj[ i ], pvalues[ idx ] );\n\t\tout[ idx ] = v;\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = hommel;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n* var N = x.length;\n*\n* var v = cumax( N, x, 1, y, 1 );\n* // returns [ 1.0, 1.0, 2.0 ]\n*/\nfunction cumax( N, x, strideX, y, strideY ) {\n\tvar max;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tmax = x[ ix ];\n\ty[ iy ] = max;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( max ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmax = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\tmax = v;\n\t\t\t}\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( max ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isPositiveZero = require( '@stdlib/math/base/assert/is-positive-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative maximum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = cumax( N, x, 2, 1, y, 1, 0 );\n* // returns [ 1.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction cumax( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar max;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmax = x[ ix ];\n\ty[ iy ] = max;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( max ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmax = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v > max || ( v === max && isPositiveZero( v ) ) ) {\n\t\t\t\tmax = v;\n\t\t\t}\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( max ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = max;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cumax = require( './cumax.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( cumax, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = cumax;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar min = require( '@stdlib/math/base/special/min' );\nvar cumax = require( './../../base/cumax' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar order = require( './order.js' );\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Bonferroni–Holm method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction holm( pvalues, comparisons ) {\n\tvar indices;\n\tvar sorted;\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = pvalues.length;\n\tindices = order( pvalues );\n\tsorted = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tsorted[ i ] = ( comparisons - i ) * pvalues[ indices[ i ] ];\n\t}\n\tsorted = cumax( len, sorted, 1, sorted, 1 );\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ indices[ i ] ] = min( sorted[ i ], 1.0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = holm;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @returns {NumericArray} output array\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var y = [ 0.0, 0.0, 0.0 ];\n* var N = x.length;\n*\n* var v = cumin( N, x, 1, y, 1 );\n* // returns [ 1.0, -2.0, -2.0 ]\n*/\nfunction cumin( N, x, strideX, y, strideY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tif ( strideX < 0 ) {\n\t\tix = (1-N) * strideX;\n\t} else {\n\t\tix = 0;\n\t}\n\tif ( strideY < 0 ) {\n\t\tiy = (1-N) * strideY;\n\t} else {\n\t\tiy = 0;\n\t}\n\tmin = x[ ix ];\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar isNegativeZero = require( '@stdlib/math/base/assert/is-negative-zero' );\n\n\n// MAIN //\n\n/**\n* Computes the cumulative minimum of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} strideX - `x` stride length\n* @param {NonNegativeInteger} offsetX - starting index for `x`\n* @param {NumericArray} y - output array\n* @param {integer} strideY - `y` stride length\n* @param {NonNegativeInteger} offsetY - starting index for `y`\n* @returns {NumericArray} output array\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var y = [ 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = cumin( N, x, 2, 1, y, 1, 0 );\n* // returns [ 1.0, -2.0, -2.0, -2.0, 0.0, 0.0, 0.0, 0.0 ]\n*/\nfunction cumin( N, x, strideX, offsetX, y, strideY, offsetY ) {\n\tvar min;\n\tvar ix;\n\tvar iy;\n\tvar v;\n\tvar i;\n\n\tif ( N <= 0 ) {\n\t\treturn y;\n\t}\n\tix = offsetX;\n\tiy = offsetY;\n\n\tmin = x[ ix ];\n\ty[ iy ] = min;\n\n\tiy += strideY;\n\ti = 1;\n\tif ( isnan( min ) === false ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\tix += strideX;\n\t\t\tv = x[ ix ];\n\t\t\tif ( isnan( v ) ) {\n\t\t\t\tmin = v;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif ( v < min || ( v === min && isNegativeZero( v ) ) ) {\n\t\t\t\tmin = v;\n\t\t\t}\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\tif ( isnan( min ) ) {\n\t\tfor ( i; i < N; i++ ) {\n\t\t\ty[ iy ] = min;\n\t\t\tiy += strideY;\n\t\t}\n\t}\n\treturn y;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cumin = require( './cumin.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( cumin, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = cumin;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar min = require( '@stdlib/math/base/special/min' );\nvar cumin = require( './../../base/cumin' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar order = require( './order.js' );\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Benjamini-Hochberg procedure.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction bh( pvalues, comparisons ) {\n\tvar indices;\n\tvar sorted;\n\tvar len;\n\tvar out;\n\tvar i;\n\n\tlen = pvalues.length;\n\tindices = order( pvalues, true );\n\tsorted = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tsorted[ i ] = comparisons / ( len - i ) * pvalues[ indices[ i ] ];\n\t}\n\tsorted = cumin( len, sorted, 1, sorted, 1 );\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ indices[ i ] ] = min( sorted[ i ], 1.0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = bh;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar min = require( '@stdlib/math/base/special/min' );\nvar cumin = require( './../../base/cumin' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar order = require( './order.js' );\n\n\n// MAIN //\n\n/**\n* Adjusts the p-values via the Benjamini & Yekutieli method.\n*\n* @private\n* @param {ProbabilityArray} pvalues - p-values to be adjusted\n* @param {PositiveInteger} comparisons - number of comparisons\n* @returns {ProbabilityArray} adjusted p-values\n*/\nfunction by( pvalues, comparisons ) {\n\tvar indices;\n\tvar sorted;\n\tvar len;\n\tvar out;\n\tvar i;\n\tvar q;\n\n\tlen = pvalues.length;\n\tindices = order( pvalues, true );\n\tq = 0;\n\tfor ( i = 0; i < comparisons; i++ ) {\n\t\tq += 1 / ( 1 + i );\n\t}\n\tsorted = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tsorted[ i ] = q * comparisons / ( len - i ) * pvalues[ indices[ i ] ];\n\t}\n\tsorted = cumin( len, sorted, 1, sorted, 1 );\n\tout = new Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tout[ indices[ i ] ] = min( sorted[ i ], 1.0 );\n\t}\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = by;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isProbabilityArray = require( '@stdlib/assert/is-probability-array' );\nvar isInteger = require( '@stdlib/assert/is-integer' ).isPrimitive;\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar format = require( '@stdlib/string/format' );\nvar bonferroni = require( './bonferroni.js' );\nvar hommel = require( './hommel.js' );\nvar holm = require( './holm.js' );\nvar bh = require( './bh.js' );\nvar by = require( './by.js' );\n\n\n// VARIABLES //\n\nvar METHODS = [ 'bh', 'bonferroni', 'by', 'holm', 'hommel' ];\n\n\n// MAIN //\n\n/**\n* Adjusts supplied p-values for multiple comparisons via a specified method.\n*\n* @param {ProbabilityArray} pvals - p-values to be adjusted\n* @param {string} method - correction method\n* @param {PositiveInteger} [comparisons=pvals.length] - number of comparisons\n* @throws {TypeError} first argument has to be an array-like object\n* @throws {TypeError} second argument must be a string\n* @throws {Error} second argument must be `bh`, `bonferroni`, `by`, `holm`, or `hommel`\n* @throws {RangeError} comparisons must be greater or equal to the number of elements in `pvals`\n* @returns {ProbabilityArray} array containing the corrected p-values\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'bonferroni' );\n* // returns [ 0.04, 0.15, ..., 1, 1 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'by' );\n* // returns [ ~0.091, ~0.171, ..., 1, ~0.571 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'bh' );\n* // returns [ 0.04, 0.075, ..., 0.6, 0.25 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'holm' );\n* // returns [ 0.04, 0.12, ..., 0.6, 0.4 ]\n*\n* @example\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'hommel' );\n* // returns [ 0.032, 0.12, ..., 0.6, 0.4 ]\n*/\nfunction padjust( pvals, method, comparisons ) {\n\tif ( !isProbabilityArray( pvals ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be an array of probabilities. Value: `%s`.', pvals ) );\n\t}\n\tif ( !isString( method ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a string. Value: `%s`.', method ) );\n\t}\n\tif ( arguments.length > 2 ) {\n\t\tif ( !isInteger( comparisons ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. `comparisons` must be an integer. Value: `%s`.', comparisons ) );\n\t\t}\n\t\tif ( comparisons < pvals.length ) {\n\t\t\tthrow new RangeError( format( 'invalid argument. When specified, `%s` arguments must have at least a length of %u. Value: `%u`.', 'comparisons', pvals.length, comparisons ) );\n\t\t}\n\t}\n\tcomparisons = comparisons || pvals.length;\n\tswitch ( method ) {\n\tcase 'bonferroni':\n\t\treturn bonferroni( pvals, comparisons );\n\tcase 'by':\n\t\treturn by( pvals, comparisons );\n\tcase 'bh':\n\t\treturn bh( pvals, comparisons );\n\tcase 'holm':\n\t\treturn holm( pvals, comparisons );\n\tcase 'hommel':\n\t\treturn hommel( pvals, comparisons );\n\tdefault:\n\t\tthrow new Error( format( 'invalid argument. Second argument must be one of %s. Value: `%s`.', METHODS.join( ', ' ), method ) );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = padjust;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Adjust supplied p-values for multiple comparisons via a specified method.\n*\n* @module @stdlib/stats/padjust\n*\n* @example\n* var padjust = require( '@stdlib/stats/padjust' );\n*\n* var pvalues = [ 0.008, 0.03, 0.123, 0.6, 0.2 ];\n* var out = padjust( pvalues, 'bh' );\n* // returns [ 0.04, 0.075, ~0.205, 0.6, 0.25 ]\n*/\n\n// MODULES //\n\nvar padjust = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = padjust;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True correlation coefficient is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas/ext/base/gsumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = variancepn( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction variancepn( N, correction, x, stride ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = gsumpw( N, x, stride ) / N;\n\n\tif ( stride < 0 ) {\n\t\tix = (1-N) * stride;\n\t} else {\n\t\tix = 0;\n\t}\n\t// Compute the variance...\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += stride;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas/ext/base/gsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array using a two-pass algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = variancepn( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction variancepn( N, correction, x, stride, offset ) {\n\tvar mu;\n\tvar ix;\n\tvar M2;\n\tvar M;\n\tvar d;\n\tvar n;\n\tvar i;\n\n\tn = N - correction;\n\tif ( N <= 0 || n <= 0.0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn 0.0;\n\t}\n\t// Compute an estimate for the mean:\n\tmu = gsumpw( N, x, stride, offset ) / N;\n\n\t// Compute the variance...\n\tix = offset;\n\tM2 = 0.0;\n\tM = 0.0;\n\tfor ( i = 0; i < N; i++ ) {\n\t\td = x[ ix ] - mu;\n\t\tM2 += d * d;\n\t\tM += d;\n\t\tix += stride;\n\t}\n\treturn (M2/n) - ((M/N)*(M/n));\n}\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar variancepn = require( './variancepn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( variancepn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = variancepn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar variancepn = require( './../../../base/variancepn' );\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} variance\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = variance( N, 1, x, 1 );\n* // returns ~4.3333\n*/\nfunction variance( N, correction, x, stride ) {\n\treturn variancepn( N, correction, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar variancepn = require( './../../../base/variancepn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the variance of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {number} correction - degrees of freedom adjustment\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} variance\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = variance( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\nfunction variance( N, correction, x, stride, offset ) {\n\treturn variancepn( N, correction, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar variance = require( './variance.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( variance, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the variance of a strided array.\n*\n* @module @stdlib/stats/base/variance\n*\n* @example\n* var variance = require( '@stdlib/stats/base/variance' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = variance( N, 1, x, 1 );\n* // returns ~4.3333\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var variance = require( '@stdlib/stats/base/variance' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = variance.ndarray( N, 1, x, 2, 1 );\n* // returns 6.25\n*/\n\n// MODULES //\n\nvar variance = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = variance;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas/ext/base/gsumpw' );\nvar gapxsumpw = require( '@stdlib/blas/ext/base/gapxsumpw' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = meanpn( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction meanpn( N, x, stride ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\t// Compute an estimate for the meanpn:\n\tmu = gsumpw( N, x, stride ) / N;\n\n\t// Compute an error term:\n\tc = gapxsumpw( N, -mu, x, stride ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar gsumpw = require( '@stdlib/blas/ext/base/gsumpw' ).ndarray;\nvar gapxsumpw = require( '@stdlib/blas/ext/base/gapxsumpw' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array using a two-pass error correction algorithm.\n*\n* ## Method\n*\n* -   This implementation uses a two-pass approach, as suggested by Neely (1966).\n*\n* ## References\n*\n* -   Neely, Peter M. 1966. \"Comparison of Several Algorithms for Computation of Means, Standard Deviations and Correlation Coefficients.\" _Communications of the ACM_ 9 (7). Association for Computing Machinery: 496–99. doi:[10.1145/365719.365958](https://doi.org/10.1145/365719.365958).\n* -   Schubert, Erich, and Michael Gertz. 2018. \"Numerically Stable Parallel Computation of (Co-)Variance.\" In _Proceedings of the 30th International Conference on Scientific and Statistical Database Management_. New York, NY, USA: Association for Computing Machinery. doi:[10.1145/3221269.3223036](https://doi.org/10.1145/3221269.3223036).\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = meanpn( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction meanpn( N, x, stride, offset ) {\n\tvar mu;\n\tvar c;\n\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\t// Compute an estimate for the meanpn:\n\tmu = gsumpw( N, x, stride, offset ) / N;\n\n\t// Compute an error term:\n\tc = gapxsumpw( N, -mu, x, stride, offset ) / N;\n\n\treturn mu + c;\n}\n\n\n// EXPORTS //\n\nmodule.exports = meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar meanpn = require( './meanpn.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( meanpn, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = meanpn;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar meanpn = require( './../../../base/meanpn' );\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = mean( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction mean( N, x, stride ) {\n\treturn meanpn( N, x, stride );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar meanpn = require( './../../../base/meanpn' ).ndarray;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a strided array.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {NumericArray} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mean( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction mean( N, x, stride, offset ) {\n\treturn meanpn( N, x, stride, offset );\n}\n\n\n// EXPORTS //\n\nmodule.exports = mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar mean = require( './mean.js' );\nvar ndarray = require( './ndarray.js' );\n\n\n// MAIN //\n\nsetReadOnly( mean, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nmodule.exports = mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the arithmetic mean of a strided array.\n*\n* @module @stdlib/stats/base/mean\n*\n* @example\n* var mean = require( '@stdlib/stats/base/mean' );\n*\n* var x = [ 1.0, -2.0, 2.0 ];\n* var N = x.length;\n*\n* var v = mean( N, x, 1 );\n* // returns ~0.3333\n*\n* @example\n* var floor = require( '@stdlib/math/base/special/floor' );\n* var mean = require( '@stdlib/stats/base/mean' );\n*\n* var x = [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ];\n* var N = floor( x.length / 2 );\n*\n* var v = mean.ndarray( N, x, 2, 1 );\n* // returns 1.25\n*/\n\n// MODULES //\n\nvar mean = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = mean;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar max = require( '@stdlib/math/base/special/max' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar variance = require( './../../base/variance' );\nvar mean = require( './../../base/mean' );\n\n\n// MAIN //\n\n/**\n* Computes the Pearson product-moment correlation coefficient between `x` and `y`.\n*\n* @private\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @returns {number} correlation coefficient\n*\n* @example\n* var x = [ 1.0, 2.0, 2.0, 1.0 ];\n* var y = [ 1.8, 2.2, 2.5, 1.4 ];\n* var r = pcorr( x, y );\n* // returns ~0.905\n*/\nfunction pcorr( x, y ) {\n\tvar denom;\n\tvar num;\n\tvar out;\n\tvar xy;\n\tvar xm;\n\tvar ym;\n\tvar i;\n\tvar n;\n\n\tn = x.length;\n\txm = mean( n, x, 1 );\n\tym = mean( n, y, 1 );\n\txy = 0.0;\n\tfor ( i = 0; i < n; i++ ) {\n\t\txy += x[ i ] * y[ i ];\n\t}\n\tnum = xy - ( n * xm * ym );\n\tdenom = ( n-1 ) * sqrt(variance(n, 1, x, 1)) * sqrt(variance(n, 1, y, 1) );\n\tout = num / denom;\n\n\t// Handle rounding errors:\n\treturn max( min( out, 1.0 ), -1.0 );\n}\n\n\n// EXPORTS //\n\nmodule.exports = pcorr;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar indexOf = require( '@stdlib/utils/index-of' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar alternative = [ 'two-sided', 'less', 'greater' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.rho] - correlation coefficient unter HO\n* @returns {(null|Error)} null or an error\n*\n* @example\n* var opts = {};\n* var options = {\n*     'alpha': 0.01,\n*     'rho': 0.8\n* };\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif (\n\t\t\t!isNumber( opts.alpha ) ||\n\t\t\tisnan( opts.alpha ) ||\n\t\t\topts.alpha < 0.0 ||\n\t\t\topts.alpha > 1.0\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number in `[0,1]`. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( indexOf( alternative, opts.alternative ) === -1 ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be one of the following: \"%s\". Option: `%s`.', 'alternative',  alternative.join( '\", \"' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'rho' ) ) {\n\t\topts.rho = options.rho;\n\t\tif (\n\t\t\t!isNumber( opts.rho ) ||\n\t\t\tisnan( opts.rho ) ||\n\t\t\topts.rho < -1.0 ||\n\t\t\topts.rho > 1.0\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number in [-1,1]. Option: `%s`.', 'rho', opts.rho ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar quantileFactory = require( './../../base/dists/normal/quantile' ).factory;\nvar cdfFactory = require( './../../base/dists/normal/cdf' ).factory;\nvar format = require( '@stdlib/string/format' );\nvar atanh = require( '@stdlib/math/base/special/atanh' );\nvar tanh = require( '@stdlib/math/base/special/tanh' );\nvar tCDF = require( './../../base/dists/t/cdf' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\nvar pcorr = require( './pcorr.js' );\nvar validate = require( './validate.js' );\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Pearson product-moment correlation test between paired samples.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.rho=0.0] - correlation under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {Error} x and y must be arrays of the same length\n* @throws {Error} x and y must contain at least four elements\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 2, 4, 3, 1, 2, 3 ];\n* var y = [ 3, 2, 4, 1, 2, 4 ];\n* var out = pcorrTest( x, y );\n*/\nfunction pcorrTest( x, y, options ) {\n\tvar method;\n\tvar alpha;\n\tvar cint;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar rho;\n\tvar val;\n\tvar df;\n\tvar se;\n\tvar n;\n\tvar r;\n\tvar z;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t}\n\tn = x.length;\n\tif ( n !== y.length ) {\n\t\tthrow new Error( 'invalid arguments. Arguments `x` and `y` must be arrays of the same length' );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( n < 4 ) {\n\t\tthrow new Error( 'not enough observations. `x` and `y` must contain at least four observations.' );\n\t}\n\tif ( opts.rho === void 0 ) {\n\t\trho = 0.0;\n\t} else {\n\t\trho = opts.rho;\n\t}\n\tif ( opts.alternative === void 0 ) {\n\t\talt = 'two-sided';\n\t} else {\n\t\talt = opts.alternative;\n\t}\n\n\tr = pcorr( x, y );\n\tz = atanh( r );\n\tse = 1.0 / sqrt( n - 3 );\n\tif ( rho === 0.0 ) {\n\t\t// Use t-test for H0: rho = 0.0 vs H1: rho != 0.0...\n\t\tmethod = 't-test for Pearson correlation coefficient';\n\t\tdf = n - 2;\n\t\tstat = sqrt( df ) * r / sqrt( 1.0 - (r*r) );\n\t\tswitch ( alt ) {\n\t\tcase 'greater':\n\t\t\tpval = 1.0 - tCDF( stat, df );\n\t\t\tbreak;\n\t\tcase 'less':\n\t\t\tpval = tCDF( stat, df);\n\t\t\tbreak;\n\t\tcase 'two-sided':\n\t\tdefault:\n\t\t\tpval = 2.0 * min( tCDF( stat, df), 1.0 - tCDF( stat, df ));\n\t\t\tbreak;\n\t\t}\n\t} else {\n\t\t// Use large-sample normality to calculate p-value based on Fisher's z transform...\n\t\tmethod = 'Fisher\\'s z transform test for Pearson correlation coefficient';\n\t\tstat = ( z - atanh( rho ) ) * sqrt( n - 3 );\n\t\tswitch ( alt ) {\n\t\tcase 'greater':\n\t\t\tpval = normCDF( -stat );\n\t\t\tbreak;\n\t\tcase 'less':\n\t\t\tpval = 1.0 - normCDF( -stat );\n\t\t\tbreak;\n\t\tcase 'two-sided':\n\t\tdefault:\n\t\t\tpval = 2.0 * min( normCDF( -stat ), 1.0 - normCDF( -stat ));\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tswitch ( alt ) {\n\tcase 'greater':\n\t\tcint = [ tanh( z - ( se*normQuantile( 1.0 - alpha ) ) ), 1.0 ];\n\t\tbreak;\n\tcase 'less':\n\t\tcint = [ -1.0, tanh( z + ( se*normQuantile( 1.0 - alpha ) ) ) ];\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tval = se * normQuantile( 1.0 - ( alpha/2.0 ) );\n\t\tcint = [ tanh( z - val ), tanh( z + val ) ];\n\t\tbreak;\n\t}\n\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', method );\n\tsetReadOnly( out, 'nullValue', rho );\n\tsetReadOnly( out, 'pcorr', r );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = pcorrTest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Pearson product-moment correlation test between paired samples.\n*\n* @module @stdlib/stats/pcorrtest\n*\n* @example\n* var pcorrtest = require( '@stdlib/stats/pcorrtest' );\n* var incrspace = require( '@stdlib/array/base/incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 11, 21, 1 );\n*\n* var out = pcorrtest( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\n\nvar pcorrtest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = pcorrtest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar contains = require( '@stdlib/assert/contains' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar ALTERNATIVE = [\n\t'two-sided',\n\t'less',\n\t'greater'\n];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination object\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis\n* @param {number} [options.mu] - mean under `H0`\n* @returns {(null|Error)} null or an error object\n*\n* @example\n* var options = {\n*     'alpha': 0.05\n* };\n* var opts = {};\n*\n* var err = validate( opts, options );\n* if ( err ) {\n*     throw err;\n* }\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be between `0` and `1` (inclusive). Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE, opts.alternative ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of the following: `%s`.', 'alternative', ALTERNATIVE.join( ', ' ) ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired t-test' ) {\n\t\tstr += 'True difference in means is ';\n\t} else {\n\t\tstr += 'True mean is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + this.df + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar tCDF = require( './../../base/dists/t/cdf' );\nvar tQuantile = require( './../../base/dists/t/quantile' );\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar mean = require( './../../base/mean' );\nvar variance = require( './../../base/variance' );\nvar gcopy = require( '@stdlib/blas/base/gcopy' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a one-sample or paired Student's t test.\n*\n* @param {NumericArray} x - input array\n* @param {NumericArray} [y] - optional paired array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {number} [options.mu=0.0] - mean under `H0`\n* @throws {TypeError} first argument must be a numeric array\n* @throws {Error} first argument must have at least two elements\n* @throws {Error} paired array must have the same length as the first argument\n* @throws {TypeError} second argument must be either a numeric array or an options object\n* @throws {TypeError} `alpha` option must be number\n* @throws {RangeError} `alpha` option must be reside along the interval `[0,1]`\n* @throws {TypeError} `alternative` option must be a recognized option value (`two-sided`, `less`, or `greater`)\n* @throws {TypeError} `mu` option must be a number\n* @returns {Object} test results\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'mu': 5.0\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*\n* @example\n* var x = [ 4.0, 4.0, 6.0, 6.0, 5.0 ];\n* var opts = {\n*     'alternative': 'greater'\n* };\n* var out = ttest( x, opts );\n* // returns {...}\n*/\nfunction ttest( x ) {\n\tvar stderr;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar err;\n\tvar len;\n\tvar out;\n\tvar df;\n\tvar tq;\n\tvar y;\n\tvar i;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tlen = x.length;\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must have at least two elements. Value: `%s`.', x ) );\n\t}\n\topts = {\n\t\t'mu': 0.0,\n\t\t'alpha': 0.05,\n\t\t'alternative': 'two-sided'\n\t};\n\tif ( arguments.length === 2 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\terr = validate( opts, arguments[ 1 ] );\n\t\t\tif ( err ) {\n\t\t\t\tthrow err;\n\t\t\t}\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be either a numeric array or an options object. Value: `%s`.', y ) );\n\t\t\t}\n\t\t}\n\t} else if ( arguments.length > 2 ) {\n\t\ty = arguments[ 1 ];\n\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. Second argument must be a numeric array. Value: `%s`.', y ) );\n\t\t}\n\t\terr = validate( opts, arguments[ 2 ] );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tif ( y ) {\n\t\tif ( y.length !== len ) {\n\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same length.' );\n\t\t}\n\t\tx = gcopy( len, x, 1, new Float64Array( len ), 1 );\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tx[ i ] -= y[ i ];\n\t\t}\n\t}\n\tstderr = sqrt( variance( len, 1, x, 1 ) / len ); // TODO: replace with base/sem\n\txmean = mean( len, x, 1 ); // TODO: ideally, we would get both the sem and the mean from the same function and without needing to traverse 3-4 times\n\tstat = ( xmean-opts.mu ) / stderr;\n\tdf = len - 1;\n\tif ( opts.alternative === 'two-sided' ) {\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\ttq = tQuantile( 1.0-(opts.alpha/2.0), df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t} else if ( opts.alternative === 'greater' ) {\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\topts.mu + ( (stat-tq)*stderr ),\n\t\t\tPINF\n\t\t];\n\t} else { // opts.alternative === 'less'\n\t\tpval = tCDF( stat, df );\n\t\ttq = tQuantile( 1.0-opts.alpha, df );\n\t\tcint = [\n\t\t\tNINF,\n\t\t\topts.mu + ( (stat+tq)*stderr )\n\t\t];\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= opts.alpha );\n\tsetReadOnly( out, 'alpha', opts.alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'nullValue', opts.mu );\n\tsetReadOnly( out, 'mean', xmean );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'alternative', opts.alternative );\n\tsetReadOnly( out, 'method', ( y ) ? 'Paired t-test' : 'One-sample t-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ttest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample Student's t-Test.\n*\n* @module @stdlib/stats/ttest\n*\n* @example\n* var normal = require( '@stdlib/random/base/normal' ).factory;\n* var Float64Array = require( '@stdlib/array/float64' );\n* var ttest = require( '@stdlib/stats/ttest' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample t-test:\n* x = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ttest( x );\n*\n* // Paired t-test:\n* x = new Float64Array( 100 );\n* y = new Float64Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = ttest( x, y );\n*/\n\n// MODULES //\n\nvar ttest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ttest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @param {string} [options.variance] - whether variances are `equal` or `unequal` under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'difference', opts.difference ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'variance' ) ) {\n\t\topts.variance = options.variance;\n\t\tif ( !isString( opts.variance ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'variance', opts.variance ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    df: ' + roundn( this.df, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar tCDF = require( './../../base/dists/t/cdf' );\nvar tQuantile = require( './../../base/dists/t/quantile' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar pow = require( '@stdlib/math/base/special/pow' );\nvar mean = require( './../../base/mean' );\nvar variance = require( './../../base/variance' );\nvar format = require( '@stdlib/string/format' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a two-sample Student's t test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @param {string} [options.variance='unequal'] - whether variances are `equal` or `unequal` under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} difference option has to be a number\n* @throws {TypeError} variance option has to be a string\n* @throws {Error} variance option must be `equal` or `unequal`\n* @returns {Object} test result object\n*/\nfunction ttest2( x, y, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar vars;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar sdx;\n\tvar sdy;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\tvar df;\n\tvar v;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = variance( nx, 1, x, 1 );\n\tyvar = variance( ny, 1, y, 1 );\n\n\tvars = opts.variance || 'unequal';\n\tif ( vars === 'equal' ) {\n\t\tdf = nx + ny - 2;\n\t\tv = ((nx-1) * xvar) + ((ny-1) * yvar);\n\t\tv /= df;\n\t\tstderr = sqrt( v * ((1/nx) + (1/ny)) );\n\t}\n\telse if ( vars === 'unequal' ) {\n\t\tsdx = sqrt( xvar/nx );\n\t\tsdy = sqrt( yvar/ny );\n\t\tstderr = sqrt( (sdx*sdx) + (sdy*sdy) );\n\t\tv = pow( sdx, 4 ) / ( nx - 1 );\n\t\tv += pow( sdy, 4 ) / ( ny - 1 );\n\t\tdf = pow( stderr, 4 ) / v;\n\t}\n\telse {\n\t\tthrow new Error( format( 'Invalid option. `variance` must be either `equal` or `unequal`. Value: `%s`.', vars ) );\n\t}\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * tCDF( -abs(stat), df );\n\t\tcint = [\n\t\t\tstat - tQuantile( 1.0-(alpha/2.0), df ),\n\t\t\tstat + tQuantile( 1.0-(alpha/2.0), df )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - tCDF( stat, df );\n\t\tcint = [ stat - tQuantile( 1.0-alpha, df ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = tCDF( stat, df );\n\t\tcint = [ NINF, stat + tQuantile( 1.0-alpha, df ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'df', df );\n\tsetReadOnly( out, 'method', ( vars === 'equal' ) ? 'Two-sample t-test' : 'Welch two-sample t-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ttest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample Student's t-Test.\n*\n* @module @stdlib/stats/ttest2\n*\n* @example\n* var ttest2 = require( '@stdlib/stats/ttest2' );\n* var incrspace = require( '@stdlib/array/base/incrspace' );\n*\n* var a = incrspace( 1, 11, 1 );\n* var b = incrspace( 7, 21, 1 );\n*\n* var out = ttest2( a, b );\n* var table = out.print();\n*/\n\n// MODULES //\n\nvar ttest2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ttest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Evaluates the quantile function for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2` at a probability `p`.\n*\n* @param {Probability} p - input value\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {number} evaluated quantile function\n*\n* @example\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~9.472\n*\n* @example\n* var y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~1.207\n*\n* @example\n* var y = quantile( 1.1, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( -0.2, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( NaN, 1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, NaN, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, -1.0, 1.0 );\n* // returns NaN\n*\n* @example\n* var y = quantile( 0.5, 1.0, -1.0 );\n* // returns NaN\n*/\nfunction quantile( p, d1, d2 ) {\n\tvar xs;\n\tif (\n\t\tisnan( p ) ||\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0 ||\n\t\tp < 0.0 ||\n\t\tp > 1.0\n\t) {\n\t\treturn NaN;\n\t}\n\txs = kernelBetaincinv( d1/2.0, d2/2.0, p, 1.0 - p );\n\treturn d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );\n}\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar kernelBetaincinv = require( '@stdlib/math/base/special/kernel-betaincinv' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the quantile function for an F distribution with numerator degrees of freedom `d1` and denominator degrees of freedom `d2`.\n*\n* @param {PositiveNumber} d1 - numerator degrees of freedom\n* @param {PositiveNumber} d2 - denominator degrees of freedom\n* @returns {Function} quantile function\n*\n* @example\n* var quantile = factory( 10.0, 2.0 );\n* var y = quantile( 0.4 );\n* // returns ~0.994\n*\n* y = quantile( 0.8 );\n* // returns ~4.382\n*/\nfunction factory( d1, d2 ) {\n\tif (\n\t\tisnan( d1 ) ||\n\t\tisnan( d2 ) ||\n\t\td1 <= 0.0 ||\n\t\td2 <= 0.0\n\t) {\n\t\treturn constantFunction( NaN );\n\t}\n\treturn quantile;\n\n\t/**\n\t* Evaluates the quantile function for an F distribution.\n\t*\n\t* @private\n\t* @param {Probability} p - input value\n\t* @returns {number} evaluated quantile function\n\t*\n\t* @example\n\t* var y = quantile( 0.3 );\n\t* // returns <number>\n\t*/\n\tfunction quantile( p ) {\n\t\tvar xs;\n\t\tif ( isnan( p ) || p < 0.0 || p > 1.0 ) {\n\t\t\treturn NaN;\n\t\t}\n\t\txs = kernelBetaincinv( d1/2.0, d2/2.0, p, 1.0 - p );\n\t\treturn d2 * xs[ 0 ] / ( d1 * xs[ 1 ] );\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Evaluate the quantile function for an F distribution.\n*\n* @module @stdlib/stats/base/dists/f/quantile\n*\n* @example\n* var quantile = require( '@stdlib/stats/base/dists/f/quantile' );\n*\n* var y = quantile( 0.8, 1.0, 1.0 );\n* // returns ~9.472\n*\n* y = quantile( 0.5, 4.0, 2.0 );\n* // returns ~1.207\n*\n* var myquantile = quantile.factory( 10.0, 2.0 );\n*\n* y = myquantile( 0.2 );\n* // returns ~0.527\n*\n* y = myquantile( 0.8 );\n* // returns ~4.382\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar quantile = require( './quantile.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( quantile, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = quantile;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {PositiveNumber} [options.ratio] - ratio of population variances under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'ratio' ) ) {\n\t\topts.ratio = options.ratio;\n\t\tif ( !isPositiveNumber( opts.ratio ) || isnan( opts.ratio ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a positive number. Option: `%s`.', 'ratio', opts.ratio ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True ratio in variances is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    variance of x: ' + roundn( this.xvar, -dgts );\n\tstr += ' (df of x: ' + roundn( this.dfX, -dgts ) + ')\\n';\n\tstr += '    variance of y: ' + roundn( this.yvar, -dgts );\n\tstr += ' (df of y: ' + roundn( this.dfY, -dgts ) + ')\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar fCDF = require( './../../base/dists/f/cdf' );\nvar fQuantile = require( './../../base/dists/f/quantile' );\nvar variance = require( './../../base/variance' );\nvar format = require( '@stdlib/string/format' );\nvar min = require( '@stdlib/math/base/special/min' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// MAIN //\n\n/**\n* Computes a two-sample F-test for equal variances.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {PositiveNumber} [options.ratio=1] - ratio of population variances under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} ratio option has to be a number\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 610, 610, 550, 590, 565, 570 ];\n* var y = [ 560, 550, 580, 550, 560, 590, 550, 590 ];\n*\n* var out = vartest( x, y );\n*/\nfunction vartest( x, y, options ) {\n\tvar estimate;\n\tvar alpha;\n\tvar ratio;\n\tvar beta;\n\tvar cint;\n\tvar opts;\n\tvar pval;\n\tvar stat;\n\tvar xvar;\n\tvar yvar;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar dfX;\n\tvar dfY;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tratio = opts.ratio || 1.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tdfX = x.length - 1;\n\tdfY = y.length - 1;\n\n\txvar = variance( x.length, 1, x, 1 );\n\tyvar = variance( y.length, 1, y, 1 );\n\n\testimate = xvar / yvar;\n\tstat = estimate / ratio;\n\tpval = fCDF( stat, dfX, dfY );\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * min( pval, 1.0 - pval );\n\t\tbeta = alpha / 2.0;\n\t\tcint = [\n\t\t\testimate / fQuantile( 1.0 - beta, dfX, dfY ),\n\t\t\testimate / fQuantile( beta, dfX, dfY )\n\t\t];\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - pval;\n\t\tcint = [\n\t\t\testimate / fQuantile( 1.0 - alpha, dfX, dfY ),\n\t\t\tPINF\n\t\t];\n\t\tbreak;\n\tcase 'less':\n\t\tcint = [\n\t\t\t0.0,\n\t\t\testimate / fQuantile( alpha, dfX, dfY )\n\t\t];\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'xvar', xvar );\n\tsetReadOnly( out, 'yvar', yvar );\n\tsetReadOnly( out, 'dfX', dfX );\n\tsetReadOnly( out, 'dfY', dfY );\n\tsetReadOnly( out, 'method', 'F test for comparing two variances' );\n\tsetReadOnly( out, 'nullValue', ratio );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = vartest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar memoize = require( '@stdlib/utils/memoize' );\n\n\n// VARIABLES //\n\nvar memoized;\n\n\n// FUNCTIONS //\n\n/**\n* Calculates the weight for the `(x,n)` pair and memoizes the result.\n*\n* @private\n* @param {number} x - input value\n* @param {NonNegativeInteger} n - number of observations\n* @returns {number} weight\n*/\nfunction weights( x, n ) {\n\tvar mlim;\n\n\tif ( n === 0 ) {\n\t\treturn ( x === 0 ) ? 1 : 0;\n\t}\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x < 0 || x > mlim ) {\n\t\treturn 0;\n\t}\n\tif ( x > mlim / 2 ) {\n\t\tx = mlim - x;\n\t}\n\treturn memoized( x - n, n - 1 ) + memoized( x, n - 1 );\n}\n\n\n// MAIN //\n\nmemoized = memoize( weights );\n\n\n// EXPORTS //\n\nmodule.exports = memoized;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample F-test for equal variances.\n*\n* @module @stdlib/stats/vartest\n*\n* @example\n* var vartest = require( '@stdlib/stats/vartest' );\n*\n* var x = [ 610, 610, 550, 590, 565, 570 ];\n* var y = [ 560, 550, 580, 550, 560, 590, 550, 590 ];\n*\n* var out = vartest( x, y );\n*/\n\n// MODULES //\n\nvar vartest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = vartest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );\nvar isfinite = require( '@stdlib/math/base/assert/is-finite' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar round = require( '@stdlib/math/base/special/round' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar LN2 = require( '@stdlib/constants/float64/ln-two' );\nvar weights = require( './weights.js' );\n\n\n// MAIN //\n\n/**\n* Evaluates the cumulative distribution function (CDF) of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {number} x - input value\n* @param {PositiveInteger} n - number of observations\n* @returns {Probability} evaluated CDF\n*\n* @example\n* var y = cdf( 7.0, 9 );\n* // returns ~0.037\n*\n* @example\n* var y = cdf( 7.0, 6 );\n* // returns ~0.281\n*\n* @example\n* var y = cdf( -1.0, 40 );\n* // returns 0.0\n*\n* @example\n* var y = cdf( NaN, 10 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 0.0, NaN );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, -1 );\n* // returns NaN\n*\n* @example\n* var y = cdf( 2.0, 1.8 );\n* // returns NaN\n*/\nfunction cdf( x, n ) {\n\tvar mlim;\n\tvar pui;\n\tvar i;\n\tvar p;\n\tif (\n\t\tisnan( x ) ||\n\t\t!isPositiveInteger( n ) ||\n\t\t!isfinite( n )\n\t) {\n\t\treturn NaN;\n\t}\n\tif ( x < 0.0 ) {\n\t\treturn 0.0;\n\t}\n\tx = round( x );\n\tmlim = n * ( n + 1 ) / 2;\n\tif ( x >= mlim ) {\n\t\treturn 1.0;\n\t}\n\tpui = exp( -n * LN2 );\n\tp = 0;\n\tfor ( i = 0; i <= x; i++ ) {\n\t\tp += weights( i, n ) * pui;\n\t}\n\treturn p;\n}\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/math/base/assert/is-positive-integer' );\nvar constantFunction = require( '@stdlib/utils/constant-function' );\nvar isfinite = require( '@stdlib/math/base/assert/is-finite' );\nvar round = require( '@stdlib/math/base/special/round' );\nvar isnan = require( '@stdlib/math/base/assert/is-nan' );\nvar exp = require( '@stdlib/math/base/special/exp' );\nvar LN2 = require( '@stdlib/constants/float64/ln-two' );\nvar weights = require( './weights.js' );\n\n\n// MAIN //\n\n/**\n* Returns a function for evaluating the cumulative distribution function (CDF) for the distribution of the Wilcoxon signed rank test statistic with `n` observations.\n*\n* @param {PositiveInteger} n - number of observations\n* @returns {Function} CDF\n*\n* @example\n* var cdf = factory( 8 );\n* var y = cdf( 3.9 );\n* // returns ~0.027\n*\n* y = cdf( 17.0 );\n* // returns ~0.473\n*/\nfunction factory( n ) {\n\tvar mlim;\n\tvar pui;\n\n\tif ( !isPositiveInteger( n ) || !isfinite( n ) ) {\n\t\treturn constantFunction( NaN );\n\t}\n\tpui = exp( -n * LN2 );\n\tmlim = n * ( n + 1 ) / 2;\n\treturn cdf;\n\n\t/**\n\t* Evaluates the cumulative distribution function (CDF) for the distribution of the Wilcoxon signed rank test statistic.\n\t*\n\t* @private\n\t* @param {number} x - input value\n\t* @returns {Probability} evaluated CDF\n\t*\n\t* @example\n\t* var y = cdf( 2 );\n\t* // returns <number>\n\t*/\n\tfunction cdf( x ) {\n\t\tvar i;\n\t\tvar p;\n\t\tif ( isnan( x ) ) {\n\t\t\treturn NaN;\n\t\t}\n\t\tif ( x < 0.0 ) {\n\t\t\treturn 0.0;\n\t\t}\n\t\tx = round( x );\n\t\tif ( x >= mlim ) {\n\t\t\treturn 1.0;\n\t\t}\n\t\tp = 0;\n\t\tfor ( i = 0; i <= x; i++ ) {\n\t\t\tp += weights( i, n ) * pui;\n\t\t}\n\t\treturn p;\n\t}\n}\n\n\n// EXPORTS //\n\nmodule.exports = factory;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Wilcoxon signed rank test statistic cumulative distribution function (CDF).\n*\n* @module @stdlib/stats/base/dists/signrank/cdf\n*\n* @example\n* var cdf = require( '@stdlib/stats/base/dists/signrank/cdf' );\n*\n* var y = cdf( 7.0, 9 );\n* // returns ~0.037\n*\n* var myCDF = cdf.factory( 8 );\n* y = myCDF( 3.9 );\n* // returns ~0.027\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-nonenumerable-read-only-property' );\nvar cdf = require( './cdf.js' );\nvar factory = require( './factory.js' );\n\n\n// MAIN //\n\nsetReadOnly( cdf, 'factory', factory );\n\n\n// EXPORTS //\n\nmodule.exports = cdf;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar contains = require( '@stdlib/assert/contains' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// VARIABLES //\n\nvar ALTERNATIVE_VALUES = [ 'two-sided', 'less', 'greater' ];\nvar ZERO_METHOD_VALUES = [ 'pratt', 'wilcox', 'zsplit' ];\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {boolean} [options.exact] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {boolean} [options.correction] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {string} [options.zeroMethod] - method governing how zero-differences are handled (`pratt`, `wilcox` or `zsplit`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( opts.alpha < 0.0 || opts.alpha > 1.0 ) {\n\t\t\treturn new RangeError( format( 'invalid argument. Option `%s` must be a number in the range 0 to 1. Value: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ALTERNATIVE_VALUES, opts.alternative ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of %s. Option: `%s`.', 'alternative', ALTERNATIVE_VALUES.join( ', ' ), opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'correction' ) ) {\n\t\topts.correction = options.correction;\n\t\tif ( !isBoolean( opts.correction ) || isnan( opts.correction ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'correction', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'exact' ) ) {\n\t\topts.exact = options.exact;\n\t\tif (\n\t\t\t!isBoolean( opts.exact ) ||\n\t\t\tisnan( opts.exact )\n\t\t) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'exact', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'zeroMethod' ) ) {\n\t\topts.zeroMethod = options.zeroMethod;\n\t\tif ( !isString( opts.zeroMethod ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'zeroMethod', opts.alternative ) );\n\t\t}\n\t\tif ( !contains( ZERO_METHOD_VALUES, opts.zeroMethod ) ) {\n\t\t\treturn new Error( format( 'invalid option. `%s` option must be one of %s. Option: `%s`.', 'zeroMethod', ZERO_METHOD_VALUES.join( ', ' ), opts.zeroMethod ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// FUNCTIONS //\n\n/**\n* Comparator function to sort values in ascending order.\n*\n* @private\n* @param {number} a - first value\n* @param {number} b - second value\n* @returns {number} difference between `a` and `b`\n*/\nfunction ascending( a, b ) {\n\treturn a - b;\n}\n\n\n// MAIN //\n\n/**\n* Removes duplicate values from a numeric array.\n*\n* @private\n* @param {NumberArray} arr - array to be deduped\n* @returns {NumberArray} deduped array\n*/\nfunction unique( arr ) {\n\tvar len;\n\tvar val;\n\tvar i;\n\tvar j;\n\n\tarr = arr.slice();\n\tarr.sort( ascending );\n\tlen = arr.length;\n\n\t// Loop through the array, only incrementing a pointer when successive values are different. When a succeeding value is different, move the pointer and set the next value. In the trivial case where all array elements are unique, we incur a slight penalty in resetting the element value for each unique value. In other cases, we simply move a unique value to a new position in the array. The end result is a sorted array with unique values.\n\tfor ( i = 1, j = 0; i < len; i++ ) {\n\t\tval = arr[ i ];\n\t\tif ( arr[ j ] !== val ) {\n\t\t\tj += 1;\n\t\t\tarr[ j ] = val;\n\t\t}\n\t}\n\t// Truncate the array:\n\tarr.length = j + 1;\n\treturn arr;\n}\n\n\n// EXPORTS //\n\nmodule.exports = unique;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tif ( this.method === 'Paired Wilcoxon signed rank test' ) {\n\t\tstr += 'Median of the difference `x - y` is ';\n\t} else {\n\t\tstr += 'Median of `x` is ';\n\t}\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/* eslint-disable max-statements, max-lines-per-function */\n\n/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar ranks = require( './../../ranks' );\nvar normalCDF = require( './../../base/dists/normal/cdf' ).factory;\nvar signrankCDF = require( './../../base/dists/signrank/cdf' );\nvar tabulate = require( '@stdlib/utils/tabulate' );\nvar signum = require( '@stdlib/math/base/special/signum' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar Float64Array = require( '@stdlib/array/float64' );\nvar format = require( '@stdlib/string/format' );\nvar validate = require( './validate.js' );\nvar unique = require( './unique.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar pnorm = normalCDF( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a Wilcoxon signed rank test.\n*\n* @param {NumericArray} x - data array\n* @param {NumericArray} [y] - optional paired data array\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less`, or `greater`)\n* @param {string} [options.zeroMethod='wilcox'] - method governing how zero-differences are handled (`pratt`, `wilcox`, or `zsplit`)\n* @param {boolean} [options.correction=true] - continuity correction adjusting the Wilcoxon rank statistic by 0.5 towards the mean\n* @param {boolean} [options.exact=false] - whether to force using the exact distribution instead of a normal approximation when there are more than fifty data points\n* @param {number} [options.mu=0] - location parameter under H0\n* @throws {TypeError} `x` must be a numeric array\n* @throws {TypeError} `y` must be a numeric array\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} `alpha` option has to be a number\n* @throws {RangeError} `alpha` option has to be a number in the interval `[0,1]`\n* @throws {TypeError} `alternative` option has to be a string\n* @throws {Error} `alternative` option must be `two-sided`, `less`, or `greater`\n* @throws {TypeError} `zeroMethod` option has to be a string\n* @throws {Error} `zeroMethod` option must be `pratt`, `wilcox`, or `zsplit`\n* @throws {TypeError} `correction` option has to be a boolean\n* @throws {TypeError} `exact` option has to be a boolean\n* @throws {TypeError} `mu` option has to be a number\n* @returns {Object} test result object\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'mu': 2\n* });\n*\n* @example\n* var x = [ 6, 8, 14, 16, 23, 24, 28, 29, 41, -48, 49, 56, 60, -67, 75 ];\n* var out = wilcoxon( x, {\n*     'alternative': 'greater'\n* });\n*/\nfunction wilcoxon() {\n\tvar correction;\n\tvar zeroMethod;\n\tvar options;\n\tvar hasTies;\n\tvar counts;\n\tvar repsum;\n\tvar rplus;\n\tvar nzero;\n\tvar rzero;\n\tvar alpha;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar len;\n\tvar tmp;\n\tvar out;\n\tvar ad;\n\tvar mu;\n\tvar mn;\n\tvar se;\n\tvar d;\n\tvar i;\n\tvar r;\n\tvar T;\n\tvar v;\n\tvar x;\n\tvar y;\n\n\tx = arguments[ 0 ];\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tlen = x.length;\n\tif ( arguments.length > 1 ) {\n\t\tif ( isObject( arguments[ 1 ] ) ) {\n\t\t\toptions = arguments[ 1 ];\n\t\t} else {\n\t\t\ty = arguments[ 1 ];\n\t\t\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid argument. `y` argument must be a numeric array. Value: `%s`.', y ) );\n\t\t\t}\n\t\t\tif ( len !== y.length ) {\n\t\t\t\tthrow new Error( 'invalid arguments. The first and second arguments must have the same length.' );\n\t\t\t}\n\t\t\tif ( arguments.length > 2 ) {\n\t\t\t\toptions = arguments[ 2 ];\n\t\t\t}\n\t\t}\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.correction === void 0 ) {\n\t\tcorrection = true;\n\t} else {\n\t\tcorrection = opts.correction;\n\t}\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must contain at least two elements. Value: `%s`.', x ) );\n\t}\n\talt = opts.alternative || 'two-sided';\n\tzeroMethod = opts.zeroMethod || 'wilcox';\n\n\tif ( zeroMethod === 'wilcox' ) {\n\t\t// Only keep all non-zero differences:\n\t\td = [];\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tv = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( v !== 0 ) {\n\t\t\t\t\td.push( v );\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\tif ( x[ i ] !== 0 ) {\n\t\t\t\t\td.push( x[ i ] - mu );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tnzero = x.length - d.length;\n\t} else {\n\t\td = new Float64Array( len );\n\t\tnzero = 0;\n\t\tif ( y ) {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = ( x[ i ] - y[ i ] ) - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\t\td[ i ] = x[ i ] - mu;\n\t\t\t\tif ( d[ i ] === 0 ) {\n\t\t\t\t\tnzero += 1;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif ( nzero === len ) {\n\t\tthrow new Error( '`x` or `x - y` cannot be zero for all elements.' );\n\t}\n\t// Update length after potentially discarding zero values:\n\tlen = d.length;\n\tad = new Float64Array( len );\n\tfor ( i = 0; i < len; i++ ) {\n\t\tad[ i ] = abs( d[ i ] );\n\t}\n\tr = ranks( ad );\n\trplus = 0;\n\trzero = 0;\n\tfor ( i = 0; i < len; i++ ) {\n\t\tif ( d[ i ] > 0 ) {\n\t\t\trplus += r[ i ];\n\t\t}\n\t\telse if ( d[ i ] === 0 ) {\n\t\t\trzero += r[ i ];\n\t\t}\n\t}\n\thasTies = unique( r ).length !== r.length;\n\tif ( zeroMethod === 'zsplit' ) {\n\t\trplus += rzero / 2.0;\n\t}\n\tT = rplus;\n\tmn = len * ( len + 1.0 ) * 0.25;\n\tse = len * ( len + 1.0 ) * ( ( 2.0 * len ) + 1.0 );\n\n\tif ( zeroMethod === 'pratt' ) {\n\t\ttmp = [];\n\t\tfor ( i = 0; i < len; i++ ) {\n\t\t\tif ( d[ i ] !== 0 ) {\n\t\t\t\ttmp.push( r[ i ] );\n\t\t\t}\n\t\t}\n\t\tr = tmp;\n\t\tmn -= nzero * ( nzero + 1.0 ) * 0.25;\n\t\tse -= nzero * ( nzero + 1.0 ) * ( ( 2.0 * nzero ) + 1.0 );\n\t}\n\tcounts = tabulate( r );\n\trepsum = 0;\n\tfor ( i = 0; i < counts.length; i++ ) {\n\t\tif ( counts[ i ][ 1 ] > 1 ) {\n\t\t\tv = counts[ i ][ 1 ];\n\t\t\trepsum += v * ( (v*v) - 1 );\n\t\t}\n\t}\n\tif ( repsum > 0 ) {\n\t\t// Correction for repeated values:\n\t\tse -= 0.5 * repsum;\n\t}\n\tse = sqrt( se / 24.0 );\n\n\tif (\n\t\t( len > 50 && !opts.exact ) ||\n\t\tnzero > 0 ||\n\t\thasTies\n\t) {\n\t\td = 0.0;\n\t\tif ( correction ) {\n\t\t\tswitch ( alt ) {\n\t\t\tcase 'two-sided':\n\t\t\t\td = 0.5 * signum( T - mn );\n\t\t\t\tbreak;\n\t\t\tcase 'less':\n\t\t\t\td = -0.5;\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\td = 0.5;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// Compute test statistic and p-value using normal approximation:\n\t\tstat = ( T - mn - d ) / se;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tpval = 2.0 * ( 1.0 - pnorm( abs( stat ) ) );\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - pnorm( stat );\n\t\t} else {\n\t\t\tpval = pnorm( stat );\n\t\t}\n\t} else {\n\t\t// Compute test statistic and p-value using exact critical values:\n\t\tstat = T;\n\t\tif ( alt === 'two-sided' ) {\n\t\t\tif ( stat > ( len * ( len+1 ) / 4 ) ) {\n\t\t\t\tpval = 2.0 * ( 1 - signrankCDF( stat - 1, len ) );\n\t\t\t} else {\n\t\t\t\tpval = 2.0 * signrankCDF( stat, len );\n\t\t\t}\n\t\t} else if ( alt === 'greater' ) {\n\t\t\tpval = 1.0 - signrankCDF( stat - 1, len );\n\t\t} else {\n\t\t\tpval = signrankCDF( stat, len );\n\t\t}\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', T );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', ( ( y ) ? 'Paired' : 'One-Sample' ) + ' Wilcoxon signed rank test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = wilcoxon;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a Wilcoxon signed-rank test.\n*\n* @module @stdlib/stats/wilcoxon\n*\n* @example\n* var normal = require( '@stdlib/random/base/normal' ).factory;\n* var wilcoxon = require( '@stdlib/stats/wilcoxon' );\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample Wilcoxon signed rank test:\n* x = new Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = wilcoxon( x );\n*\n* // Paired Wilcoxon signed rank test:\n* x = new Array( 100 );\n* y = new Array( 100 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n*     y[ i ] = rnorm();\n* }\n* out = wilcoxon( x, y );\n*/\n\n// MODULES //\n\nvar wilcoxon = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = wilcoxon;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu] - mean under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'mu' ) ) {\n\t\topts.mu = options.mu;\n\t\tif ( !isNumber( opts.mu ) || isnan( opts.mu ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'mu', opts.mu ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True mean is ';\n\tswitch ( this.alternative ) {\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar cdfFactory = require( './../../base/dists/normal/cdf' ).factory;\nvar quantileFactory = require( './../../base/dists/normal/quantile' ).factory;\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar mean = require( './../../base/mean' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normalCDF = cdfFactory( 0.0, 1.0 );\nvar normalQuantile = quantileFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a one-sample z-test.\n*\n* @param {NumericArray} x - data array\n* @param {PositiveNumber} sigma - known standard deviation\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.mu=0] - mean under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} sigma argument has to be a positive number\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} alpha option has to be a number\n* @throws {RangeError} alpha option has to be a number in the interval `[0,1]`\n* @throws {TypeError} alternative option has to be a string\n* @throws {Error} alternative option must be `two-sided`, `less` or `greater`\n* @throws {TypeError} mu option has to be a number\n* @throws {TypeError} sigma option has to be a positive number\n* @returns {Object} test result object\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'mu': 5\n* });\n*\n* @example\n* var arr = [ 4, 4, 6, 6, 5 ];\n* var out = ztest( arr, 1.0, {\n*     'alternative': 'greater'\n* });\n*/\nfunction ztest( x, sigma, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar cint;\n\tvar pval;\n\tvar opts;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar len;\n\tvar mu;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isPositiveNumber( sigma ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `sigma` must be a positive number. Value: `%s`.', sigma ) );\n\t}\n\tlen = x.length;\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tmu = opts.mu || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tif ( alpha < 0.0 || alpha > 1.0 ) {\n\t\tthrow new RangeError( format( 'invalid argument. Option `alpha` must be a number in the range 0 to 1. Value: `%f`.', alpha ) );\n\t}\n\tif ( len < 2 ) {\n\t\tthrow new Error( format( 'invalid argument. First argument must contain at least two elements. Value: `%s`.', x ) );\n\t}\n\tstderr = sqrt( sigma*sigma / len );\n\txmean = mean( len, x, 1 );\n\tstat = ( xmean - mu ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normalCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normalQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normalQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normalCDF( stat );\n\t\tcint = [ stat - normalQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = mu + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normalCDF( stat );\n\t\tcint = [ NINF, stat + normalQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = mu + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'nullValue', mu );\n\tsetReadOnly( out, 'sd', stderr );\n\tsetReadOnly( out, 'method', 'One-sample z-test' );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a one-sample z-Test.\n*\n* @module @stdlib/stats/ztest\n*\n* @example\n* var ztest = require( '@stdlib/stats/ztest' );\n* var normal = require( '@stdlib/random/base/normal' ).factory;\n*\n* var rnorm;\n* var out;\n* var i;\n* var x;\n* var y;\n*\n* rnorm = normal( 1.0, 2.0, {\n*     'seed': 786\n* });\n*\n* // One-sample z-test:\n* x = new Array( 300 );\n* for ( i = 0; i < x.length; i++ ) {\n*     x[ i ] = rnorm();\n* }\n* out = ztest( x, 2.0 );\n*/\n\n// MODULES //\n\nvar ztest = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ztest;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isProbability = require( '@stdlib/assert/is-probability' ).isPrimitive;\nvar isNumber = require( '@stdlib/assert/is-number' ).isPrimitive;\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isString = require( '@stdlib/assert/is-string' ).isPrimitive;\nvar isnan = require( '@stdlib/assert/is-nan' );\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Validates function options.\n*\n* @private\n* @param {Object} opts - destination for validated options\n* @param {Options} options - function options\n* @param {number} [options.alpha] - significance level\n* @param {string} [options.alternative] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference] - difference in means under H0\n* @returns {(null|Error)} null or an error\n*/\nfunction validate( opts, options ) {\n\tif ( !isObject( options ) ) {\n\t\treturn new TypeError( format( 'invalid argument. Options argument must be an object. Value: `%s`.', options ) );\n\t}\n\tif ( hasOwnProp( options, 'alpha' ) ) {\n\t\topts.alpha = options.alpha;\n\t\tif ( !isNumber( opts.alpha ) || isnan( opts.alpha ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'alpha', opts.alpha ) );\n\t\t}\n\t\tif ( !isProbability( opts.alpha ) ) {\n\t\t\treturn new RangeError( format( 'invalid option. `%s` option must be a number in the range 0 to 1. Option: `%f`.', 'alpha', opts.alpha ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'alternative' ) ) {\n\t\topts.alternative = options.alternative;\n\t\tif ( !isString( opts.alternative ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a string. Option: `%s`.', 'alternative', opts.alternative ) );\n\t\t}\n\t}\n\tif ( hasOwnProp( options, 'difference' ) ) {\n\t\topts.difference = options.difference;\n\t\tif ( !isNumber( opts.difference ) || isnan( opts.difference ) ) {\n\t\t\treturn new TypeError( format( 'invalid option. `%s` option must be a number. Option: `%s`.', 'difference', opts.difference ) );\n\t\t}\n\t}\n\treturn null;\n}\n\n\n// EXPORTS //\n\nmodule.exports = validate;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isPositiveInteger = require( '@stdlib/assert/is-positive-integer' );\nvar isObject = require( '@stdlib/assert/is-plain-object' );\nvar isBoolean = require( '@stdlib/assert/is-boolean' ).isPrimitive;\nvar hasOwnProp = require( '@stdlib/assert/has-own-property' );\nvar roundn = require( '@stdlib/math/base/special/roundn' );\nvar format = require( '@stdlib/string/format' );\n\n\n// MAIN //\n\n/**\n* Pretty-print output of test.\n*\n* @param {Object} [opts] - options object\n* @param {PositiveInteger} [opts.digits=4] - number of digits after the decimal point\n* @param {boolean} [opts.decision=true] - boolean indicating whether to print the test decision\n* @throws {TypeError} options argument must be an object\n* @throws {TypeError} must provide valid options\n* @returns {string} formatted output\n*/\nfunction print( opts ) { // eslint-disable-line stdlib/no-redeclare\n\t/* eslint-disable no-invalid-this */\n\tvar decision;\n\tvar dgts;\n\tvar str;\n\n\tdgts = 4;\n\tdecision = true;\n\tif ( arguments.length > 0 ) {\n\t\tif ( !isObject( opts ) ) {\n\t\t\tthrow new TypeError( format( 'invalid argument. First argument must be an options object. Value: `%s`.', opts ) );\n\t\t}\n\t\tif ( hasOwnProp( opts, 'digits' ) ) {\n\t\t\tif ( !isPositiveInteger( opts.digits ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a positive integer. Option: `%s`.', 'digits', opts.digits ) );\n\t\t\t}\n\t\t\tdgts = opts.digits;\n\t\t}\n\t\tif ( hasOwnProp( opts, 'decision' ) ) {\n\t\t\tif ( !isBoolean( opts.decision ) ) {\n\t\t\t\tthrow new TypeError( format( 'invalid option. `%s` option must be a boolean. Option: `%s`.', 'decision', opts.decision ) );\n\t\t\t}\n\t\t\tdecision = opts.decision;\n\t\t}\n\t}\n\n\tstr = '';\n\tstr += this.method;\n\tstr += '\\n\\n';\n\tstr += 'Alternative hypothesis: ';\n\tstr += 'True difference in means is ';\n\tswitch ( this.alternative ) {\n\tcase 'less':\n\t\tstr += 'less than ';\n\t\tbreak;\n\tcase 'greater':\n\t\tstr += 'greater than ';\n\t\tbreak;\n\tcase 'two-sided':\n\tdefault:\n\t\tstr += 'not equal to ';\n\t\tbreak;\n\t}\n\tstr += this.nullValue;\n\tstr += '\\n\\n';\n\tstr += '    pValue: ' + roundn( this.pValue, -dgts ) + '\\n';\n\tstr += '    statistic: ' + roundn( this.statistic, -dgts ) + '\\n';\n\tstr += '    ' + ((1.0-this.alpha)*100) + '% confidence interval: [' +\n\t\troundn( this.ci[0], -dgts ) +\n\t\t',' +\n\t\troundn( this.ci[1], -dgts ) +\n\t']';\n\tstr += '\\n\\n';\n\tif ( decision ) {\n\t\tstr += 'Test Decision: ';\n\t\tif ( this.rejected ) {\n\t\t\tstr += 'Reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t} else {\n\t\t\tstr += 'Fail to reject null in favor of alternative at ' + (this.alpha*100) + '% significance level';\n\t\t}\n\t\tstr += '\\n';\n\t}\n\treturn str;\n}\n\n\n// EXPORTS //\n\nmodule.exports = print;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nvar isNumberArray = require( '@stdlib/assert/is-number-array' ).primitives;\nvar isTypedArrayLike = require( '@stdlib/assert/is-typed-array-like' );\nvar isPositiveNumber = require( '@stdlib/assert/is-positive-number' ).isPrimitive;\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\nvar quantileFactory = require( './../../base/dists/normal/quantile' ).factory;\nvar cdfFactory = require( './../../base/dists/normal/cdf' ).factory;\nvar format = require( '@stdlib/string/format' );\nvar sqrt = require( '@stdlib/math/base/special/sqrt' );\nvar abs = require( '@stdlib/math/base/special/abs' );\nvar mean = require( './../../base/mean' );\nvar NINF = require( '@stdlib/constants/float64/ninf' );\nvar PINF = require( '@stdlib/constants/float64/pinf' );\nvar validate = require( './validate.js' );\nvar print = require( './print.js' ); // eslint-disable-line stdlib/no-redeclare\n\n\n// VARIABLES //\n\nvar normQuantile = quantileFactory( 0.0, 1.0 );\nvar normCDF = cdfFactory( 0.0, 1.0 );\n\n\n// MAIN //\n\n/**\n* Computes a two-sample z-test.\n*\n* @param {NumericArray} x - first data array\n* @param {NumericArray} y - second data array\n* @param {PositiveNumber} sigmax - known standard deviation of first group\n* @param {PositiveNumber} sigmay - known standard deviation of second group\n* @param {Options} [options] - function options\n* @param {number} [options.alpha=0.05] - significance level\n* @param {string} [options.alternative='two-sided'] - alternative hypothesis (`two-sided`, `less` or `greater`)\n* @param {number} [options.difference=0] - difference in means under H0\n* @throws {TypeError} x argument has to be a typed array or array of numbers\n* @throws {TypeError} y argument has to be a typed array or array of numbers\n* @throws {TypeError} sigmax argument has to be a positive number\n* @throws {TypeError} sigmay argument has to be a positive number\n* @throws {TypeError} options has to be simple object\n* @throws {TypeError} must provide valid options\n* @throws {Error} `alternative` option  must be either `two-sided`, `less`, or `greater`\n* @returns {Object} test result object\n*/\nfunction ztest2( x, y, sigmax, sigmay, options ) {\n\tvar stderr;\n\tvar alpha;\n\tvar xmean;\n\tvar ymean;\n\tvar cint;\n\tvar diff;\n\tvar opts;\n\tvar pval;\n\tvar xvar;\n\tvar yvar;\n\tvar stat;\n\tvar alt;\n\tvar err;\n\tvar out;\n\tvar nx;\n\tvar ny;\n\n\tif ( !isTypedArrayLike( x ) && !isNumberArray( x ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. First argument `x` must be a numeric array. Value: `%s`.', x ) );\n\t}\n\tif ( !isTypedArrayLike( y ) && !isNumberArray( y ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Second argument `y` must be a numeric array. Value: `%s`.', y ) );\n\t}\n\tif ( !isPositiveNumber( sigmax ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument `sigmax` must be a positive number. Value: `%s`.', sigmax ) );\n\t}\n\tif ( !isPositiveNumber( sigmay ) ) {\n\t\tthrow new TypeError( format( 'invalid argument. Third argument `sigmay` must be a positive number. Value: `%s`.', sigmay ) );\n\t}\n\topts = {};\n\tif ( options ) {\n\t\terr = validate( opts, options );\n\t\tif ( err ) {\n\t\t\tthrow err;\n\t\t}\n\t}\n\tdiff = opts.difference || 0.0;\n\tif ( opts.alpha === void 0 ) {\n\t\talpha = 0.05;\n\t} else {\n\t\talpha = opts.alpha;\n\t}\n\tnx = x.length;\n\tny = y.length;\n\n\txvar = sigmax * sigmax;\n\tyvar = sigmay * sigmay;\n\tstderr = sqrt( (xvar/nx) + (yvar/ny) );\n\n\txmean = mean( nx, x, 1 );\n\tymean = mean( ny, y, 1 );\n\tstat = ( xmean - ymean - diff ) / stderr;\n\n\talt = opts.alternative || 'two-sided';\n\tswitch ( alt ) {\n\tcase 'two-sided':\n\t\tpval = 2.0 * normCDF( -abs(stat) );\n\t\tcint = [\n\t\t\tstat - normQuantile( 1.0-(alpha/2.0) ),\n\t\t\tstat + normQuantile( 1.0-(alpha/2.0) )\n\t\t];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tcase 'greater':\n\t\tpval = 1.0 - normCDF( stat );\n\t\tcint = [ stat - normQuantile( 1.0-alpha ), PINF ];\n\t\tcint[ 0 ] = diff + (cint[ 0 ] * stderr);\n\t\tbreak;\n\tcase 'less':\n\t\tpval = normCDF( stat );\n\t\tcint = [ NINF, stat + normQuantile( 1.0-alpha ) ];\n\t\tcint[ 1 ] = diff + (cint[ 1 ] * stderr);\n\t\tbreak;\n\tdefault:\n\t\tthrow new Error( format( 'Invalid option. `alternative` must be either `two-sided`, `less`, or `greater`. Value: `%s`.', alt ) );\n\t}\n\tout = {};\n\tsetReadOnly( out, 'rejected', pval <= alpha );\n\tsetReadOnly( out, 'alpha', alpha );\n\tsetReadOnly( out, 'pValue', pval );\n\tsetReadOnly( out, 'statistic', stat );\n\tsetReadOnly( out, 'ci', cint );\n\tsetReadOnly( out, 'alternative', alt );\n\tsetReadOnly( out, 'method', 'Two-sample z-test' );\n\tsetReadOnly( out, 'nullValue', diff );\n\tsetReadOnly( out, 'xmean', xmean );\n\tsetReadOnly( out, 'ymean', ymean );\n\tsetReadOnly( out, 'print', print );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute a two-sample z-Test.\n*\n* @module @stdlib/stats/ztest2\n*\n* @example\n* var ztest2 = require( '@stdlib/stats/ztest2' );\n*\n* var x = [ 2.66, 1.5, 3.25, 0.993, 2.31, 2.41, 1.76, 2.57, 2.62, 1.23 ]; // Drawn from N(2,1)\n* var y = [ 4.88, 2.93, 2.96, 4.5, -0.0603, 4.62, 3.35, 2.98 ]; // Drawn from N(3,2)\n*\n* var out = ztest2( x, y, 1.0, 2.0 );\n* // returns {...}\n*/\n\n// MODULES //\n\nvar ztest2 = require( './main.js' );\n\n\n// EXPORTS //\n\nmodule.exports = ztest2;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils/define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name anova1\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/anova1}\n*/\nsetReadOnly( ns, 'anova1', require( './../anova1' ) );\n\n/**\n* @name bartlettTest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/bartlett-test}\n*/\nsetReadOnly( ns, 'bartlettTest', require( './../bartlett-test' ) );\n\n/**\n* @name binomialTest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/binomial-test}\n*/\nsetReadOnly( ns, 'binomialTest', require( './../binomial-test' ) );\n\n/**\n* @name chi2gof\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/chi2gof}\n*/\nsetReadOnly( ns, 'chi2gof', require( './../chi2gof' ) );\n\n/**\n* @name chi2test\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/chi2test}\n*/\nsetReadOnly( ns, 'chi2test', require( './../chi2test' ) );\n\n/**\n* @name flignerTest\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/fligner-test}\n*/\nsetReadOnly( ns, 'flignerTest', require( './../fligner-test' ) );\n\n/**\n* @name incr\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/incr}\n*/\nsetReadOnly( ns, 'incr', require( './../incr' ) );\n\n/**\n* @name iterators\n* @memberof ns\n* @readonly\n* @type {Namespace}\n* @see {@link module:@stdlib/stats/iter}\n*/\nsetReadOnly( ns, 'iterators', require( './../iter' ) );\n\n/**\n* @name kde2d\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/kde2d}\n*/\nsetReadOnly( ns, 'kde2d', require( './../kde2d' ) );\n\n/**\n* @name kruskalTest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/kruskal-test}\n*/\nsetReadOnly( ns, 'kruskalTest', require( './../kruskal-test' ) );\n\n/**\n* @name kstest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/kstest}\n*/\nsetReadOnly( ns, 'kstest', require( './../kstest' ) );\n\n/**\n* @name leveneTest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/levene-test}\n*/\nsetReadOnly( ns, 'leveneTest', require( './../levene-test' ) );\n\n/**\n* @name lowess\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/lowess}\n*/\nsetReadOnly( ns, 'lowess', require( './../lowess' ) );\n\n/**\n* @name padjust\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/padjust}\n*/\nsetReadOnly( ns, 'padjust', require( './../padjust' ) );\n\n/**\n* @name pcorrtest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/pcorrtest}\n*/\nsetReadOnly( ns, 'pcorrtest', require( './../pcorrtest' ) );\n\n/**\n* @name ranks\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/ranks}\n*/\nsetReadOnly( ns, 'ranks', require( './../ranks' ) );\n\n/**\n* @name ttest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/ttest}\n*/\nsetReadOnly( ns, 'ttest', require( './../ttest' ) );\n\n/**\n* @name ttest2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/ttest2}\n*/\nsetReadOnly( ns, 'ttest2', require( './../ttest2' ) );\n\n/**\n* @name vartest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/vartest}\n*/\nsetReadOnly( ns, 'vartest', require( './../vartest' ) );\n\n/**\n* @name wilcoxon\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/wilcoxon}\n*/\nsetReadOnly( ns, 'wilcoxon', require( './../wilcoxon' ) );\n\n/**\n* @name ztest\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/ztest}\n*/\nsetReadOnly( ns, 'ztest', require( './../ztest' ) );\n\n/**\n* @name ztest2\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/stats/ztest2}\n*/\nsetReadOnly( ns, 'ztest2', require( './../ztest2' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],"names":["betainc","require$$0","isnan","require$$1","PINF","require$$2","constantFunction","require$$3","cdf","x","d1","d2","NaN","lib","hasOwnProp","isObject","isNumber","isPrimitive","format","require$$4","validate_1","opts","options","TypeError","alpha","RangeError","SORT_OPTS","numeric","ascending","a","b","String","localeCompare","unique_1","arr","len","out","val","i","j","Array","prototype","slice","call","length","sort","sqrt","main","mean","delta","mu","M2","N","arguments","accumulator2","accumulator1","incrstdev","mean_table","factor","treats","tableOfMeans","factorCount","accumulator","newMean","k","sampleSize","SD","mean_1","isPositiveInteger","roundn","repeat","max","require$$5","isBoolean","require$$6","require$$7","spaces","n","print","results","statistic","decision","treatMS","treatDF","treatSS","extra1","extra2","extra3","errMS","errDF","errSS","ndgts","dgts","str","digits","method","treatment","ss","toString","error","ms","df","pValue","rejected","isNumberArray","primitives","isTypedArrayLike","isArray","setReadOnly","copy","defaults","require$$8","validate","require$$9","unique","require$$10","meanTable","require$$11","require$$12","prettyPrint","require$$13","meanSumSqTreat","meanSumSqError","ssTreatment","sumSqTotal","sumSqError","grandMean","nGroups","fScore","means","numDf","denDf","nobs","pVal","err","sq","gammainc","cdf_1","beta","degenerate","factory","gammaCDF","gammaFactory","variance_1","groups","print_1","this","isCollection","isPlainObject","objectKeys","chisqCDF","group","ln","variance","ngroups","ninvSum","levels","table","nSum","vSum","args","pval","stat","arg","lnv","v","Error","push","betaincinv","quantile","p","isNonNegativeInteger","floor","binomcoefln","log1p","exp","pmf_1","lnl","pmf","isString","alternative","nullValue","ci","betaQuantile","ceil","binomialCDF","binomialPMF","lower","upper","cint","alt","d","m","y","DEFAULTS","defaults_1","ddof","simulate","iterations","isInteger","ninv","pow","fln","min","K","ldenom","lnum","maxs","mins","lanczosSumExpGScaled","expm1","abs","MAX_LN","MIN_LN","G","E","ibetaPowerTerms","normalized","result","smallA","ratio","agh","bgh","cgh","l1","l2","l3","p1","b1","b2","c","l","ibeta_derivative","f1","ibetaDerivative","r","factorialln","lambda","PMF","bernoulli","binomial","geometric","hypergeometric","poisson","get_pmf","name","strideX","strideY","v1","v2","incrspace","sample","Float64Array","dfill","tabulate","testStatistic","simulate_1","expected","niter","pool","freq","cnt","size","probs","setReadOnlyAccessor","Results","_pValue","_alpha","_statistic","_df","join","isndarrayLike","absdiff","FLOAT64_SQRT_EPS","daxpy","dscal","dsumpw","require$$14","require$$15","require$$16","getPMF","require$$17","require$$18","require$$19","require$$20","nargs","obs","sum","s","o","ndims","strides","data","offset","apply","isNegativeZero","sum_1","mat","dim","s0","s1","M","shape","array","outer_1","xlen","ylen","set","absdiff_1","get","isNonNegativeIntegerArray","isMatrixLike","isArrayArray","incrmin","gsum","sumByDimension","outer","correct","absDiff","colSums","rowSums","minAbs","yates","param","nrow","ncol","e","_buffer","erfinv","quantile_1","sigma","A","B","order_1","compareFunction","contains","is_missing","encoding","METHODS","MISSING","order","isMissing","missing","missingIndices","noDuplicates","countMissing","totalNoTies","finalRanks","iPlusOne","ordered","tieRank","ranks","xnew","shift","median_1","id","qnorm","indexOf","median","scores","sums","xabs","loc","concat","meanx","meany","M2x","M2y","dy1","dy2","dy","dx","mx","my","sx","sy","C","incrpcorr","acc","count","isSquareMatrix","isVectorLike","ctor","bctor","numel","createMatrix","bool","createVector","buffer","cov","covij","denom","rdx","cij","di","isNonNegativeNumber","incr","s2","isArrayLike","isPositiveZero","NINF","minmax","FLG","meanstdev","kernelBetaincinv","sign","prob","xs","init","incrminmax","incrmeanstdev","tQuantile","mm","gc","getRejected","getCriticalValue","getStatistic","getDOF","getMean","getStDev","getMin","getMax","sig","md","tc","incrmean","deltaN2","deltaN","term1","tmp","M3","M4","atan","f","W","buf","dx0","dxN","dy0","dyN","wi","n1","incrmpcorr","incrmax","signum","kroneckerDelta","f0","a0","sf","sa","meanvar","gm","lnx","sgn","incrmminmax","incrmmeanstdev","incrmmean","mmean","ax","incrmmax","window","incrmmin","pcorr","isInfinite","frexp","ldexp","product","workspace","frac","parts","prod","incrmsum","incrmvariance","incrmstdev","incrmrange","incrmmidrange","mvariance","mmidrange","summary","mrange","mstdev","msum","mmax","mmin","stdev","range","midrange","ccs","cs","cc","t","incrsum","incrsumabs","incrsumabs2","dist","sd","dij","sdi","vi","diagonal","matrix","corr","rij","PARTS","g1","incrcount","incrrange","incrmidrange","incrvariance","incrskewness","incrkurtosis","skewness","kurtosis","wsum","w","ns","require$$21","require$$22","require$$23","require$$24","require$$25","require$$26","require$$27","require$$28","require$$29","require$$30","require$$31","require$$32","require$$33","require$$34","require$$35","require$$36","require$$37","require$$38","require$$39","require$$40","require$$41","require$$42","require$$43","require$$44","require$$45","require$$46","require$$47","require$$48","require$$49","require$$50","require$$51","require$$52","require$$53","require$$54","require$$55","require$$56","require$$57","require$$58","require$$59","require$$60","require$$61","require$$62","require$$63","require$$64","require$$65","require$$66","require$$67","require$$68","require$$69","require$$70","require$$71","require$$72","require$$73","require$$74","require$$75","require$$76","require$$77","require$$78","require$$79","require$$80","require$$81","require$$82","require$$83","require$$84","require$$85","require$$86","require$$87","require$$88","require$$89","require$$90","require$$91","require$$92","require$$93","require$$94","isIteratorLike","isFunction","iteratorSymbol","incrgmean","itercugmean","iterator","iter","done","next","value","incrhmean","itercuhmean","itercumax","incrmaxabs","itercumaxabs","itercumean","incrmeanabs","itercumeanabs","incrmeanabs2","itercumeanabs2","itercumidrange","itercumin","incrminabs","itercuminabs","incrprod","itercuprod","itercurange","itercusum","itercusumabs","itercusumabs2","itermmax","incrmmaxabs","itermmaxabs","itermmean","incrmmeanabs","itermmeanabs","incrmmeanabs2","itermmeanabs2","itermmidrange","itermmin","incrmminabs","itermminabs","incrmprod","itermprod","itermrange","itermsum","incrmsumabs","itermsumabs","incrmsumabs2","itermsumabs2","stdev_1","h","EPSILON","iqr","pick_bandwidth","minElement","sigmaHat","iqrVal","INV_SQRT_TWO_PI","gaussian_1","u","epanechnikov_1","FOURTH_PI","HALF_PI","cos","cosine_1","quartic_1","triangular_1","absU","tricube_1","triweight_1","uniform_1","kernels","get_kernel","kernel","isPositiveNumberArray","isError","getKernel","isNumericArray","max_1","ndarray","linspace","pickBandwidth","xMax","xMin","yMax","yMin","ndarrayLike","minObs","gaussian","kernelFunction","maxArgs","zScoreY","gridX","gridY","xVal","ans","gx","gy","hX","hY","ix","iy","z","countBy","rank","identity","groupsIndicators","groupRankSums","tieSumTerm","vals","ties","key","stride","smirnov","marsaglia","eQ","H","Q","g","mpow","eA","eB","mmult","ascending_1","subtract_1","res","sorted","asin","TWO_OVER_PI","betaCDF","betaFactory","factory_1","atan2","x0","gamma","sinpi","PI","factoryGamma","erfc","normalCDF","x2","denom1","denom2","CDF","get_cdf","pKolmogorov1","pKolmogorov","subtract","getCDF","nDistParams","distParams","distArgs","yVal","idx","accumulators","anova1","absMeanDiff","range_1","lowest_1","nleft","nright","userw","rw","nrt","h1","h9","ys","lowest","lowess_1","nsteps","cmad","last","cut","m1","m2","c1","c9","isPositiveNumber","lowess","xy","bonferroni_1","pvalues","comparisons","Int32Array","descending","invert","comparator","hommel_1","indices","diff","adj","mq","q","cumax_1","offsetX","offsetY","cumax","holm_1","cumin_1","cumin","bh_1","by_1","isProbabilityArray","bonferroni","hommel","holm","bh","by","pvals","gsumpw","variancepn_1","correction","variancepn","gapxsumpw","meanpn_1","meanpn","pcorr_1","num","xm","ym","rho","cdfFactory","atanh","tanh","tCDF","normQuantile","quantileFactory","normCDF","se","ALTERNATIVE","gcopy","stderr","xmean","tq","difference","ymean","vars","xvar","yvar","sdx","sdy","nx","ny","dfX","dfY","fCDF","fQuantile","memoized","estimate","mlim","isfinite","round","LN2","weights","pui","ALTERNATIVE_VALUES","ZERO_METHOD_VALUES","exact","zeroMethod","signrankCDF","pnorm","hasTies","counts","repsum","rplus","nzero","rzero","ad","mn","T","normalQuantile","isProbability","sigmax","sigmay"],"mappings":"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"}