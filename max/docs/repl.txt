
{{alias}}( x[, options] )
    Computes the maximum value along one or more ndarray dimensions.

    Parameters
    ----------
    x: ndarray
        Input array. Must have a real-valued or "generic" data type.

    options: Object (optional)
        Function options.

    options.dtype: string (optional)
        Output array data type. Must be a real-valued or "generic" data type.

    options.dims: Array<integer> (optional)
        List of dimensions over which to perform a reduction. If not provided,
        the function performs a reduction over all elements in a provided input
        ndarray.

    options.keepdims: boolean (optional)
        Boolean indicating whether the reduced dimensions should be included in
        the returned ndarray as singleton dimensions. Default: false.

    Returns
    -------
    out: ndarray
        Output array.

    Examples
    --------
    > var buf = [ -1.0, 2.0, -3.0, -4.0 ];
    > var dt = 'generic';
    > var sh = [ buf.length ];
    > var sx = [ 1 ];
    > var ox = 0;
    > var ord = 'row-major';
    > var x = new {{alias:@stdlib/ndarray/ctor}}( dt, buf, sh, sx, ox, ord );
    > var y = {{alias}}( x );
    > var v = y.get()
    2.0


{{alias}}.assign( x, out[, options] )
    Computes the maximum value along one or more ndarray dimensions and assigns
    results to a provided output ndarray.

    Parameters
    ----------
    x: ndarray
        Input array. Must have a real-valued or generic data type.

    out: ndarray
        Output array.

    options: Object (optional)
        Function options.

    options.dims: Array<integer> (optional)
        List of dimensions over which to perform a reduction. If not provided,
        the function performs a reduction over all elements in a provided input
        ndarray.

    Returns
    -------
    out: ndarray
        Output array.

    Examples
    --------
    > var buf = [ -1.0, 2.0, -3.0, -4.0 ];
    > var dt = 'generic';
    > var sh = [ buf.length ];
    > var sx = [ 1 ];
    > var ox = 0;
    > var ord = 'row-major';
    > var x = new {{alias:@stdlib/ndarray/ctor}}( dt, buf, sh, sx, ox, ord );
    > var out = {{alias:@stdlib/ndarray/zeros}}( [], { 'dtype': dt } );
    > var y = {{alias}}.assign( x, out )
    <ndarray>
    > var bool = ( out === y )
    true
    > var v = out.get()
    2.0

    See Also
    --------

